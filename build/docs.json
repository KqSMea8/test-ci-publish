[
  {
    "filename": "about.md",
    "path": "about",
    "title": "关于飞冰",
    "order": 1,
    "cover": "https://gw.alicdn.com/tfs/TB1vBRYaVOWBuNjy0FiXXXFxVXa-2558-1306.jpg",
    "participle": {
      "title": "飞冰",
      "content": "飞冰 后台 物料 开发 com 区块 搭建 模板 组件 https 体系 布局 面向 应用 提供 iceworks alicdn ice img jpg tfs 开发者 效率 基础 工具 服务体系 使用 界面 淘宝 视觉 目前 进行 系统 体验 团队 通栏 重复 特定 初心 一套 完整 图形化 维护 问题 愿景 1306. React BU dark alibaba title 钉钉群 gw 飞冰中 cover 270 ICE Design 110 1280. src 及后 order Iceworks 2558 admin 端到 light 赋能 github qFXa UI width 300 new 970 mailto 55 UED alibaba-inc 2.0 issues 帮助 链路 数不尽 快速 内部 设计 从零开始 小二 复用 目标 开发成本 达人 侧边 答疑 参差不齐 项目 组合而成 自建 大打折扣 设计者 共建 一对一 私有 卖家 达到 邮件 承载 两套 专人 点击 推移 阿里巴巴 客服 解决方案 一个 企业 对接 独有 或多或少 反馈 解决问题 时间 场景 对外开放 阿里 前端 端的 抽象 高效 同类 顶部 构建 统称 旨在 同学 打造 配套 下载 诞生 获取 运营 已经 用户 发起 分类 组合 之上 差异 变动 包含 常用 规范 指导 而成 相互 常见 平台 主题 专业 语言 多个 模式 高度 前期 已有 方案 每个 立即 质量 变得 成本 安排 较为 类型 找到 联系 人员 提升 共同 功能 统一 独立 通常 领域 个人 属于 服务 解决 阶段 参与 一条 信息 建议 减少 希望 以下 第一 选择 整个 支持 几乎 这一 为主 大量 持续 非常 组织 不断 提高 技术 正在 存在 一直 具有 需要 这是 增长 发展"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "目标和愿景"
      ],
      [
        "p",
        "飞冰是一套基于 React 的中后台应用解决方案，在阿里巴巴内部，已经有 270 多个来自几乎所有 BU 的项目在使用。经过 2 年的发展，飞冰已经是中后台 2.0 体系，这个阶段中我们的目标是赋能企业、组织搭建自己的中后台体系。飞冰包含了一条从设计端到开发端的完整链路，帮助我们的用户快速搭建属于自己的中后台应用。"
      ],
      [
        "p",
        "我们希望中后台应用的开发能变得更高效。面向",
        [
          "strong",
          "设计者"
        ],
        "端，我们提供了 ICE Design 设计语言，来给我们的 UI 界面提供专业的视觉指导。面向",
        [
          "strong",
          "开发者"
        ],
        "端，我们提供了 Iceworks 工具，这是一个图形化界面的开发平台，它承载了飞冰的物料体系和开发体验，获取更多信息您可以立即",
        [
          "a",
          {
            "title": null,
            "href": "#/iceworks"
          },
          "点击这里"
        ],
        "下载体验。同时，我们还提供了独有的",
        [
          "strong",
          "服务体系"
        ],
        "，在物料与工具这一基础之上进行服务的配套。我们将构建一个面向开发者的服务体系。针对每一个使用飞冰的企业或个人，我们会安排专人客服进行一对一的对接，一旦有问题可以随时找到我们，第一时间帮助解决问题。"
      ],
      [
        "h2",
        "初心"
      ],
      [
        "p",
        "在整个阿里体系内，面向卖家、运营小二以及达人有数不尽的后台，并且这些后台一直在持续不断的增长着，但是随着时间的推移，这些项目或多或少的存在着以下这些问题："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "每个后台相互独立，同类功能也需要重复开发，前期开发成本较高"
          ]
        ],
        [
          "li",
          [
            "p",
            "技术方案差异大，人员变动后维护成本非常高"
          ]
        ],
        [
          "li",
          [
            "p",
            "视觉质量参差不齐，使用效率大打折扣"
          ]
        ],
        [
          "li",
          [
            "p",
            "..."
          ]
        ]
      ],
      [
        "p",
        "飞冰就是为了解决这些问题而诞生。飞冰由淘宝前端团队发起，与淘宝 UED 及后端开发同学共同打造，旨在「提高中后台系统的开发效率」。"
      ],
      [
        "h2",
        "物料体系"
      ],
      [
        "p",
        "在飞冰中，组件、区块、布局、模板等统称为物料，由飞冰团队维护，在内部有一套完整的开发规范和工具，目前也正在逐步对外开放中；基于此，你可以参与共建飞冰，也可以自建私有的物料体系。"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "组件：最基础的物料，目前飞冰的基础组件达到 55+，具有高度可复用性。"
          ]
        ],
        [
          "li",
          [
            "p",
            "区块：通过对大量的中后台系统常用的场景进行分类、对比和抽象，基于基础组件组合而成，目前飞冰的区块达到 110+，可以通过 iceworks 进行快速组合搭建应用，减少重复的开发，提升效率。"
          ]
        ],
        [
          "li",
          [
            "p",
            "布局：在中后台系统中布局通常较为统一，以 ",
            [
              "code",
              "顶部-侧边布局-通栏"
            ],
            " 模式为主，为此我们提供了 4+ 常见的布局，支持 ",
            [
              "code",
              "light"
            ],
            " 和 ",
            [
              "code",
              "dark"
            ],
            " 两套主题。"
          ]
        ],
        [
          "li",
          [
            "p",
            "模板：基于已有的区块搭建而成，目前提供了 4+ 的特定领域的模板，可以从零开始搭建应用，也可以选择特定类型的模板开始使用。"
          ]
        ]
      ],
      [
        "h2",
        "联系我们"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "邮件：",
            [
              "a",
              {
                "title": null,
                "href": "mailto:ice-admin@alibaba-inc.com"
              },
              "ice-admin@alibaba-inc.com"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "反馈/建议：",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/alibaba/ice/issues/new"
              },
              "https://github.com/alibaba/ice/issues/new"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "答疑钉钉群：",
            [
              "img",
              {
                "src": "https://img.alicdn.com/tfs/TB1UKaqEsbpK1RjSZFyXXX_qFXa-970-1280.jpg",
                "width": "300"
              }
            ]
          ]
        ]
      ]
    ]
  },
  {
    "filename": "advanced/create-create-react-app-project.md",
    "path": "advanced/create-create-react-app-project",
    "title": "使用 Iceworks 创建 create-react-app 的项目",
    "order": 7,
    "category": "进阶指南",
    "participle": {
      "title": "create app Iceworks react 创建 项目 使用",
      "content": "react app js create Iceworks 区块 模板 App index ice 添加 项目 css com https 创建 目录 pages src 使用 默认 自定义 alicdn 飞冰 registerServ png svg Worker scripts test img tfs github logo json 页面 组件 界面 支持 结构 引入 新建 开发方式 预览 以该 1768 ico tools alibaba title tree ICE html 进阶 gitignore scss rewired TabTable favicon facebook public package 1064. overrides order rewire config md 1908 master manifest 1368. README category 开发工具 开发 浏览器 初始化 基础 保持一致 调试 指南 存放 社区 窗口 接下来 官方 熟悉 自动 启动 打开 新增 配置 说明 服务 成功 用于 选择 能力 看到 基本 提供 不同 进行 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "飞冰默认使用 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/tree/master/tools/ice-scripts"
          },
          "ice-scripts"
        ],
        " 作为开发工具，但是如果你想使用社区的 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/facebook/create-react-app"
          },
          "create-react-app"
        ],
        " 开发项目，我们也在 Iceworks 里提供了基于 create-react-app 的模板，支持按需引入飞冰基础组件，添加区块等能力。"
      ],
      [
        "h2",
        "初始化项目"
      ],
      [
        "p",
        "在 Iceworks 模板界面选择 create-react-app 模板，以该模板创建项目"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1GTwcm7yWBuNjy0FpXXassXXa-1908-1368.png",
            "alt": "Iceworks"
          }
        ]
      ],
      [
        "h2",
        "预览"
      ],
      [
        "p",
        "创建项目后，可以在 Iceworks 项目界面启动调试服务, 会自动打开浏览器窗口，看到如下页面说明创建项目成功"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1u1gxm1uSBuNjy1XcXXcYjFXa-1768-1064.png",
            "alt": "create-react-app"
          }
        ]
      ],
      [
        "h2",
        "添加区块"
      ],
      [
        "p",
        "使用 Iceworks create-react-app 模板创建的项目与官方 create-react-app 模板基本保持一致，不同的点在于使用了 react-app-rewired 进行自定义配置，支持按需引入 ICE 基础组件，目录结构如下："
      ],
      [
        "h3",
        "目录结构"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n├── README.md\n├── .gitignore\n├── config-overrides.js\n├── package.json\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   └── manifest.json\n├── rewire-scss.js\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    └── registerServiceWorker.js"
        ]
      ],
      [
        "h3",
        "添加区块"
      ],
      [
        "p",
        "通过 Iceworks 新建页面添加的区块默认会在项目 ",
        [
          "code",
          "src"
        ],
        " 下新建 ",
        [
          "code",
          "pages"
        ],
        " 目录，用于存放添加的区块，如添加一个 TabTable 区块后，目录结构如下："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n└── src\n    ├── pages/     // 新增 pages 目录\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    └── registerServiceWorker.js"
        ]
      ],
      [
        "p",
        "使用 create-react-app 模板创建的项目默认只支持添加区块；接下来，可以按照你熟悉的开发方式自定义开发。"
      ]
    ]
  },
  {
    "filename": "advanced/how-to-dynamic-load.md",
    "path": "advanced/how-to-dynamic-load",
    "title": "如何实现静态资源的按需加载",
    "category": "进阶指南",
    "order": 3,
    "participle": {
      "title": "加载 静态 资源 实现",
      "content": "js 加载 import List loading loadable 页面 react default LoadingIndicator com export 组件 ponent 0. 打包 编号 loader Loadable list 进阶 webpackChunkName Loading 1. div 定义 动画 文件名 静态 注释 步骤 资源 实现 依赖 声明 修改 数字 名称 未声明 文件 https src return pages 2. package order npm const 时则 category index title React xxx www 当前 用于 内容 文档 并不需要 过程 浏览 显示 模块 需要 语法 用法 指南 一定量 切割 一次性 访问 参考 轻松 随之 即可 对应 增大 安装 改进 自动 还会 配置 到底 应用 无法 完成 代表 规模 项目 比较 达到 之后 知道 可能 进行 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "当页面规模、依赖组件达到一定量之后，打包后的文件也会随之增大，但在浏览某个页面的时候并不需要一次性加载所有内容，只需要当前页面的资源即可，此时可以参考本文档实现静态资源的切割及按需加载。"
      ],
      [
        "h2",
        "实现"
      ],
      [
        "p",
        "通过 ",
        [
          "a",
          {
            "title": null,
            "href": "https://www.npmjs.com/package/react-loadable"
          },
          "https://www.npmjs.com/package/react-loadable"
        ],
        " 组件能轻松完成项目应用的按需加载。"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "步骤 1. 首先需要安装该依赖包 ",
            [
              "code",
              "react-loadable"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "步骤 2. 对页面进行按需加载配置"
          ]
        ]
      ],
      [
        "p",
        "修改 ",
        [
          "code",
          "src/pages/xxx/index.js"
        ],
        " 文件内容"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// before\nimport List from './List';\n\nexport default List;"
        ]
      ],
      [
        "hr"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// after\nimport Loadable from 'react-loadable';\nimport Loading from './my-loading-component'; // 定义个加载组件，用于在加载过程中显示加载动画\n\nexport default loadable({\n  loader: () => import('./List'),\n  loading: LoadingIndicator,\n});"
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// my-loading-component\nimport React from 'react';\n\nconst LoadingIndicator = () => {\n  return <div>loading...</div>;\n};\n\nexport default LoadingIndicator;"
        ]
      ],
      [
        "p",
        "经过这样的修改打包后，",
        [
          "code",
          "List"
        ],
        " 则会打包成 ",
        [
          "code",
          "0.js"
        ],
        " ，当访问到 List 页面时则会自动加载 ",
        [
          "code",
          "0.js"
        ],
        " 。"
      ],
      [
        "blockquote",
        [
          "p",
          "0 代表一个编号, 可能还会是其他数字。"
        ]
      ],
      [
        "h2",
        "进阶用法"
      ],
      [
        "p",
        "当页面比较多的时候，就无法知道 ",
        [
          "code",
          "0.js"
        ],
        " ",
        [
          "code",
          "1.js"
        ],
        " 对应的到底是哪个页面。此时可以编号的名称。"
      ],
      [
        "p",
        [
          "code",
          "/* webpackChunkName: \"编号名称\" */"
        ],
        " 注释语法声明当前的模块名。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// after 改进后\nimport Loadable from 'react-loadable';\nimport Loading from './my-loading-component'; // 定义个加载组件，用于在加载过程中显示加载动画\n\nexport default loadable({\n  loader: () => import(/* webpackChunkName: \"list\" */ './List'),\n  loading: LoadingIndicator,\n});"
        ]
      ],
      [
        "p",
        "经过注释声明后，打包后的文件名为 ",
        [
          "code",
          "list.js"
        ],
        "，其他未声明的还是以数字定义文件名。"
      ]
    ]
  },
  {
    "filename": "advanced/how-to-redirect.md",
    "path": "advanced/how-to-redirect",
    "title": "如何实现页面间的跳转",
    "category": "进阶指南",
    "order": 2,
    "participle": {
      "title": "跳转 页面 实现",
      "content": "history 跳转 div react withRouter React Link import 组件 location router PropTypes props const object js isRequired 页面 标签 API sort hash render createBrowserHistory button pathname noAuth push extends state checkAuth courses dom return class Component handleHistoryPush res 使用 路由 方法 点击 调用 添加 路径 单独 ajax category true title static 进阶 bash search Demo export function page api 1. Dashboard propTypes 新页面 path data ShowTheLocation order default onClick 抽离 npm new 2. match install 表单 文档 实现 等同于 需要 权限 三方 指南 第一种 情况 额外 验证 提交 属性 携带 定义 代码 装饰 引入 依赖 获取 很少 满足 应用 内部 当前 推荐 介绍 操作 实际 业务 完成 条件 直接 相关 数据 应该 地方 这种 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "本文档介绍使用 react-router 的单页面应用如何实现页面跳转。"
      ],
      [
        "h3",
        "组件跳转"
      ],
      [
        "p",
        "通过 ",
        [
          "code",
          "<Link />"
        ],
        " 标签组件跳转，定义 ",
        [
          "code",
          "to"
        ],
        " 属性完成路径跳转，等同于点击一个 ",
        [
          "code",
          "<a />"
        ],
        " 标签。"
      ],
      [
        "p",
        "引入标签："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "import { Link } from 'react-router-dom';\n\nclass Demo extends React.Component {\n  render() {\n    return (\n      <div>\n        <Link to=\"/courses?sort=name\" />\n\n        {/* 可以携带额外的数据 `state` 到路由中。 */}\n        <Link\n          to={{\n            pathname: '/courses',\n            search: '?sort=name',\n            hash: '#the-hash',\n            state: { fromDashboard: true },\n          }}\n        />\n      </div>\n    )\n  }\n}"
        ]
      ],
      [
        "h3",
        "方法调用"
      ],
      [
        "p",
        "一般在某些操作后跳转路由使用，例如权限验证，表单提交后等。"
      ],
      [
        "h4",
        "1. withRouter"
      ],
      [
        "p",
        "如果调用方法的地方在 React 组件内部，可以直接\b在组件上添加 ",
        [
          "code",
          "withRouter"
        ],
        " 的装饰器，然后组件内可以通过 ",
        [
          "code",
          "props"
        ],
        " 获取到相关 API："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "import React from 'react';\nimport { withRouter } from 'react-router-dom';\n\n@withRouter\nclass ShowTheLocation extends React.Component {\n  static propTypes = {\n    match: PropTypes.object.isRequired,\n    location: PropTypes.object.isRequired,\n    history: PropTypes.object.isRequired,\n  };\n\n  handleHistoryPush = () => {\n    const { history } = this.props;\n    history.push('/new-path');\n  };\n\n  render() {\n    const { location } = this.props;\n    return (\n      <div>\n        <div>当前路径： {location.pathname}</div>\n        <button onClick={this.handleHistoryPush}>点击跳转新页面</button>\n      </div>\n    );\n  }\n}"
        ]
      ],
      [
        "h4",
        "2. history API"
      ],
      [
        "p",
        "如果不满足第一种方法的使用条件，比如单独抽离的某个方法中，则需要单独使用 history 的三方包，一般情况下不推荐这种情况，实际业务里应该很少需要："
      ],
      [
        "p",
        "首先添加依赖："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ npm install --save history"
        ]
      ],
      [
        "p",
        "然后在代码中使用："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "import { createBrowserHistory } from 'history';\n\nconst history = createBrowserHistory();\n\nexport default function checkAuth() {\n\n  ajax('/api/checkAuth').then((res) => {\n    if (res.data.noAuth) {\n      history.push('/page/noAuth');\n    }\n  });\n\n};"
        ]
      ]
    ]
  },
  {
    "filename": "advanced/iceland-manual.md",
    "path": "advanced/iceland-manual",
    "title": "使用 Iceland 搭建自定义区块",
    "order": 4,
    "category": "进阶指南",
    "participle": {
      "title": "自定义 Iceland 区块 搭建 使用",
      "content": "png 区块 https com img 面板 组件 单元格 搭建 属性 选项卡 点击 src 184 alicdn 图层 2018 cdn lark nlark tfs 添加 列表 页面 Iceland 画布 自定义 1392 Table 832. 物料 操作 选中 搜索 按钮 加减 List 选择 进行 展示 特性 调整 删除 配置 712. Editor Iceworks 1. 项中 进阶 982 生成 拖拽 区域 群组 模式 menu ice 蒙层 输入框 快速 使用 可视化 右上角 一键 鼠标 接下来 层面 用户 弹出 菜单 一个 编辑 箭头 排序 产品 显示 交互 智能化 差异化 个数 介绍 反馈 前端 流程 行列 这部分 技巧 同步 方式 代码 参考 新建 测试阶段 修改 对应 分类 一类 移动 保存 设置 双击 加入 预览 ae1 1535011810972 d25f 1535012708469 a87603044e4b 9011 上的 a842bef8b 420 8709 a53e2ac4b40 42 def8965507b ab9cbdaf title 板里 b1a74225bdf5 2. 扫码 板中的 a4a15c54 cfa3889f42 resize qFXa 1535012640500 80 a48 order de9ff12 a0 WFXa VXa 26 images iconfont 57 46 group 41 fb88783 却点 f75 45 ef132ffe 1538047963739 ed9 eb98f3b1 444 eb3a63 9938 bfa e1 delete be9d 1535012803890 飞冰 d94979020586 1535012976524 项作 d2901ed LAND e75f1f45c864 cdf ICE 1535012845910 category 1535011258743 4143 ef a86c 行高 f1 或在 bbf b26 群向 bb b928208f6306 c5 Ctrl 1538049039613 Cmd 28 b1 03 assets a51e aa0 afc 991 框选 ae6f7b3 图标 截图 对齐 位置 覆盖住 重命名 简单 平铺 功能 多选 改变 粘贴 二维码 内容 每行 重排 答疑 文档 标尺 海量 不断更新 导入 觉得 数据 演示 提供 过程 表格 美化 进入 诉求 后会 高质量 高频 文本 转换成 不会 界面 解决方案 用法 扫描 指南 只想 淘宝 数组 联动 元件 全程 倾听 定制 不清 集成 分辨 多样化 步骤 宽度 问题 右边 魅力 一组 可选 锁定 同行 顺序 标题 任意 好多 体验 下方 全新 发掘 关闭 辅助 下边 定义 查看 下载 透明 麻烦 一行 分成 创建 命名 想要 欢迎 交流 引导 整合 划分 黑色 颜色 包含 同一 允许 名字 启动 遇到 固定 四个 打开 多个 新增 高度 必要 效果 完善 满足 相应 之外 复杂 帮助 退出 类型 找到 设计 大部分 不再 丰富 回到 说明 解决 不到 整体 更加 实际 目标 重新 建议 以下 处于 需求 整个 支持 形式 持续 存在 不同 需要 继续 影响 目前 可能 主要"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "特性介绍"
      ],
      [
        "p",
        "Iceland 是一个搭建产品，帮助搭建者基于丰富的物料快速拖拽出想要的区块，重新定义前端区块搭建流程，使区块搭建更加智能化。"
      ],
      [
        "p",
        "产品集成了海量高质量物料，全程可视化搭建，代码一键生成，区块一键导入页面等特性，提供了区块搭建的全新解决方案。"
      ],
      [
        "p",
        "产品目前还处于测试阶段，我们将持续倾听用户诉求，朝着搭建智能化的目标不断更新，如果使用过程中存在问题，请钉钉扫描最下方二维码加入飞冰交流群，随时向我们反馈。"
      ],
      [
        "h2",
        "快速开始"
      ],
      [
        "p",
        "这部分将引导你通过 Iceland 快速搭建一个简单的区块，并通过 Iceworks 用它生成你的页面，使你快速体验到可视化搭建的魅力。"
      ],
      [
        "p",
        "本文档只对搭建自定义区块到生成页面整个操作流程做一个简单的介绍，Iceland 的更多特性和用法，用户可以在实际使用中继续发掘。"
      ],
      [
        "h3",
        "新建区块"
      ],
      [
        "p",
        "首先启动 Iceworks ，打开【区块】页面，选择【自定义区块】选项卡；"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1NuHEjG6qK1RjSZFmXXX0PFXa-982-712.png"
          }
        ]
      ],
      [
        "p",
        "点击【新建自定义区块】，为区块命名，点击【创建区块】；"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1l5fCjSzqK1RjSZFHXXb3CpXa-982-712.png"
          }
        ]
      ],
      [
        "p",
        "下载必要的物料数据后，弹出 Iceland 搭建页面。"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1go4rgSzqK1RjSZFjXXblCFXa-1392-832.png"
          }
        ]
      ],
      [
        "h3",
        "添加选项卡"
      ],
      [
        "p",
        "接下来让我们用 Iceland 搭建一个带搜索的选项卡区块，首先点击物料面板上的【组件】按钮，选择【选项卡】分类或在【搜索栏】搜索选项卡，将选项卡添加到画布；"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1m20rgMHqK1RjSZFkXXX.WFXa-1392-832.png"
          }
        ]
      ],
      [
        "p",
        "通过拖拽或者调整属性面板的属性的方式，调整选项卡的宽度，接着点击图层面板中的【选项卡面板】图层，调整选项卡的高度，在【选项卡】图层的属性面板的【属性配置】中可以修改选项卡的标题。"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1D38rgQvoK1RjSZFNXXcxMVXa-1392-832.png"
          }
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "进阶技巧："
        ]
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "觉得图层面板好多图层的名字都一样，分辨不清怎么办？"
          ],
          [
            "p",
            "答：双击图层面板里的图层可以对图层进行重命名"
          ]
        ],
        [
          "li",
          [
            "p",
            "觉得调整属性好麻烦，只想靠拖拽解决一切怎么办？"
          ],
          [
            "p",
            "答：点击标尺可以设置参考线，用参考线辅助组件固定位置"
          ]
        ]
      ],
      [
        "h3",
        "添加输入框"
      ],
      [
        "p",
        "接下来让我们添加输入框，首先在物料面板点击【组件】按钮，通过搜索或选择分类的方式找到【主要搜索框】组件，添加组件到画布中，在属性面板的【属性配置】中可以修改搜索框的内容；"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1yeXrgQvoK1RjSZPfXXXPKFXa-1392-832.png"
          }
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "可选步骤："
        ]
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "鼠标框选画布中的多个图层，或者 Cmd/Ctrl + 鼠标点击多选图层，通过右上角菜单面板的【群组】按钮将图层整合为一组；"
          ]
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "进阶技巧："
        ]
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "有时添加组件到画布上，却点不到组件是为什么？"
          ],
          [
            "p",
            "答：可能是图层被覆盖住了，可以通过右上角菜单面板的【排序】按钮重排顺序；"
          ]
        ]
      ],
      [
        "p",
        "接下来我们可以在物料面板的【图标】项添加 iconfont ，在【元件】面板添加富文本或其他内容，或调整组件颜色等方式美化完善我们的区块，这部分可根据自己需要进行，就不再演示了；"
      ],
      [
        "h3",
        "区块生成页面"
      ],
      [
        "p",
        "点击【预览】按钮，可以查看我们的区块在前端展示的效果，点击【截图并保存】保存我们的区块；"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1EaVkgxTpK1RjSZFMXXbG_VXa-1392-832.png"
          }
        ]
      ],
      [
        "p",
        "关闭搭建页面，回到 Iceworks ，在生成页面界面选择我们的自定义区块，就可以将你自己搭建的区块转换成代码；"
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://img.alicdn.com/tfs/TB1LINggsbpK1RjSZFyXXX_qFXa-982-712.png"
          }
        ]
      ],
      [
        "h1",
        "新特性-Table搭建"
      ],
      [
        "h2",
        "功能"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "画布Editor可以进行删除与加减行列的操作"
          ]
        ],
        [
          "li",
          [
            "p",
            "可以选中单元格进入单元格搭建模式，单元格中可以添加任意复杂组件"
          ]
        ],
        [
          "li",
          [
            "p",
            "支持对每行的单元格中的组件进行差异化的属性配置，满足多样化的设计需求"
          ]
        ]
      ],
      [
        "h2",
        "画布Editor"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1535011258743-26eb3a63-28f1-444d-9ed9-d94979020586.png",
            "alt": null
          }
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "选中Table后会在Table显示一个操作层Editor，按区域划分分成四个区域"
          ],
          [
            "ul",
            [
              "li",
              [
                "p",
                "表格选择区"
              ],
              [
                "ul",
                [
                  "li",
                  [
                    "p",
                    "选中该区域时属性面板上显示Table的属性面板，在对Table自身的属性进行配置之外，还可以对整体的行列进行加减操作。"
                  ]
                ]
              ]
            ]
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1535011810972-3ae6f7b3-6a48-41a0-8cdf-b1a74225bdf5.png",
            "alt": null
          }
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "列选择区"
          ],
          [
            "ul",
            [
              "li",
              [
                "p",
                "选中该区域时点击右边的箭头展示配置menu，可以进行加减列操作，同时属性面板显示列对应的属性面板"
              ]
            ]
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1535012640500-6d2901ed-7f75-4aa0-8b26-e75f1f45c864.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1535012708469-eb98f3b1-d25f-45ef-be9d-b928208f6306.png",
            "alt": null
          }
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "行选择区"
          ],
          [
            "ul",
            [
              "li",
              [
                "p",
                "选中该区域时点击下边的箭头展示配置menu，可以进行加减行操作，同时属性面板显示行对应的属性面板，可以调整行高"
              ]
            ]
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1535012803890-ef132ffe-8709-46b1-9ae1-03cfa3889f42.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1535012845910-a4a15c54-a51e-4143-9011-3a53e2ac4b40.png",
            "alt": null
          }
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "单元格选择区"
          ],
          [
            "ul",
            [
              "li",
              [
                "p",
                "点击单元格选择区，进入单元格编辑模式，弹出一个黑色透明蒙层，可以从组件面板中添加组件到单元格中，点击蒙层时退出单元格编辑模式"
              ]
            ]
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1535012976524-0fb88783-57bb-4bfa-80e1-991a842bef8b.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "注：单元格编辑模式中的一些联动说明"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "在单元格中对组件进行删除操作时，会将同一行其他所有其他单元格中相应组件删除"
          ]
        ],
        [
          "li",
          [
            "p",
            "进行移动操作时，会改变同行中其他单元格的位置"
          ]
        ],
        [
          "li",
          [
            "p",
            "只有改变组件属性时不会影响到其他单元格"
          ]
        ]
      ],
      [
        "h1",
        "新特性-List搭建"
      ],
      [
        "h2",
        "功能介绍"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "List即列表组件是一类可以将数组类型的数据以平铺的形式展示出来的组件，是一类高频使用的组件，例如淘宝搜索页的List"
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1538047963739-ab9cbdaf-7bbf-420f-9938-5def8965507b.png",
            "alt": null
          }
        ]
      ],
      [
        "h2",
        "交互"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "ICELAND提供的List搭建交互有以下特性："
          ],
          [
            "ul",
            [
              "li",
              [
                "p",
                "在一个列表项中的进行的大部分操作会在其他列表项中同步展示，包含新增、删除、移动、粘贴、resize、群组、排序、对齐、锁定等操作"
              ]
            ],
            [
              "li",
              [
                "p",
                "通过属性面板设置列表项中组件的属性时不会同步到其他列表项，这样允许用户对不同列表项作差异化的定制"
              ]
            ],
            [
              "li",
              [
                "p",
                "调整列表项的个数可通过属性面板加减，也可以通过选中某个列表项按delete键进行删除"
              ]
            ],
            [
              "li",
              [
                "p",
                "可通过属性面板调整一行展示的列表项个数"
              ]
            ]
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/184/1538049039613-3de9ff12-a86c-42c5-8afc-a87603044e4b.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "如果使用过程中遇到任何问题或者有对产品的建议，欢迎扫码加入答疑钉钉群向我们反馈："
      ],
      [
        "p",
        [
          "img",
          {
            "src": "https://ice.alicdn.com/assets/images/ice-group.png"
          }
        ]
      ]
    ]
  },
  {
    "filename": "advanced/node-project.md",
    "path": "advanced/node-project",
    "title": "Koa 项目",
    "order": 5,
    "category": "进阶指南",
    "participle": {
      "title": "Koa 项目",
      "content": "js server Koa client 服务端 项目 配置 com app png 接口 目录 端口 https img const tfs alicdn 客户端 示例 jsx 文件 调试 用户 启动 页面 前端 982 Node index 712. build API 路由 模板 添加 eslint profile path json Iceworks package require port 3000 axios router run npm 入口 用于 代码 提供 公共 生成 使用 服务 默认 信息 自定义 调用 命令 RESTful target serve response getUserProfile controller error ponents user type function project log li koa api new console onClick html http 管理 工程 简单 一键 请求 依赖 对应 静态 执行 步骤 资源 编写 发送 忽略 构建 进行 组织 框架 访问 查看 创建 修改 分离 布局 端口号 插件 配置文件 中间件 基本操作 风格 proxyConfig git webpackrc webpack gitignore HTML favicon use eslintrc true eslintignore title static start small 244. size editorconfig 最简 FoundationSymbol React dirname dev 1506 routerConfig CSS css README ORM config pages order node className 209 model middleware menuConfig category catch menu md makedown Koa2 listen 143. MVC 化来 layouts 勾选 2. JavaScript join Header WFXa item 4444 enable VXa ice UI 进阶 Ice 127.0.0.1 跨域 home2 表单 区块 冰海 应用 可视化 开发 操作 本节 控制台 数据通信 脚手架 环境 已经 分为 支持 映射 相关 结构 方式 基础 转发 服务器 组件 实现 并不需要 物料 保持一致 所示 具体内容 完全一致 分层 组装 共用 简介 架构 数据库 后端 点击 部分 列表 更改 解析 指南 放置 场景 导航 路径 终端 这部分 定义 代理 接下来 参考 输入 参数 完毕 输出 两条 模型 特性 即可 返回 通用 一套 包含 允许 一项 主体 常见 打开 效果 相应 快速 类型 事件 一个 介绍 设计 功能 处理 说明 注意 实际 以下 采用 选择 整个 能够 技术 最后 增加 之后 需要 包括 可能"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "开始使用"
      ],
      [
        "h3",
        "简介"
      ],
      [
        "p",
        "基于 Iceworks 能够一键生成 Ice 和 Node 的前后端分离的项目；前端使用 React 技术栈，后端使用 Koa 2.x 作为服务端开发框架。"
      ],
      [
        "h3",
        "特性"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "一键生成项目"
          ]
        ],
        [
          "li",
          [
            "p",
            "基于飞冰海量物料快速组装页面"
          ]
        ],
        [
          "li",
          [
            "p",
            "可视化工程管理"
          ]
        ]
      ],
      [
        "h3",
        "目录结构"
      ],
      [
        "p",
        "目录结构采用分层设计，主体分为 client 和 server 两部分，即 client 对应前端工程，server 对应服务端工程，提供 RESTful API 和 client 端进行数据通信；脚手架默认只提供最简的的 RESTful API 接口，因为在实际场景中，Node 层可能只是用来作为微服务架构中的 API 转发层，并不需要 ORM、数据库等功能。但可以通过插件化来进行支持，在创建项目的时候进行自定义选择生成项目的类型。"
      ],
      [
        "pre",
        {
          "lang": "makedown"
        },
        [
          "code",
          "project\n├── client\n│     ├── components       // 公共组件\n│     ├── layouts          // 通用布局\n│     ├── pages            // 页面\n│     ├── menuConfig.js    // 导航配置\n│     ├── routerConfig.js  // 路由配置\n│     ├── router.js        // 路由入口\n│     ├── index.html\n│     ├── favicon.png\n│     └── index.js         // 入口文件\n|\n├── server\n│     ├── config           // 配置文件\n│     ├── controller       // 用于解析用户的输入，处理后返回相应的结果\n│     ├── middleware       // 用于编写中间件\n│     ├── model            // 用于放置模型\n│     ├── router           // 用于路由文件\n│     └── app.js           // 入口文件\n|\n├── build                  // 构建后的前端静态资源\n│     ├── index.html\n│     ├── css\n│     └── js\n├── .gitignore             // git 忽略目录配置\n├── .editorconfig          // 代码风格配置\n├── .eslintignore          // eslint 忽略目录配置\n├── .eslintrc              // eslint 配置\n├── .webpackrc.js          // 自定义 webpack 配置\n├── package.json           // package.json\n└── README.md              // 项目说明"
        ]
      ],
      [
        "h3",
        "client"
      ],
      [
        "p",
        "client 用于组织前端工程资源，包括 HTML、CSS、JavaScript 等和 UI 相关的代码。"
      ],
      [
        "h3",
        "server"
      ],
      [
        "p",
        " server 用于组织服务端的相关的代码，即常见的 MVC 的组织方式。"
      ],
      [
        "h3",
        "build"
      ],
      [
        "p",
        "build 目录是 client 构建后的前端静态资源，Node 服务器启动的时候，该目录下的文件会映射至应用的根路径 / 下。"
      ],
      [
        "h3",
        "公共配置"
      ],
      [
        "p",
        "公共配置包含代码风格、eslint 等基础配置，在整个应用中，前后端共用一套公共的基础配置。"
      ],
      [
        "h2",
        "使用 Iceworks 管理项目"
      ],
      [
        "h3",
        "基本操作"
      ],
      [
        "p",
        "在模板页面创建项目的表单中,勾选 ",
        [
          "code",
          "添加 Koa2"
        ],
        " 即可生成对应模板的 Koa 项目"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1CY2NjNjaK1RjSZFAXXbdLFXa-982-712.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "使用 Iceworks 管理 Koa 项目的操作与前端项目完全一致，在项目页面支持添加页面、添加区块、依赖管理、布局管理、启动调试服务等操作。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1XMYDjNTpK1RjSZFMXXbG_VXa-982-712.png",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "启动调试"
      ],
      [
        "p",
        "在终端执行 ",
        [
          "code",
          "npm run start"
        ],
        " 命令启动 Koa 项目的调试服务，命令会分为 ",
        [
          "code",
          "npm run client"
        ],
        " 和 ",
        [
          "code",
          "npm run server"
        ],
        " 两部分执行，也可以分别执行这两条命令来启动调试。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1br6NjNjaK1RjSZFAXXbdLFXa-982-712.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "客户端的调试服务的默认端口是 ",
        [
          "code",
          "4444"
        ],
        "，服务端的默认端口是 ",
        [
          "code",
          "3000"
        ],
        "，客户端的启动端口可以通过 ",
        [
          "code",
          "ice dev --project-type=node --port=端口号"
        ],
        " 命令更改，服务端的启动端口可以在项目目录下的 ",
        [
          "code",
          "server/app.js"
        ],
        " 文件修改。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "const Koa = require('koa');\n\nconst app = new Koa();\nconst port = 3000;\n\napp.listen(port);"
        ]
      ],
      [
        "h2",
        "简单示例"
      ],
      [
        "p",
        "这部分将以一个简单的示例介绍如何开发一个基于 Koa 框架的前后端分离项目。"
      ],
      [
        "h3",
        "配置环境"
      ],
      [
        "p",
        "本节的环境配置步骤在项目模板中已经为我们配置完毕，如果需要对参数进行修改，可以参考以下步骤"
      ],
      [
        "p",
        "在 ",
        [
          "code",
          "package.json"
        ],
        " 中配置代理，允许客户端跨域访问服务端的 API 端口。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "\"proxyConfig\": {\n  \"/api\": {\n    \"enable\": true,\n    \"target\": \"http://127.0.0.1:3000\"\n  }\n}"
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "注意：此处 target 的端口应与你 server 调试服务启动的端口保持一致。"
        ]
      ],
      [
        "p",
        "在 ",
        [
          "code",
          "server/app.js"
        ],
        " 中配置访问客户端的入口文件"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "const serve = require('koa-static');\nconst path = require('path');\n\nconst app = new Koa();\n\napp.use(serve(path.join(__dirname, '..', 'build')));"
        ]
      ],
      [
        "h3",
        "添加依赖"
      ],
      [
        "p",
        "在项目中添加 axios 依赖，用来向服务端发送 http 请求。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1jovwjHvpK1RjSZPiXXbmwXXa-982-712.png",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "提供接口"
      ],
      [
        "p",
        "接下来让我们在服务端编写接口提供给客户端调用，Node 项目模板的 server 目录已经为我们提供了一些简单的接口示例，用户可以查看项目目录下的 ",
        [
          "code",
          "server/controller/user.js"
        ],
        " 文件查看这些示例接口的具体内容，在 ",
        [
          "code",
          "server/router.js"
        ],
        " 文件中定义接口的路由和请求方式."
      ],
      [
        "p",
        "我们使用已经写好的 ",
        [
          "code",
          "profile"
        ],
        " 接口，实现在控制台输出用户信息的简单示例。"
      ],
      [
        "h3",
        "调用接口"
      ],
      [
        "p",
        "之后我们只要在客户端调用这些提供好的接口就可以了，我们打开项目目录下的 ",
        [
          "code",
          "client/components/Header/index.js"
        ],
        " 文件，在用户的下拉列表中增加一项 ",
        [
          "code",
          "用户信息"
        ],
        "。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "<li\n\tclassName=\"user-profile-menu-item\"\n\tonClick={this.getUserProfile}\n>\n\t<FoundationSymbol type=\"home2\" size=\"small\" />\n\t用户信息\n</li>"
        ]
      ],
      [
        "p",
        "在用户信息的 ",
        [
          "code",
          "onClick"
        ],
        " 事件中，用 axios 向服务端发送 get 请求。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "getUserProfile = () => {\n  axios\n    .get('/api/profile')\n    .then(function (response) {\n      console.log(response);\n    })\n    .catch(function (error) {\n      console.log(error);\n    });\n};"
        ]
      ],
      [
        "p",
        "最后点击用户信息，实现的效果如下图所示。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1g8zQiwHqK1RjSZFkXXX.WFXa-209-244.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1fvrQipzqK1RjSZFoXXbfcXXa-1506-143.png",
            "alt": null
          }
        ]
      ]
    ]
  },
  {
    "filename": "advanced/use-theme.md",
    "path": "advanced/use-theme",
    "title": "配置项目主题",
    "order": 9,
    "category": "进阶指南",
    "participle": {
      "title": "主题 配置 项目",
      "content": "主题 theme 配置 json @icedesign ice package alifd 组件 com dev https npm ICE 区块 方式 项目 design install 变量 安装 满足 默认 注意 生效 蓝色 官方 依赖 自行 即可 对应 换肤 702. 包即 img 进阶 color 飞冰 html green buildConfig github 1768 @icedesign/base fusion bash wiki title f60 devDependencies tfs category 包仅 purple alicdn primary ponent themeConfig help png alibaba dependencies order orange 0. config 群里 两种 一键 重新 模板 需求 选择 支持 几套 文档 能力 橙色 这篇 设计师 需要 开发区 指南 紫色 样式 反馈 为准 不能 一堆 同学 参考 引入 绿色 颜色 专业 品牌 自由 方案 工程 里面 推荐 无法 最终 有效 几个 基础 提供 使用 之后 不同 一个"
    },
    "jsonml": [
      "article",
      [
        "blockquote",
        [
          "p",
          "该能力需要满足项目依赖的基础组件为 ",
          [
            "code",
            "@alifd/next"
          ],
          "，如果依赖的是 ",
          [
            "code",
            "@icedesign/base"
          ],
          " 请参考 ",
          [
            "a",
            {
              "title": null,
              "href": "https://github.com/alibaba/ice/wiki/0.x-theme"
            },
            "这篇文档"
          ]
        ]
      ],
      [
        "p",
        "飞冰（ICE）默认的主题是蓝色系，无法满足所有项目的需求，因此我们通过工程方式支持一键换肤的能力。有两种方式配置主题："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "配置主题包方式"
          ]
        ],
        [
          "li",
          [
            "p",
            "配置变量方式"
          ]
        ]
      ],
      [
        "p",
        [
          "strong",
          "注意两种方案不能同时使用，请按需选择其一。"
        ]
      ],
      [
        "h2",
        "配置主题包方式"
      ],
      [
        "h3",
        "选择主题包"
      ],
      [
        "p",
        "主题包即一个 npm 包，包里面对应的是一堆主题变量。ICE 官方提供了几套不同颜色的主题包，分别是："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "默认的蓝色主题：",
            [
              "code",
              "@icedesign/theme"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "橙色主题：",
            [
              "code",
              "@alifd/theme-ice-orange"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "绿色主题：",
            [
              "code",
              "@alifd/theme-ice-green"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "紫色主题：",
            [
              "code",
              "@alifd/theme-ice-purple"
            ]
          ]
        ]
      ],
      [
        "p",
        "如果这几个不能满足需求，可以在 ICE 群里反馈由官方来支持，也可以通过更自由的方式自行配置：",
        [
          "a",
          {
            "title": null,
            "href": "https://fusion.design/help.html#/design-config-component"
          },
          "配置组件主题样式"
        ],
        "。注意：如果需要自行配置主题，推荐让专业的设计师同学来做。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1y78lECzqK1RjSZPxXXc4tVXa-1768-702.png",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "安装主题包"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "# 项目/模板安装在 dependencies 里\nnpm install @icedesign/theme --save\n# 区块/组件安装在 devDependencies 里\nnpm install @icedesign/theme --save-dev"
        ]
      ],
      [
        "p",
        "注意区块/组件的主题包仅在开发区块/组件时有效，将区块引入到项目之后，最终以项目配置的主题包为准。"
      ],
      [
        "h3",
        "配置主题包"
      ],
      [
        "p",
        "在 ",
        [
          "code",
          "package.json"
        ],
        " 里配置对应主题包："
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "// package.json\n{\n  \"buildConfig\": {\n    \"theme\": \"@icedesign/theme\"\n  }\n}"
        ]
      ],
      [
        "p",
        "然后重新 dev 即可生效。"
      ],
      [
        "h2",
        "配置变量方式"
      ],
      [
        "p",
        "在 ",
        [
          "code",
          "package.json"
        ],
        " 里配置主品牌色："
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "// package.json\n{\n  \"themeConfig\": {\n    \"primary-color\": \"#f60\"\n  }\n}"
        ]
      ],
      [
        "p",
        "然后重新 dev 即可生效。"
      ]
    ]
  },
  {
    "filename": "advanced/webpackrc.md",
    "path": "advanced/webpackrc",
    "title": "ice-scripts 使用指南",
    "order": 1,
    "category": "进阶指南",
    "participle": {
      "title": "使用指南 ice scripts",
      "content": "js ice webpack 配置 https scripts 自定义 path index com module dev output resolve buildConfig type context src build 文件 webpackrc org return exports default import 使用 构建 支持 Modules entry alias publicPath web CSS polyfill const ponents users require babel E8 CustomTips plugins DefinePlugin css 默认 项目 入口 scss 3000 ASSETS api github bash VERSION configuration BD port public 语法 代理 参考 端口号 根目录 主题 project dirname Usage JSON dist analyzer Iceworks Enum docs options node modules ES6 json export AE javascript btn Button 飞冰 E5 assets host help hash 使用指南 alibaba GET res 84 BE inject POST styles Options Mock stringify runtime mock 0.0.1 debug dashboard OK reload package new 提供 开启 开发 目录 需要 代码 环境 修改 文档 省略 命令行 之外 样式 服务 需求 版本 属性 变量 方式 函数 官方 输出 指定 即可 主机名 后缀名 注入 插件 示例 版本号 启动 工具 命令 动态分析 全局变量 proxyConfig theme proxy console BA plugin config plain tools concepts pages B7 order color npm className cdn tips category 12 master bulidConfig log localization 90 Array E7 id iceworks PS html E6 size 1.1.0 hot 值为 green 会以 font favicon externals advanced API express wiki 进阶 example AF end true tree disabled title themeConfig use start diff 相对路径 server Object define run 段中 A0 Node req B5 px publicpath create copy 开发工具 字段 快速 类型 本地化 运行 多页 功能 开发者 资源 是否 以下 端口 几乎 内置 能力 导入 分析 出错 操作系统 别名 编译 调试 模块 导出 指南 定制 反馈 全局 存放 刷新 实时 讲述 当做 友好 问题 如有 替换 切换 路径 仓库 压缩 生效 本文 进行 关闭 有用 约定 引用 冲突 团队 负担 新建 外部 参数 创建 自行 评估 效率 覆盖 扩展 提示 安装 确保 规则 关心 自动 完整 包含 常用 详细 改为 设置 常见 方便 维护 大多数 新增 模式 帮助 变得 应用 保证 简单 当前 推荐 正常 丰富 行为 说明 解决 有效 用于 改变 希望 采用 长期 发布 带来 非常 直接 完全 提高 过程 不同 情况 不能 这种 现在 出现 可能 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "飞冰项目默认使用 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/tree/master/tools/ice-scripts"
          },
          "ice-scripts"
        ],
        " 作为开发工具，ice-scripts 提供了丰富的功能帮助我们提高开发效率："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "命令行工具"
          ]
        ],
        [
          "li",
          [
            "p",
            "主题配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "代理配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "自定义 webpack 配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "Mock"
          ]
        ],
        [
          "li",
          [
            "p",
            "……"
          ]
        ]
      ],
      [
        "p",
        "本文会讲述 ice-scripts 完整的使用指南。PS: 请保证 ice-scripts 版本为 1.1.0 及以上。"
      ],
      [
        "h2",
        "命令行工具"
      ],
      [
        "p",
        "ice-scripts 提供了 ",
        [
          "code",
          "dev/build"
        ],
        " 的开发命令，如果使用 Iceworks 开发，那么大多数时候你不需要关心这些命令。"
      ],
      [
        "h3",
        "ice dev"
      ],
      [
        "p",
        "启动调试服务"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ ice dev --help\n\nUsage: ice-dev [options]\n\nOptions:\n  -p, --port <port>      服务端口号\n  -h, --host <host>      服务主机名\n  --https                开启 https\n  --analyzer             开启构建分析\n  --analyzer-port        设置分析端口号\n  --disabled-reload      关闭 hot reload\n  --project-type <type>  项目类型, node|web (default: \"web\")\n  --inject-babel <type>  注入 babel 运行环境, Enum: polyfill|runtime (default: \"polyfill\")"
        ]
      ],
      [
        "p",
        "比如使用 3000 端口启动 dev server"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ ice dev -p=3000\n# 或者\n$ npm run start -- -p=3000"
        ]
      ],
      [
        "p",
        "比如开启 https"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ ice dev --https"
        ]
      ],
      [
        "h3",
        "ice build"
      ],
      [
        "p",
        "构建代码"
      ],
      [
        "pre",
        {
          "lang": "plain"
        },
        [
          "code",
          "$ ice build --help\n\nUsage: ice-build [options]\n\nOptions:\n  --debug                debug 模式下不压缩\n  --hash                 构建后的资源带 hash 版本\n  --project-type <type>  项目类型, node|web (default: \"web\")\n  --inject-babel <type>  注入 babel 运行环境, Enum: polyfill|runtime (default: \"polyfill\")"
        ]
      ],
      [
        "h2",
        "构建配置 - buildConfig"
      ],
      [
        "p",
        "除了提供主题配置和代理配置之外， ice-scripts 还提供了一些常用的构建配置项，方便开发者快速自定义配置，在 package.json 中新增 bulidConfig 字段，包含以下配置项："
      ],
      [
        "h4",
        "配置项"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// 配置项遵循 webpack 的配置规则：https://webpack.js.org/configuration/\n\"buildConfig\": {\n   \"entry\": \"\",             // 指定入口文件\n   \"output\": {},            // 指定输出配置项\n   \"externals\": \"\",         // 外部扩展配置\n   \"localization\": true     // 资源是否本地化\n}"
        ]
      ],
      [
        "h4",
        "配置示例"
      ],
      [
        "p",
        "如自定义 entry 的配置，默认会以 ",
        [
          "code",
          "src/index.js"
        ],
        " 文件作为入口文件，配置在项目的 package.json 的 ",
        [
          "code",
          "buildConfig"
        ],
        " 字段中；如果你需要改变默认的入口文件，可以自行修改即可生效。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "\"buildConfig\": {\n  \"entry\": \"src/index.js\"\n}"
        ]
      ],
      [
        "p",
        "如果你的项目是多页应用，希望把 ",
        [
          "code",
          "src/pages"
        ],
        " 的文件作为入口，那么可以这样配置："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "\"buildConfig\": {\n  \"entry\": [\n     \"dashboard\": 'src/dashboard/index.js',\n     \"about\": 'src/about/index.js'\n  ]\n}"
        ]
      ],
      [
        "h2",
        "自定义配置 - .webpackrc.js"
      ],
      [
        "p",
        "ice-scripts 除了提供 buildConfig 用于快速的配置入口之外，也支持自定义配置需求，几乎可完全自定义 webpack 的所有配置项；在项目根目录新建 ",
        [
          "code",
          ".webpackrc.js"
        ],
        " 文件对默认配置进行定制和覆盖。",
        [
          "code",
          ".webpackrc.js"
        ],
        " 文件需要导出一个函数，其支持的参数可以参考 ",
        [
          "code",
          "webpack"
        ],
        " ",
        [
          "a",
          {
            "title": null,
            "href": "https://webpack.js.org/concepts/output/"
          },
          "官方文档"
        ],
        "。"
      ],
      [
        "p",
        [
          "strong",
          "正常情况下，我们不推荐使用 ",
          [
            "code",
            ".webpackrc.js"
          ],
          " 的方式自定义配置，因为这可能给项目的长期维护带来负担。"
        ],
        "如有需求可以先反馈给飞冰团队评估是否可以直接内置到 ice-scripts 或者通过 buildConfig 的方式支持。"
      ],
      [
        "p",
        [
          "code",
          ".webpackrc.js"
        ],
        " 文件采用操作系统中安装的 Node.js 所支持的语法，所以可以使用除了 ",
        [
          "code",
          "import"
        ],
        ", ",
        [
          "code",
          "export"
        ],
        " 等之外的几乎所有 ES6 语法。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "module.exports = (context) => {\n  const { webpack } = context;\n\n  // webpack config\n  return {\n    plugins: [\n      new webpack.DefinePlugin({\n        ASSETS_VERSION: '0.0.1',\n      }),\n    ],\n  };\n};"
        ]
      ],
      [
        "p",
        "以下为一些常见的自定义需求："
      ],
      [
        "h3",
        "修改编译的路径为 dist"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "const path = require('path');\n\nmodule.exports = (context) => {\n  return {\n    output: {\n      path: path.resolve('dist'),\n    },\n  };\n};"
        ]
      ],
      [
        "h3",
        "修改 publicPath"
      ],
      [
        "p",
        "配置 webpack 的 ",
        [
          "a",
          {
            "title": null,
            "href": "https://webpack.js.org/configuration/output/#output-publicpath"
          },
          "output.publicPath"
        ],
        " 属性。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "module.exports = (context) => {\n  return {\n    output: {\n      path: path.resolve(__dirname, 'public/assets'),\n      publicPath: 'https://cdn.example.com/assets/',\n    },\n  };\n};"
        ]
      ],
      [
        "p",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/wiki/%E8%AE%BE%E7%BD%AE%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E8%B7%AF%E5%BE%84-publicPath"
          },
          "详细说明"
        ]
      ],
      [
        "h3",
        "使用 DefinePlugin"
      ],
      [
        "p",
        [
          "a",
          {
            "title": null,
            "href": "https://webpack.js.org/plugins/define-plugin/"
          },
          "官方文档"
        ]
      ],
      [
        "p",
        "通过 webpack 的 DefinePlugin 可以配置全局的变量，针对开发环境和发布环境的构建配置不同的行为非常有用。"
      ],
      [
        "p",
        "比如需要在代码里使用当前仓库的版本号："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "module.exports = (context) => {\n  const { webpack } = context;\n  return {\n    plugins: [\n      new webpack.DefinePlugin({\n        // 此处不能省略 \bJSON.stringify，否则构建过程会出现语法问题\n        ASSETS_VERSION: JSON.stringify('0.0.1'),\n      }),\n    ],\n  };\n};"
        ]
      ],
      [
        "p",
        "在代码里使用该变量（当做全局变量使用）："
      ],
      [
        "pre",
        {
          "lang": "javascript"
        },
        [
          "code",
          "console.log(ASSETS_VERSION);"
        ]
      ],
      [
        "h3",
        "alias"
      ],
      [
        "p",
        "配置 webpack 的 ",
        [
          "a",
          {
            "title": null,
            "href": "https://webpack.js.org/configuration/resolve/#resolve-alias"
          },
          "resolve.alias"
        ],
        " 属性，创建 import 或 require 的别名，来确保模块的引用变得更简单"
      ],
      [
        "pre",
        {
          "lang": "javascript"
        },
        [
          "code",
          "const path = require('path');\n\nmodule.exports = () => {\n  return {\n    //...\n    resolve: {\n      alias: {\n        '@components': path.resolve(__dirname, 'src/components/'),\n      },\n    },\n  };\n}"
        ]
      ],
      [
        "p",
        "现在，替换「在导入时使用相对路径」这种方式，就像这样："
      ],
      [
        "pre",
        {
          "lang": "diff"
        },
        [
          "code",
          "-import CustomTips from '../../../components/CustomTips';\n+import CustomTips from '@components/CustomTips';"
        ]
      ],
      [
        "h3",
        "Mock"
      ],
      [
        "p",
        "ice-scripts 支持 mock 功能，在项目根目录的 ",
        [
          "code",
          "mock/index.js"
        ],
        " 中进行配置，支持基于 require 动态分析的实时刷新，支持 ES6 语法，以及友好的出错提示："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "export default {\n  // 支持值为 Object 和 Array\n  'GET /api/users': { users: [1, 2] },\n\n  // GET POST 可省略\n  '/api/users/1': { id: 1 },\n\n  // 支持自定义函数，API 参考 express@4\n  'POST /api/users/create': (req, res) => {\n    res.end('OK');\n  },\n};"
        ]
      ],
      [
        "h2",
        "使用 public 目录"
      ],
      [
        "p",
        "我们约定 public 目录下的文件会在 dev 和 build 时被自动 copy 到输出目录（默认是 ./build）下。所以可以在这里存放\nfavicon, index.html 等。"
      ],
      [
        "h2",
        "CSS Modules"
      ],
      [
        "p",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/css-modules/css-modules"
          },
          "CSS Modules"
        ],
        " 可以有效解决样式的冲突等问题，ice-scripts 支持 CSS Modules 能力。只需要将样式文件的后缀名改为 ",
        [
          "code",
          ".module.[css/scss/less]"
        ],
        "，即可使用 CSS Modules 的能力："
      ],
      [
        "pre",
        {
          "lang": "css"
        },
        [
          "code",
          "/* index.module.scss */\n.btn {\n  color: green;\n}\n\n.tips {\n  font-size: 12px;\n}"
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// index.js\nimport styles from './index.module.scss';\n\n<Button className={styles.btn}>OK</Button>"
        ]
      ],
      [
        "h2",
        "主题配置 - themeConfig"
      ],
      [
        "p",
        "参考 ",
        [
          "a",
          {
            "title": null,
            "href": "#/docs/advanced/use-theme"
          },
          "切换项目主题"
        ]
      ],
      [
        "h2",
        "代理配置 - proxyConfig"
      ],
      [
        "p",
        "参考 ",
        [
          "a",
          {
            "title": null,
            "href": "#/docs/iceworks/plugins-proxy"
          },
          "Iceworks 插件-代理配置"
        ]
      ]
    ]
  },
  {
    "filename": "advanced/work-with-create-react-app.md",
    "path": "advanced/work-with-create-react-app",
    "title": "在 create-react-app 中使用飞冰组件",
    "order": 8,
    "category": "进阶指南",
    "participle": {
      "title": "飞冰 app react create 组件 使用",
      "content": "app react 组件 config js import create loader 引入 App Button sass test rewired 模板 rule const alifd @icedesign Iceworks npm scss 区块 样式 img styleLoaderRule plugin css 项目 自定义 使用 https ice module index webpack 创建 添加 ICE babel com return require lib bash env overrides src 文档 基础 配置 dev function npx rules rewireSass 全量 json Img skin libraryName 飞冰 exports push 需要 修改 加载 目录 默认 pages override files node alicdn github oneOf theme tfs rewire start png scripts 文件 页面 官方 安装 自动 根目录 支持 插件 div package options add WebpackPluginImport build Component injectBabelPlugin file install button Worker includes findStyleLoaderRuleFn jsx use type logo svg style resolve findFileLoaderRuleFn sassOptions docs getRules currentTests registerServ primary 浏览器 脚本 业务 初始化 处理器 进行 调试 界面 工程 定制 开发 用于 流程 路径 结构 代码 接下来 参考 新建 提供 实现 依赖 生成 原理 开发方式 打开 命令 问题 预览 pre single plugins dirname path diff order design defined TabTable 218 non 1064. default new modules current md manifest localhost loading Array loaded keys CSS Sass className 1908 jsdom class join javascript React cd 以该 isArray category io 1768 gitignore README PS 58. work variables ico typeof base title timarney themeFile adding Object http themeConfig html text array stylesheet string 进阶 1. allows favicon ruleset facebook extends advanced 0. 1368. render export regexes excluding regex exclude 3000 ant public 5.2 字段 本篇 以下内容 内容 方法 看到 自带 无缝 物料 保持一致 模块 打包 缺失 指南 一个 手动 存放 讲述 现在 某一 额外 选用 地址 社区 本文 蓝色 构建 参见 任意 可能 窗口 尝试 分开 辅助 麻烦 自行 单独 优化 对应 文章 熟悉 皮肤 流行 二级 下面 启动 工具 新增 不用 相同 类似 上面 满足 意味着 每个 应用 运行 担心 执行 正常 操作 说明 服务 上述 解决 成功 建议 以下 需求 选择 能力 能够 直接 相关 觉得 几个 方式 基本 应该 增加 存在 发现 不同 继续 情况 不能 这种 已经 没有"
    },
    "jsonml": [
      "article",
      [
        "p",
        "Iceworks 默认提供了基于 ",
        [
          "code",
          "create-react-app"
        ],
        " 的模板，该模板可以无缝使用飞冰组件、区块、模板等能力，",
        [
          "a",
          {
            "title": null,
            "href": "#docs/advanced/work-with-create-react-app"
          },
          "参见文档"
        ],
        "。"
      ],
      [
        "p",
        "如果上述模板不能满足你的需求，请参考本篇文章，本文讲述如何在使用 create-react-app 创建的项目中使用飞冰相关的物料。PS: 其他工程工具或自行配置 webpack 原理相同。"
      ],
      [
        "h2",
        "初始化项目"
      ],
      [
        "p",
        "使用 ",
        [
          "code",
          "npx"
        ],
        " 命令执行 ",
        [
          "code",
          "create-react-app"
        ],
        " 创建一个项目："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "npx create-react-app my-app\ncd my-app\nnpm start"
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "npx 命令在 npm 5.2+ 自带，如果没有 npx 您可能需要按照官方文档操作"
        ]
      ],
      [
        "p",
        "此时浏览器会打开本地调试地址 ",
        [
          "a",
          {
            "title": null,
            "href": "http://localhost:3000/"
          },
          "http://localhost:3000/"
        ],
        " 。"
      ],
      [
        "h2",
        "引入组件"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "# 根据组件文档，安装对应的组件。\nnpm install @alifd/next @icedesign/img --save\n\n# create-react-app 支持 sass https://facebook.github.io/create-react-app/docs/adding-a-sass-stylesheet\ntnpm install node-sass --save-dev"
        ]
      ],
      [
        "p",
        "修改 ",
        [
          "code",
          "src/App.js"
        ],
        "，引入 ",
        [
          "code",
          "Button"
        ],
        " 和 ",
        [
          "code",
          "Img"
        ],
        " 组件。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "import React, { Component } from 'react';\n// 全量引入基础组件样式\nimport '@alifd/next/index.scss';\n// 引入基础组件脚本，无工程辅助情况下 import { Button } from '@alifd/next'; 会引入所有 js\nimport Button from '@alifd/next/lib/button';\n// 引入业务组件脚本\nimport Img from '@icedesign/img';\n// 引入业务组件样式\nimport '@icedesign/img/lib/style.js';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Button type=\"primary\">Button</Button>\n        <Img src=\"https://img.alicdn.com/tfs/TB1saOBbYGYBuNjy0FoXXciBFXa-218-58.png' />\n      </div>\n    );\n  }\n}\n\nexport default App;"
        ]
      ],
      [
        "p",
        "现在你应该能看到页面上已经有了蓝色的 ",
        [
          "code",
          "Button"
        ],
        " 组件，接下来就可以继续选用其他组件开发应用了。"
      ],
      [
        "p",
        "其他开发流程你可以参考 ",
        [
          "code",
          "create-react-app"
        ],
        " 的官方文档。"
      ],
      [
        "p",
        "这种方式引入的基础组件样式为全量引入，如果需要按需引入请看下面文档。"
      ],
      [
        "h2",
        "优化组件引入"
      ],
      [
        "p",
        "上面的方法虽然能够正常运行组件，但是可以发现几个问题："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "基础组件的样式需要全量引入的"
          ]
        ],
        [
          "li",
          [
            "p",
            "引入基础组件需要额外增加 ",
            [
              "code",
              "lib/button"
            ],
            " 的二级路径并且每个组件都需要单独 import"
          ]
        ],
        [
          "li",
          [
            "p",
            "业务组件需要分开引入脚本和样式"
          ]
        ]
      ],
      [
        "p",
        "要解决这些问题，我们需要对 ",
        [
          "code",
          "create-react-app"
        ],
        " 进行一些工程定制。我们建议使用社区流行的 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/timarney/react-app-rewired"
          },
          "react-app-rewired"
        ],
        " 进行自定义配置。"
      ],
      [
        "p",
        "首先安装 ",
        [
          "code",
          "react-app-rewired"
        ]
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "npm i react-app-rewired --save-dev"
        ]
      ],
      [
        "p",
        "修改 ",
        [
          "code",
          "package.json"
        ],
        " 文件的 ",
        [
          "code",
          "scripts"
        ],
        " 字段"
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "{\n  \"scripts\": {\n    \"start\": \"react-app-rewired start\",\n    \"build\": \"react-app-rewired build\",\n    \"test\": \"react-app-rewired test --env=jsdom\"\n  }\n}"
        ]
      ],
      [
        "p",
        "在您的项目根目录创建 ",
        [
          "code",
          "config-overrides.js"
        ],
        " 文件来修改默认配置。"
      ],
      [
        "h3",
        "使用 babel-plugin-import 实现基础组件的按需加载"
      ],
      [
        "p",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/ant-design/babel-plugin-import"
          },
          "babel-plugin-import"
        ],
        " 是一个用于按需加载组件代码和样式的 babel 插件，现在我们尝试安装它并修改 ",
        [
          "code",
          "config-overrides.js"
        ],
        " 文件。"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "npm i babel-plugin-import --save-dev"
        ]
      ],
      [
        "pre",
        {
          "lang": "diff"
        },
        [
          "code",
          "+ const { injectBabelPlugin } = require('react-app-rewired');\n\n  module.exports = function override(config, env) {\n+   config = injectBabelPlugin(['import', {\n+     libraryName: '@alifd/next'\n+   }], config);\n    return config;\n  };"
        ]
      ],
      [
        "p",
        "这样我们只需要在代码里 ",
        [
          "code",
          "import { Button } from '@alifd/next';"
        ],
        " 就可以实现按需打包构建了。"
      ],
      [
        "h3",
        "使用 webpack-plugin-import 实现样式自动引入"
      ],
      [
        "p",
        [
          "code",
          "webpack-plugin-import"
        ],
        " 是用于自动加载样式的 webpack 插件，它的原理是对引入模块路径下存在 ",
        [
          "code",
          "style.js"
        ],
        " 的样式进行自动加载，这意味着你可能需要同时配置 ",
        [
          "code",
          "less"
        ],
        " 或 ",
        [
          "code",
          "sass"
        ],
        " 等预处理器的 ",
        [
          "code",
          "loader"
        ],
        "。"
      ],
      [
        "p",
        "修改 ",
        [
          "code",
          "config-overrides.js"
        ],
        " 的内容"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// ...\nconst WebpackPluginImport = require('webpack-plugin-import');\n\nmodule.exports = function override(config, env) {\n  // ...\n  config.plugins.push(\n    new WebpackPluginImport([\n      {\n        // 基础组件 0.x\n        libraryName: /^@icedesign\\/base\\/lib\\/([^/]+)/\n      },\n      {\n        // 基础组件 1.x\n        libraryName: /^@alifd\\/next\\/lib\\/([^/]+)/\n      },\n      {\n        // ICE 业务组件\n        libraryName: /@icedesign\\/.*/\n      },\n    ])\n  );\n  // ...\n  return config;\n};"
        ]
      ],
      [
        "h3",
        "配置 sass-loader 和 ice-skin-loader"
      ],
      [
        "p",
        [
          "code",
          "ICE"
        ],
        " 官方提供的组件依赖了 Sass 作为 CSS 预处理器，所以您需要手动配置并引入 ",
        [
          "code",
          "sass-loader"
        ],
        "。同时 ",
        [
          "code",
          "ICE"
        ],
        " 使用了 ",
        [
          "code",
          "ice-skin-loader"
        ],
        " 支持自定义皮肤的定制。首先安装以下依赖："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "npm i @icedesign/theme --save\nnpm i sass-loader node-sass ice-skin-loader --save-dev"
        ]
      ],
      [
        "p",
        "在根目录创建 ",
        [
          "code",
          "rewire-scss.js"
        ],
        " 文件，添加以下内容。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "const getRules = (config) =>\n  config.module.rules.find((rule) => Object.keys(rule).includes('oneOf')).oneOf;\nconst findFileLoaderRuleFn = (rule) =>\n  typeof rule.loader === 'string' && rule.loader.includes('file-loader');\nconst findStyleLoaderRuleFn = (rule) =>\n  rule.test.toString() === /\\.css$/.toString();\n\nfunction rewireSass(config, env, sassOptions = {}) {\n  // find the non-javascript ruleset in the webpack config\n  const rules = getRules(config);\n\n  // find the file-loader and add a rule excluding sass files from being loaded as text\n  config.module.rules[1].oneOf\n    .find(findFileLoaderRuleFn)\n    .exclude.push(/\\.scss$/);\n\n  // find the current rule for loading css files\n  const styleLoaderRule = rules.find(findStyleLoaderRuleFn);\n\n  // allows the test to be pre-defined by react-scripts as an array or a single regex\n  const currentTests = Array.isArray(styleLoaderRule.test)\n    ? [...styleLoaderRule.test]\n    : [styleLoaderRule.test];\n\n  // add regexes for scss files\n  styleLoaderRule.test = [...currentTests, /\\.scss$/, /\\.sass$/];\n\n  styleLoaderRule.use.push({\n    loader: require.resolve('sass-loader'),\n    options: sassOptions,\n  });\n  styleLoaderRule.use.push({\n    loader: require.resolve('ice-skin-loader'),\n    options: {\n      themeFile: theme && path.join(__dirname, 'node_modules/@icedesign/theme/variables.scss'),\n      themeConfig: {},\n    },\n  });\n\n  return config;\n}\n\nmodule.exports = rewireSass;"
        ]
      ],
      [
        "p",
        "修改 ",
        [
          "code",
          "config-overrides.js"
        ],
        " 的内容"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// ...\nconst rewireSass = require('./rewire-scss');\n\nmodule.exports = function override(config, env) {\n  // ...\n  config = rewireSass(config);\n  // ...\n  return config;\n};"
        ]
      ],
      [
        "h3",
        "使用组件"
      ],
      [
        "p",
        "在项目的任意 ",
        [
          "code",
          "js"
        ],
        " 文件中，您都可以使用类似如下的方法直接按需引入某一组件，不用担心全量引入和样式缺失的问题。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "import { Button } from '@alifd/next';\nimport Img from '@icedesign/img';\n\n<Button type=\"primary\">ICE</Button>;"
        ]
      ],
      [
        "h1",
        "如何通过 Iceworks 生成 create-react-app 项目"
      ],
      [
        "p",
        "如果你觉得使用 create-react-app 自定义太麻烦，我们也提供了基于 Iceworks 模板创建项目的流程生成 create-react-app 项目，使用 react-app-rewired 进行自定义配置，支持按需引入飞冰基础组件，添加区块。"
      ],
      [
        "h2",
        "初始化项目"
      ],
      [
        "p",
        "在 Iceworks 模板界面选择 create-react-app 模板，以该模板创建项目"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1GTwcm7yWBuNjy0FpXXassXXa-1908-1368.png",
            "alt": "Iceworks"
          }
        ]
      ],
      [
        "h2",
        "预览"
      ],
      [
        "p",
        "创建项目后，可以在 Iceworks 项目界面启动调试服务, 会自动打开浏览器窗口，看到如下页面说明创建项目成功"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1u1gxm1uSBuNjy1XcXXcYjFXa-1768-1064.png",
            "alt": "create-react-app"
          }
        ]
      ],
      [
        "h2",
        "添加区块"
      ],
      [
        "p",
        "使用 Iceworks create-react-app 模板创建的项目与官方 create-react-app 模板基本保持一致，不同的点在于使用了 react-app-rewired 进行自定义配置，支持按需引入 ICE 基础组件，目录结构如下："
      ],
      [
        "h3",
        "目录结构"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n├── README.md\n├── .gitignore\n├── config-overrides.js\n├── package.json\n├── public\n│   ├── favicon.ico\n│   ├── index.html\n│   └── manifest.json\n├── rewire-scss.js\n└── src\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    └── registerServiceWorker.js"
        ]
      ],
      [
        "h3",
        "添加区块"
      ],
      [
        "p",
        "通过 Iceworks 新建页面添加的区块默认会在项目 ",
        [
          "code",
          "src"
        ],
        " 下新建 ",
        [
          "code",
          "pages"
        ],
        " 目录，用于存放添加的区块，如添加一个 TabTable 区块后，目录结构如下："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n└── src\n    ├── pages/     // 新增 pages 目录\n    ├── App.css\n    ├── App.js\n    ├── App.test.js\n    ├── index.css\n    ├── index.js\n    ├── logo.svg\n    └── registerServiceWorker.js"
        ]
      ],
      [
        "p",
        "使用 create-react-app 模板创建的项目默认只支持添加区块；接下来，可以按照你熟悉的开发方式自定义开发。"
      ]
    ]
  },
  {
    "filename": "basis/api-communicate.md",
    "path": "basis/api-communicate",
    "title": "如何实现前后端通信",
    "order": 9,
    "category": "入门指引",
    "participle": {
      "title": "通信 实现",
      "content": "axios com data example foo http DataBinder 同源 html www list dir 组件 数据 端口 使用 域名 请求 account method setState 绑定 参数 不同 接口 获取数据 相同 page div response render jsx class json extends const js 跨域 github API body xxxx https AJAX Component post 浏览器 文档 返回 通信 模块 默认 参考 自动更新 错误处理 最佳 实践 未取 数据格式 协议 userName userAge url ICE title return 81 dir2 UI remoteURL props defaultBindingData default ponent params Table databinder order Ajax npm ListView key category install import JSON export 为空 HTTP request bindingData ponentDidMount bash 80 v2 字段 异步 嵌套 推荐 安全 用户名 举例来说 开发成本 一一对应 导致 方法 省略 页面 窃取 实现 附带 入门 政策 屏蔽 详见 基石 后端 渲染 需要 用法 网址 恶意 指引 传输 查询 前端 一般来说 阻挡 专注 地址 先行 进行 约定 引入 函数 逻辑 用户 对应 安装 描述 继承 网站 年龄 错误 方便 下面 防止 异常 对象 方案 所谓 限制 判断 推出 保证 状态 目的 注意 信息 三个 以下 能力 完全 基础 提供 管理 显示 部分 情况 这种 问题 可能 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "实现前后端通信，我们推荐使用 axios 或 DataBinder 与后端 HTTP API 接口通信的方案。"
      ],
      [
        "p",
        "传输数据格式描述使用 JSON。"
      ],
      [
        "h2",
        "使用 axios 进行请求"
      ],
      [
        "p",
        "我们推荐使用 ",
        [
          "code",
          "axios"
        ],
        " 方法库提供基础的 Ajax 能力，也可以使用 DataBinder 为组件（比如 Table）绑定 AJAX 接口数据，方便查询异步数据以及错误处理。"
      ],
      [
        "p",
        "首先安装模块："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "npm install axios --save"
        ]
      ],
      [
        "p",
        "引入对应组件，并使用 ",
        [
          "code",
          "axios"
        ],
        " 函数获取数据："
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "import axios from 'axios';\n\nexport default class extends Component {\n  componentDidMount() {\n    // 使用 axios 获取数据\n    axios(remoteURL).then((response) => {\n      const { body } = response;\n      this.setState({\n        data: body,\n      });\n    });\n  }\n\n  render() {\n    // ...\n  }\n}"
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "更多请参考 ",
          [
            "a",
            {
              "title": null,
              "href": "https://github.com/axios/axios"
            },
            "axios 的文档"
          ]
        ]
      ],
      [
        "h2",
        "使用 DataBinder 为组件绑定数据"
      ],
      [
        "p",
        "DataBinder 是 ICE 推出的基于约定，在组件上绑定数据和自动更新数据的组件，让你专注于 UI 显示逻辑，从而屏蔽数据状态管理的开发成本。"
      ],
      [
        "p",
        [
          "strong",
          "使用方法"
        ]
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "@DataBinder({\n  '模块名 key': {\n    url: 'xxxx.json',\n    method: 'post',\n    // 请求附带的 request 参数，method post 下是 data 参数，method get 下是 params\n    data: {\n      page: 1,\n    },\n    // AJAX 部分的参数完全继承自 axios ，参数请详见：https://github.com/axios/axios\n    // 下面是请求会返回的默认数据\n    defaultBindingData: {\n      // ...字段需要与 xxxx.json 接口返回的字段一一对应\n    },\n  },\n})\nclass ListView extends Component {\n  // ...\n  render() {\n    const { account } = this.props.bindingData;\n\n    return (\n      <div>\n        <p>用户名：{account.userName}</p>\n        <p>年龄：{account.userAge}</p>\n      </div>\n    );\n  }\n}"
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "更多请参考 ",
          [
            "a",
            {
              "title": null,
              "href": "#/component/databinder"
            },
            "DataBinder 的文档"
          ]
        ]
      ],
      [
        "h2",
        "最佳实践"
      ],
      [
        "p",
        "对于一些嵌套较深的对象数据，如果后端返回为空，就可能导致渲染异常，所以需要进行先行判断："
      ],
      [
        "p",
        [
          "strong",
          "注意：以下是错误的用法"
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "this.setState({\n  foo: data.list.foo,\n});"
        ]
      ],
      [
        "p",
        [
          "strong",
          "最佳实践"
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "if (data && data.list && data.list.foo) {\n  this.setState({\n    foo: data.list.foo,\n  });\n} else {\n  // foo 未取到\n}"
        ]
      ],
      [
        "h2",
        "同源限制导致的跨域问题"
      ],
      [
        "p",
        "浏览器安全的基石是\"同源政策\"，所谓\"同源\"指的是\"三个相同\"。"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "协议相同"
          ]
        ],
        [
          "li",
          [
            "p",
            "域名相同"
          ]
        ],
        [
          "li",
          [
            "p",
            "端口相同"
          ]
        ]
      ],
      [
        "p",
        "举例来说，",
        [
          "code",
          "http://www.example.com/dir/page.html"
        ],
        "这个网址，协议是",
        [
          "code",
          "http://"
        ],
        "，域名是",
        [
          "code",
          "www.example.com"
        ],
        "，端口是",
        [
          "code",
          "80"
        ],
        "（默认端口可以省略）。它的同源情况如下。"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "code",
              "http://www.example.com/dir2/other.html"
            ],
            "：同源"
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "code",
              "http://example.com/dir/other.html"
            ],
            "：不同源（域名不同）"
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "code",
              "http://v2.www.example.com/dir/other.html"
            ],
            "：不同源（域名不同）"
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "code",
              "http://www.example.com:81/dir/other.html"
            ],
            "：不同源（端口不同）"
          ]
        ]
      ],
      [
        "p",
        "同源政策的目的，是为了保证用户信息的安全，防止恶意的网站窃取数据。"
      ],
      [
        "p",
        "跨域指的是前端页面请求一个非同源的 API 地址，这种请求一般来说会被浏览器阻挡。"
      ]
    ]
  },
  {
    "filename": "basis/env-config.md",
    "path": "basis/env-config",
    "title": "开发环境配置",
    "order": 1,
    "category": "入门指引",
    "participle": {
      "title": "配置 开发 环境",
      "content": "Node js nvm 安装 版本 LTS https 终端 com bash 执行 creationix npm nodejs Windows install github 环境 用户 安装包 版本号 维护 命令 title sh githubusercontent schedule v0 release raw curl org Git order category Bash 官网 node macOS 飞冰 lts Release 33.8 模拟器 建议您 开发 成功 文档 入门 打印 指引 重启 标记 依赖于 验证 忽略 访问 下载 参考 官方 对应 期限 平台 符合 打开 最新 配置 长期 完成 持续 看到 管理 使用 表示 已经"
    },
    "jsonml": [
      "article",
      [
        "p",
        "飞冰的开发环境依赖于 Node.js，如您已经安装了 Node.js 且版本号符合 ",
        "*",
        "LTS 版本，则可以忽略此文档。"
      ],
      [
        "h3",
        "安装 Node.js 环境"
      ],
      [
        "h4",
        "macOS 用户"
      ],
      [
        "p",
        "我们建议您使用 ",
        "*",
        "nvm 来管理 Node.js 的安装。"
      ],
      [
        "p",
        "打开终端，执行如下命令"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.8/install.sh | bash"
        ]
      ],
      [
        "p",
        "完成后重启终端，执行 ",
        [
          "code",
          "nvm install --lts"
        ],
        " 来安装最新 LTS 版本的 Node.js"
      ],
      [
        "h4",
        "Windows 用户"
      ],
      [
        "p",
        "访问 Node.js 的官网 ",
        [
          "a",
          {
            "title": null,
            "href": "https://nodejs.org/"
          },
          "https://nodejs.org/"
        ],
        "，下载对应平台且标记为 LTS 版本的安装包，并执行安装，安装成功后在终端执行："
      ],
      [
        "h3",
        "验证安装的 Node.js 版本"
      ],
      [
        "p",
        "在终端中执行如下命令 (Windows 下可以是 Git Bash 或其它终端模拟器)"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "node -v\nnpm -v"
        ]
      ],
      [
        "p",
        "终端打印出 Node.js 和 npm 的版本，则表示安装成功。"
      ],
      [
        "blockquote",
        [
          "ul",
          [
            "li",
            [
              "p",
              "LTS: 指的是 Node.js 的长期维护版本，您可以在这里 ",
              [
                "a",
                {
                  "title": null,
                  "href": "https://github.com/nodejs/Release#release-schedule"
                },
                "https://github.com/nodejs/Release#release-schedule"
              ],
              " 看到 Node.js 各版本的官方持续维护期限"
            ]
          ],
          [
            "li",
            [
              "p",
              "nvm: 请参考 ",
              [
                "a",
                {
                  "title": null,
                  "href": "https://github.com/creationix/nvm"
                },
                "https://github.com/creationix/nvm"
              ]
            ]
          ]
        ]
      ]
    ]
  },
  {
    "filename": "basis/find-components.md",
    "path": "basis/find-components",
    "title": "如何查找社区组件",
    "order": 11,
    "category": "入门指引",
    "participle": {
      "title": "查找 组件 社区",
      "content": "组件 github NPM 查找 state react 文档 检索 使用 安装 com npm management mobx 英语 站点 找到 社区 管理 上面 挺好用 https title google 37 1914 png star alicdn img 11 mobxjs 飞冰 package category 1. 2. install 982. tfs order 介绍 优先选择 通常 执行命令 需求 方法 看到 相关 方式 比较 提供 试着 使用者 入门 高质量 关键词 指引 选项 前端 如有 参照 拿来 英文 搜索 进行 可靠 自行 欢迎 效率 全世界 优质 咨询 更好 极大 下面 符合 补充 证明 类似 之外 方案 体系 质量 提升 推荐 往往 开发 说明 服务 希望 采用 非常 项目 很多 觉得 几个 基本 超过 之后 需要 问题 目前 可能 中国"
    },
    "jsonml": [
      "article",
      [
        "p",
        "飞冰组件体系基于 NPM 包管理，因此除了我们提供的高质量组件之外，你还可以自行检索使用 NPM 社区里超过 37w+ 的组件，下面介绍下通常我们是怎么查找这些组件拿来用的。"
      ],
      [
        "h4",
        "1. 使用英语在 google 或者 github 站点上检索"
      ],
      [
        "p",
        "优质的组件往往会采用英语（为了服务全世界，很多中国人开发的也是用英语介绍），所以针对你的需求使用英文关键词会极大的提升检索效率和结果质量。"
      ],
      [
        "p",
        "比如我们希望找到管理 react state 更好的方案或者库，可以试着搜索 \"react state management github\" 或者 \"react state management npm\" 可以找到几个选项，其中可以看到 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/mobxjs/mobx"
          },
          "mobx"
        ],
        " 在 github 上面有非常多的 star，证明这个包比较可靠、使用者比较多，可以优先选择使用。"
      ],
      [
        "h4",
        "2. 查找文档找到安装方法和使用方法"
      ],
      [
        "p",
        "目前前端相关的项目，基本都会提供 NPM 的安装方式，基于 NPM 进行包管理。查找文档你可能会看到类似这样的安装说明："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "//img.alicdn.com/tfs/TB14B7YOVXXXXcRXpXXXXXXXXXX-1914-982.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "通常来说，组件的安装方式是执行命令 ",
        [
          "code",
          "npm install [package name] --save"
        ],
        "。"
      ],
      [
        "p",
        "之后需要参照相关文档进行使用，如果你觉得符合你的需求挺好用，欢迎推荐给我们补充到站点上面。如有问题也可以随时咨询。"
      ]
    ]
  },
  {
    "filename": "basis/git-assets-work.md",
    "path": "basis/git-assets-work",
    "title": "Git 仓库开发实践",
    "order": 3,
    "category": "入门指引",
    "participle": {
      "title": "Git 仓库 实践 开发",
      "content": "git 分支 仓库 创建 Git 提交 feature 0.1.0 代码 配置 origin add bash master 初始化 使用 项目 com gitlab json checkout package push eslint 忽略 目录 路由 文件 命令行 开发 功能 入口 远程 名为 一个 管理 变更 根目录 工具 命令 管理工具 Pro Iceworks Design ponents ice url router src routerConfig title github index js repo gitignore remote ICE 为例 public pro 好后 category pages eslintrc eslintignore 名是 order init SourceTree mock mit editorconfig menuConfig md README dist 2. GUI login daily jsx layouts tests design 推送 操作 说明 资源 脚手架 模板 分布式 文档 完成 页面 远端 组件 主干 入门 打包 静态 登录 指引 编写 导航 模拟 任意 进行 后续 定义 测试 输入 公共 命名 生成 部署 实践 通用 自动 保存 允许 布局 下面 打算 一步 风格 帮助 应用 执行 介绍 信息 以下 发布 准备 结构 基本 数据 应该 需要 一种 表示"
    },
    "jsonml": [
      "article",
      [
        "p",
        "使用 Iceworks 创建项目后，会自动生成项目的脚手架文件，下面就对这些文件的仓库管理进行说明。"
      ],
      [
        "h2",
        "目录结构"
      ],
      [
        "p",
        "以 ",
        [
          "code",
          "ICE Design Pro"
        ],
        " 模板为例:"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "ice-design-pro\n├── dist        // 打包资源\n├── mock        // 模拟数据\n├── public      // 静态资源\n├── src\n│   ├── components   // 公共组件\n│   ├── layouts      // 通用布局\n│   ├── pages        // 页面\n│   ├── index.js     // 应用入口\n│   ├── menuConfig   // 导航配置\n│   ├── routerConfig // 路由配置\n│   └── router.jsx   // 路由入口\n├── tests            // 测试\n├── .gitignore       // git 忽略目录配置\n├── .editorconfig    // 代码风格配置\n├── .eslintignore    // eslint 忽略目录配置\n├── .eslintrc        // eslint 配置\n├── package.json     // package.json\n└── README.md        // 项目说明"
        ]
      ],
      [
        "h2",
        "使用命令行操作"
      ],
      [
        "p",
        "这里介绍使用命令行操作 git 仓库的基本命令，如果您使用 GUI 工具 (如 SourceTree) 进行管理，请遵循该工具的帮助文档。"
      ],
      [
        "h3",
        "初始化 Git 仓库"
      ],
      [
        "p",
        "在初始化的项目根目录下执行以下命令，并将初始化的文件推送到 git 仓库："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ git init\n$ git add .\n$ git commit # 输入提交信息并保存"
        ]
      ],
      [
        "h3",
        "2. 提交项目到远程 Git 仓库"
      ],
      [
        "p",
        "您需要使用 github 或者 gitlab 创建一个远程仓库，由于 Git 是一种分布式仓库管理工具，如果您打算只在本地使用这些代码, 那么可以忽略这一步。"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ git remote add origin git://your-repo-url\n$ git push origin master -u"
        ]
      ],
      [
        "h2",
        "分支管理"
      ],
      [
        "p",
        "Git 仓库创建好后，此时只有一个 master 主干，不允许向 master 提交代码，后续开发都应该创建分支在分支上开发。"
      ],
      [
        "h3",
        "创建新分支"
      ],
      [
        "p",
        "创建一个名为 feature/0.1.0 的分支。并将分支提交到 gitlab 仓库上。"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ git checkout -b feature/0.1.0                    # 创建分支\n$ git push origin feature/0.1.0                    # 提交分支"
        ]
      ],
      [
        "p",
        "这样就创建好一个名为 daily/0.1.0 的分支了。 分支名是可以任意定义的，比如你可以创建自己的功能命名的分支, 如 ",
        [
          "code",
          "git checkout -b feature/add-login"
        ],
        " 表示一个登录功能的分支。"
      ],
      [
        "h3",
        "提交变更代码"
      ],
      [
        "p",
        "在编写代码完成后，或者某个功能完成时，可以将变更的代码提交到远端分支，准备部署发布。"
      ]
    ]
  },
  {
    "filename": "basis/intro-javascript.md",
    "path": "basis/intro-javascript",
    "title": "JavaScript 基础知识",
    "order": 4,
    "category": "入门指引",
    "participle": {
      "title": "JavaScript 基础知识",
      "content": "js JavaScript console let log Java com http list obj 作用域 bb aa undefined www key age 函数 数据类型 运算符 int 类型 docs java w3school cn ruanyifeng asp string false 字符串 变量 null es6 function number https return 数组 语言 语法 方法 add array String forEach 18 true 使用 比较 详情 需要 typeof val Web Array sex ES6 System object 12.33 10 fun println boolean 箭头 常用 引用 对象 赋值 定义 org Number result HashMap mozilla html double var developer push JSON 布尔值 bind 参数 调用 控制台 转换 一个 绑定 基础知识 数据 进行 用法 默认值 直接 新增 变量值 en 入栈 const Chrome 20.0 20 new male loop map IDE float aaa Global length 浩睿 类型转换 Double objStr Objects US apply Object home parseInt Reference 出栈 ArrayList province 字段 流程 空值 不同于 双引号 执行 遍历 详情请 改变 扩展 声明 文档 表示 数字 规范 网页 语句 区别 下面 后面 上面 新版 转换成 概念 运行 当前 推荐 开发 功能 具体 同样 参照 简化 环境 内容 有序 控制 非常 一门 访问 基本 基础 创建 获取 指定 覆盖 特定 提示 特性 即可 循环 返回 函数参数 未定义 常见 方便 知识点 初始值 文本编辑 掌握 前面 打开 脚本语言 命令 类似 普通 bbb pop Integer png parseFloat basic parse parisons If order 右击 operators 12 992 objects alicdn 反值 ICE 的值 缺省值 616. While learn leeon jianshu Undefined Function javascript item io For 传参 img Switch 123 47456978 IDEA gitbooks 中带 03 Set 22 值会 56 Data zhihu zh yujiangshui 有值 有个 2014 weekly1 vs Null devtools value using Map delete content tps title switch CN List structures stringify stdlib codewars static size scope class Boolean category remove question a9c2d11adc blog public JS pro 全等 每个 单引号 增强 里面 兜底 介绍 操作 开发者 通常 取到 浏览器 处理 只能 重点 建议 操作方法 引号 导致 支持 略有不同 内置 映射 锦上添花 转成 页面 相关 几个 善用 必须 惯用 比较简单 面板 等同于 编译 入门 改动 举例 详见 常量 无序 等同 中用 地方 拆开 讲解 不同 链接 没关系 这是 靠拢 直观 概述 缺失 包括 解答 列出 多种多样 存储 打印 简易 指引 实时 前端 书写 添加 正规 巧妙 切换 之分 删除 新一代 参见 疑惑 任意 不太 属性 含义 小组 关联 绝大部分 几种 辅助 代码 例子 引入 输入 麻烦 逻辑 只不过 依赖 传递 灵活 动态 部署 每次 混合 自动 相当于 知识 设置 程序 一段 含有 没有 遇到 暂时 工具 理解 检查 临时 第一个 配置 是因为 之外 山东 更是 判断 学习 快速 特殊 位置 内部 多种 简单 联系 相比 计算 容易 特点 传统 确定 注意 取得 真正 信息 三个 稳定 选择 看到 结构 关注 得到 存在 产生 之后 一定 重要 不能 影响 知道 这种 起来 可能"
    },
    "jsonml": [
      "article",
      [
        "p",
        "写前端必须要掌握一定基础的 JavaScript 语言知识，本文档将介绍绝大部分常用的 JavaScript 语言基础知识，同样概念添加 Java 语言对比，帮你快速学习理解。"
      ],
      [
        "h2",
        "JavaScript 语言概述和开发环境、运行环境配置"
      ],
      [
        "p",
        "JavaScript 是一门脚本语言，用在网页上增强页面功能，是一门动态语言因此不需要进行编译、部署。"
      ],
      [
        "p",
        "JavaScript 是弱类型的语言，语法比较简单，掌握基本语法之后怎么写都可以，比 Java 灵活的多，同时不需要依赖 IDE，任何文本编辑器都可以进行开发。当然如果你用 IDEA 等 IDE 更是锦上添花。"
      ],
      [
        "p",
        "JavaScript 比较常见的运行环境就是 Web 浏览器，比如 Chrome 直接打开 console 输入 JavaScript 代码即可运行实时看到结果："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tps/TB1tLD7NFXXXXbmXpXXXXXXXXXX-992-616.png",
            "alt": null
          }
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "提示：在 Chrome 中，右击网页选择『检查』即可打开开发者工具，可以切换到 console 面板。详情可以看",
          [
            "a",
            {
              "title": null,
              "href": "https://leeon.gitbooks.io/devtools/content/learn_basic/using_console.html"
            },
            "如何使用控制台"
          ],
          "。\n提示：控制台比较常用的有 console.log 方法，它可以打印一些内容、变量值等到你的控制台辅助开发，等同 Java 中的 System.out.println 方法。"
        ]
      ],
      [
        "h2",
        "JavaScript 语法基础"
      ],
      [
        "h3",
        "变量定义"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "let 定义普通变量（推荐），详情：",
            [
              "a",
              {
                "title": null,
                "href": "http://es6.ruanyifeng.com/#docs/let#let命令。"
              },
              "http://es6.ruanyifeng.com/#docs/let#let命令。"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "const 定义常量，后面只能读不能写，详情：",
            [
              "a",
              {
                "title": null,
                "href": "http://es6.ruanyifeng.com/#docs/let#const命令。"
              },
              "http://es6.ruanyifeng.com/#docs/let#const命令。"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "var 定义普通变量，不建议使用。"
          ]
        ]
      ],
      [
        "p",
        "var 由于缺失某些特性，不建议使用，关于 let 和 var 的对比，详情见：",
        [
          "a",
          {
            "title": null,
            "href": "https://www.zhihu.com/question/47456978"
          },
          "https://www.zhihu.com/question/47456978"
        ],
        " 。"
      ],
      [
        "p",
        "由于 JavaScript 是弱类型语言，因此你不需要声明变量的数据类型。"
      ],
      [
        "p",
        "JavaScript:"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let x = 20;"
        ]
      ],
      [
        "p",
        "Java:"
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "float x = 20.0;\ndouble x = 20.0;\nint x = 20;"
        ]
      ],
      [
        "p",
        "具体支持的数据类型参照下面文档。"
      ],
      [
        "h3",
        "数据类型"
      ],
      [
        "p",
        "数据类型基础知识详见：",
        [
          "a",
          {
            "title": null,
            "href": "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures"
          },
          "https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures"
        ],
        " ，这里针对常用的几种进行重点讲解。"
      ],
      [
        "p",
        "基础类型包括：Undefined、Null、Boolean、Number、String，引用类型包括：Object、Array、Function。当一个变量值为引用类型的时候，直接赋值其他变量传递的是引用。同样的，引用的数据在某个地方改变了值会影响所有调用这个变量的地方。这跟 Java 里面引用概念一样。"
      ],
      [
        "h4",
        "undefined 和 null"
      ],
      [
        "p",
        "声明一个变量没有赋值，直接访问当前变量可以得到 ",
        [
          "code",
          "undefined"
        ],
        "。不同于 Java 针对不同数据类型有不同的初始值："
      ],
      [
        "p",
        "JavaScript:"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let x;\nconsole.log(x); // -> undefined"
        ]
      ],
      [
        "p",
        "Java:"
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "int x;\nSystem.out.println(x); // -> 0"
        ]
      ],
      [
        "p",
        "访问一个对象上不存在的 key 也会取到 undefined。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let a = {};\nconsole.log(a.b); // -> undefined"
        ]
      ],
      [
        "p",
        "null 表示空值。它不同于 undefined，它是有值的只不过是一个空值，而 undefined 是未定义的临时兜底的缺省值。undefined 和 null 具体的区别请参见：",
        [
          "a",
          {
            "title": null,
            "href": "http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html"
          },
          "http://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html"
        ],
        " 。"
      ],
      [
        "h4",
        "number、boolean、string"
      ],
      [
        "p",
        "基本的数据类型："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "console.log(typeof 10); // -> number\nconsole.log(typeof '10'); // -> string\nconsole.log(typeof true); // -> boolean\nconsole.log(typeof \"true\"); // -> string"
        ]
      ],
      [
        "p",
        "JavaScript 中带引号的均为字符串，可以是单引号也可以是双引号。不同于 Java 字符串只能使用双引号表示。JavaScript 没有 int、float 和 double 之分。"
      ],
      [
        "h4",
        "array"
      ],
      [
        "p",
        "数组类型，栈结构，有序数组。每个 item 可以是任意类型的值，数据类型类似 Java 的 ArrayList ，比如："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// 字符串数组\n['string', 'aaa']\n\n// 对象和字符串混合数组\n[{\n  aa: 'aaa',\n  bb: 'bbb',\n}, 'string']\n\n// 函数数组\n[() => {\n  return '这是一个函数'\n}, () => {\n  return '这是一个函数'\n}]"
        ]
      ],
      [
        "p",
        "如果需要取得特定需要的值，直接获取（比如获取第一个数据）："
      ],
      [
        "p",
        "JavaScript："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "array[0];"
        ]
      ],
      [
        "p",
        "Java："
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "list.get(0);"
        ]
      ],
      [
        "p",
        "数组是有序的，遍历数组需要使用流程控制语句 for 等。为了方便，array 内置了一些数组常用操作方法可以简化常用操作，详情可见：",
        [
          "a",
          {
            "title": null,
            "href": "http://yujiangshui.com/codewars-weekly1/#善用-Array-的函数"
          },
          "http://yujiangshui.com/codewars-weekly1/#善用-Array-的函数"
        ],
        "。"
      ],
      [
        "p",
        "比较常用 ",
        [
          "a",
          {
            "title": null,
            "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach"
          },
          "forEach"
        ],
        " 和 ",
        [
          "a",
          {
            "title": null,
            "href": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map"
          },
          "map"
        ],
        " 方法，可以重点关注下用法。"
      ],
      [
        "p",
        "简易循环举例："
      ],
      [
        "p",
        "JavaScript:"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let list = [];\nlist.push('aa');\nlist.push('bb');\n\nfor(let i=0; i<list.length; i++) {\n  console.log(list[i]);\n}\n\nlist.forEach((val, i) => {\n  console.log(val, i);\n});"
        ]
      ],
      [
        "p",
        "Java:"
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "List<String> list = new ArrayList<String>();\nlist.add('aa');\nlist.add('bb');\n\nfor(int i=0; i<list.size();i++) {\n  System.out.println(list.get(i));\n}\nlist.forEach((val) -> {\n  System.out.println(val);\n});"
        ]
      ],
      [
        "p",
        "相比 Java 的 add 操作，JavaScript array 的出栈入栈删除的方法名略有不同，常见的 push 入栈、pop 出栈，具体的参照 ",
        [
          "a",
          {
            "title": null,
            "href": "http://javascript.ruanyifeng.com/stdlib/array.html"
          },
          "http://javascript.ruanyifeng.com/stdlib/array.html"
        ],
        " 。"
      ],
      [
        "h4",
        "object"
      ],
      [
        "p",
        "对象类型，无序，需要指定 key 等信息关联值，类似 Java 的 HashMap，比如："
      ],
      [
        "p",
        "JavaScript："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let obj = {\n  name: 'string 字符串',\n  home: {\n    province: '山东'\n  }\n};\n\nobj.age = 18;\n\nconsole.log(obj.home.province);\nlet key = 'age';\nconsole.log(obj[key], obj['age']);\ndelete obj.name;"
        ]
      ],
      [
        "p",
        "Java:"
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "HashMap<String , Double> obj = new HashMap<String , Double>();\nobj.put('age', 18);\n\nobj.get('age');\nobj.remove('age');"
        ]
      ],
      [
        "p",
        "如果不确定 key 的值（变量）可以使用如下方法调用："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let key = 'age';\nobj[key]; // -> 18"
        ]
      ],
      [
        "p",
        "因此可以用来做 key value 的数据映射使用。由于弱类型存储的值可以多种多样，比 Java 使用起来要容易一些。详情：",
        [
          "a",
          {
            "title": null,
            "href": "http://www.w3school.com.cn/js/js_objects.asp"
          },
          "http://www.w3school.com.cn/js/js_objects.asp"
        ]
      ],
      [
        "h4",
        "function"
      ],
      [
        "p",
        "函数类型，用来创建一个函数，通常会返回一个数据。"
      ],
      [
        "p",
        "JavaScript:"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "function fun(a, b) {\n  return a + b;\n}\nfun(1, 2); // -> 3;"
        ]
      ],
      [
        "p",
        "Java:"
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "public static int fun(int a, int b) {\n  int result;\n  result = a + b;\n\n  return result;\n}\nfun(1, 2);"
        ]
      ],
      [
        "p",
        "函数是一个可执行的小程序，根据参数处理一些逻辑并返回一段新的数据，在 JavaScript 中用非常多，为此 ES6（新版 JavaScript 语言规范）新增了箭头函数语法，用来简化函数书写："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let add = function(a, b) {\n  return a + b;\n};\n\n等同于\n\nlet add = (a, b) => {\n  return a + b;\n};\n\n循环语句中也非常直观方便：\n\nlist.forEach((a, b) => {\n  console.log(a + b);\n});"
        ]
      ],
      [
        "p",
        "箭头函数有个重要的特点就是自动绑定了当前的作用域，作用域的概念，JavaScript 和 Java 的一样，JavaScript 中可以使用 bind、call、apply 三个方法改变函数执行的作用域，简单区别如下："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "bind 方法，创建一个新的函数的",
            [
              "strong",
              "引用"
            ],
            "并绑定到一个作用域特定作用域上面，同时支持传参。",
            [
              "code",
              "bind(作用域对象, 参数1, 参数2)"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "apply、call 方法，直接调用执行该函数，在执行的时候将函数内部的作用域绑定到参数指定的作用域。",
            [
              "code",
              "call(作用域)"
            ]
          ]
        ]
      ],
      [
        "p",
        "这几个方法详情请见：",
        [
          "a",
          {
            "title": null,
            "href": "http://www.jianshu.com/p/56a9c2d11adc"
          },
          "http://www.jianshu.com/p/56a9c2d11adc"
        ],
        " 。通常可能会在 JavaScript 的作用域上产生疑惑，没关系随时联系 ICE 小组进行处理解答。"
      ],
      [
        "p",
        "箭头函数声明和特性：",
        [
          "a",
          {
            "title": null,
            "href": "http://es6.ruanyifeng.com/#docs/function#箭头函数"
          },
          "http://es6.ruanyifeng.com/#docs/function#箭头函数"
        ]
      ],
      [
        "p",
        "函数作用域：",
        [
          "a",
          {
            "title": null,
            "href": "http://es6.ruanyifeng.com/#docs/function#作用域"
          },
          "http://es6.ruanyifeng.com/#docs/function#作用域"
        ],
        " 和 ",
        [
          "a",
          {
            "title": null,
            "href": "http://www.w3school.com.cn/js/pro_js_object_scope.asp"
          },
          "http://www.w3school.com.cn/js/pro_js_object_scope.asp"
        ]
      ],
      [
        "p",
        "设置函数参数的默认值：",
        [
          "a",
          {
            "title": null,
            "href": "http://es6.ruanyifeng.com/#docs/function#参数默认值的位置"
          },
          "http://es6.ruanyifeng.com/#docs/function#参数默认值的位置"
        ]
      ],
      [
        "h4",
        "类型转换"
      ],
      [
        "p",
        "类型转换可以通过调用类型的类进行转换，比如将变量 a 转换成 Number 类型，可以使用："
      ],
      [
        "p",
        "JavaScript:"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let a = '10';\na = Number(a);"
        ]
      ],
      [
        "p",
        "Java:"
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "int x;\n(double)x;"
        ]
      ],
      [
        "p",
        "除了这种比较正规的方法之外，跟 Java 一样还有其他惯用方法进行转换。"
      ],
      [
        "h5",
        "转换 number 类型"
      ],
      [
        "p",
        "JavaScript:"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let a = '12.33';\nconsole.log(parseInt(a)); // -> 12 number\nconsole.log(parseFloat(a)); // -> 12.33 number"
        ]
      ],
      [
        "p",
        "Java:"
      ],
      [
        "pre",
        {
          "lang": "java"
        },
        [
          "code",
          "int i = Integer.parseInt(“123”);"
        ]
      ],
      [
        "h5",
        "转换 string 类型"
      ],
      [
        "p",
        "同 Java 每个类型的值都含有 toString() 方法。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let a = 12.33;\nconsole.log(a.toString()); // -> '12.33'\n\n将 Object 转成 JSON 字符串\n\nlet obj = {\n  a: 'aa',\n  b: 'bb'\n};\nconsole.log(JSON.stringify(obj)); // -> '{\"a\":\"aa\",\"b\":\"bb\"}'\nlet objStr = '{\"a\":\"aa\",\"b\":\"bb\"}';\nconsole.log(JSON.parse(objStr)); // -> {a:\"aa\", b:\"bb\"}"
        ]
      ],
      [
        "h5",
        "转换 boolean 类型"
      ],
      [
        "p",
        "JavaScript 中的 boolean 的值比较多，空字符串、数字 0、null、undefined 均为布尔值的 false。此外 ",
        [
          "code",
          "!"
        ],
        " 表示取当前布尔值的反值，可以通过 ",
        [
          "code",
          "!!"
        ],
        " 巧妙的将值转换成布尔值类型的数据。"
      ],
      [
        "p",
        "JavaScript:"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "console.log(!!'a'); // -> true\nconsole.log(!!''); // -> false 空字符串\nconsole.log(!!0); // -> false 数字 0\nconsole.log(!!10); // -> true\nconsole.log(!!null); // -> false\nconsole.log(!!undefined); // -> false\nconsole.log(!![].length); // -> false"
        ]
      ],
      [
        "h3",
        "流程控制、比较、运算符等"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "流程控制"
          ],
          [
            "ul",
            [
              "li",
              [
                "p",
                "If：",
                [
                  "a",
                  {
                    "title": null,
                    "href": "http://www.w3school.com.cn/js/js_if_else.asp"
                  },
                  "http://www.w3school.com.cn/js/js_if_else.asp"
                ]
              ]
            ],
            [
              "li",
              [
                "p",
                "Switch：",
                [
                  "a",
                  {
                    "title": null,
                    "href": "http://www.w3school.com.cn/js/js_switch.asp"
                  },
                  "http://www.w3school.com.cn/js/js_switch.asp"
                ]
              ]
            ],
            [
              "li",
              [
                "p",
                "For: ",
                [
                  "a",
                  {
                    "title": null,
                    "href": "http://www.w3school.com.cn/js/js_loop_for.asp"
                  },
                  "http://www.w3school.com.cn/js/js_loop_for.asp"
                ]
              ]
            ],
            [
              "li",
              [
                "p",
                "While: ",
                [
                  "a",
                  {
                    "title": null,
                    "href": "http://www.w3school.com.cn/js/js_loop_while.asp"
                  },
                  "http://www.w3school.com.cn/js/js_loop_while.asp"
                ]
              ]
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "比较：",
            [
              "a",
              {
                "title": null,
                "href": "http://www.w3school.com.cn/js/js_comparisons.asp"
              },
              "http://www.w3school.com.cn/js/js_comparisons.asp"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "运算符：",
            [
              "a",
              {
                "title": null,
                "href": "http://www.w3school.com.cn/js/js_operators.asp"
              },
              "http://www.w3school.com.cn/js/js_operators.asp"
            ]
          ]
        ]
      ],
      [
        "p",
        "基本跟 Java 一样，下面介绍几个 JavaScript 比较常用、特殊的知识点："
      ],
      [
        "h4",
        "== 和 === 的区别"
      ],
      [
        "p",
        "JS 是弱类型语言，=== 表示全等判断，会把类型也进行比较："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "2 == '2' // -> true\n2 === '2' // -> false"
        ]
      ],
      [
        "h4",
        "+ 运算符会改变数据类型"
      ],
      [
        "p",
        "运算符会导致数据类型的改变，这是因为运算符同时表示多种含义导致。+ 运算符既可以链接字符串，也可以计算数字，使用时需要注意："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "2 + 2 // -> 4 number\n2 + '2' // -> '22' string"
        ]
      ],
      [
        "h3",
        "ES6 新版语法增强功能"
      ],
      [
        "p",
        "ES6 是新一代 JavaScript 语法规范，里面新增了非常多的语法和功能，而且往 Java 等传统语言靠拢。比如 class 类定义、箭头函数、真正的 Set、Map 数据类型等。下面仅列出比较推荐的用法，有一些用法由于不太稳定暂时不推荐使用。"
      ],
      [
        "h5",
        [
          "code",
          "...obj"
        ],
        " 扩展运算符"
      ],
      [
        "p",
        "object 的赋值需要遍历相关字段，比如："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let bb = {\n  age: 18,\n  sex: 'male',\n};\nlet aa = {\n  name: '浩睿',\n};\n// 在 aa 上面新增 bb 的属性需要\naa.age = bb.age;\naa.sex = bb.sex;"
        ]
      ],
      [
        "p",
        "这样就比较麻烦，你必须知道所有 key 而且每次新增都需要改动相关字段。为此，ES6 规范将扩展运算符（",
        [
          "code",
          "..."
        ],
        "）引入对象。就上面的例子，可以这样写："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "let bb = {\n  age: 18,\n  sex: 'male',\n  name: '后面的同 key 内容会覆盖前面的'\n};\nlet aa = {\n  name: '浩睿',\n  ...bb,\n};"
        ]
      ],
      [
        "p",
        "相当于把某个对象拆开分别赋值，遇到同样的 key 后面内容会覆盖前面的。详情请看：",
        [
          "a",
          {
            "title": null,
            "href": "http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符"
          },
          "http://es6.ruanyifeng.com/#docs/object#对象的扩展运算符"
        ]
      ]
    ]
  },
  {
    "filename": "basis/intro-react.md",
    "path": "basis/intro-react",
    "title": "React 基础知识和介绍",
    "order": 5,
    "category": "入门指引",
    "participle": {
      "title": "React 基础知识 介绍",
      "content": "React state 组件 props render div com 渲染 console log switchStatus class h1 状态 开关 react Component return jsx setState 创建 方法 改变 出生 页面 JSX age extends HelloMessage button nextProps 需要 文档 执行 生命周期 电线 switch https HTML 一个 调用 数据 参见 属性 传递 重新 语法 必须 stackoverflow 我要 docs http timer 27991366 io onClick facebook questions html true DOM difference 浩睿 Hello github 关闭 详情请 代码 获取 一种 只读 断开 特性 一段 进行 名字 销毁 概念 触发 内部 介绍 存储 功能 处理 流程 顺序 展示 传入 拿到 传递数据 已经 声明 使用 即可 修改 最新 动态数据 lifecycle 2850 ICE 的值 ponentWillUnmount ponentWillReceiveProps ponentWillMount ponentDidUpdate clearInterval ponent 化而生 order ponentWillUpdate 21 CN mountNode category 2945. shouldComponentUpdate MpXXXXamXFXXXXXXXXXX jpg 我换 Person img body false 5000 alicdn zh xxx 完了 world tps title Switch super depth document ponentDidMount setInterval 方案 当前 关灯 行为 复用 返回值 实际 基础知识 了解 详解 开灯 完成 准备 火化 读取 拼接 直接 相关 过生日 按钮 比较简单 正在 附带 算作 入门 连通 实例 看做 组装 接通 这篇 用到 默认 点击 之后 几大 链接 解决方案 后台 衰老 拦截 这套 静态 初始 再见 指引 时间 下层 场景 生日 第一步 不能 结晶 切换 开启 再来 上层 抽出 变换 赋予 回顾 接收 构建 转动 来往 智慧 此类 小组 绝大部分 姓名 参考 给出 官方 至此 阻止 完毕 这句 检测 总结 描述 更新 返回 继承 制作 等于 年龄 详细 周期 性能 方便 下面 死亡 停止 固定 大概 成长 打开 观察 通知 机制 必要 专门 即将 是因为 每个 一系列 判断 马上 事件 运行 两种 里面 位置 优势 人类 简单 下去 提升 往往 设计 开发 具体 独立 通常 同样 无法 注意 是否 需求 采用 内容 业务 下来 支持 几乎 控制 原因 一下 结构 方式 变化 提供 世纪 实现 一次 存在 部分 不同 一定 目前"
    },
    "jsonml": [
      "article",
      [
        "blockquote",
        [
          "p",
          "React 是 21 世纪人类智慧的结晶。"
        ]
      ],
      [
        "p",
        "目前几乎绝大部分的组件化方案都是基于 React 实现，因为 React 就是专门为组件化而生的。因此，ICE 后台解决方案也采用了 React 这套方案进行构建。"
      ],
      [
        "h2",
        "了解 React"
      ],
      [
        "p",
        "本文档不只谈 React 的功能、特性、优势，而是按照实际业务需求对创建一个 React 组件流程做一个介绍，并附带介绍相关特性给出详细参考文档链接。"
      ],
      [
        "h3",
        "创建一个 React 组件"
      ],
      [
        "p",
        "首先拿到一系列的页面，我们第一步并不是去马上开发，而是先观察可复用部分抽出成独立的小组件，然后就可以通过拼接组件组装页面了。"
      ],
      [
        "p",
        "制作一个组件通常需要展示一段 HTML 代码，创建一个最简单的 React 方法如下："
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "class HelloMessage extends React.Component {\n\n  render() {\n\n    return (\n      <div>Hello world!</div>\n    );\n  }\n}"
        ]
      ],
      [
        "p",
        "只需要声明一个继承 React Component 的 class 即可创建一个组件，每个组件必须要有一个 render 方法，render 方法的返回值是一段 JSX 代码。"
      ],
      [
        "p",
        "JSX 语法跟 HTML 很像，但是还是有一些不同，比较简单的场景下，你可以看做是一样的。",
        [
          "a",
          {
            "title": null,
            "href": "https://facebook.github.io/react/docs/jsx-in-depth-zh-CN.html"
          },
          "JSX 具体语法请参见这篇文档"
        ],
        "。"
      ],
      [
        "p",
        "创建了一个 class 我们还需要去实例化、执行才可以渲染到页面上，所以我们可以调用下面这句代码将这个组件实际的渲染出来："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "ReactDOM.render(<HelloMessage />, document.body);"
        ]
      ],
      [
        "h3",
        "为 React 组件传入数据"
      ],
      [
        "p",
        "组件往往是需要展示一些动态数据的，而不是静态的，因此内容不能写死需要获取并传递下去。为此 React 创建了 props 这个概念用来往组件传入数据。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "class HelloMessage extends React.Component {\n  render() {\n    return (\n      <div>Hello {this.props.name}</div>\n    );\n  }\n}\n\nReactDOM.render(<HelloMessage name=\"浩睿\" />, mountNode);"
        ]
      ],
      [
        "p",
        "渲染组件的时候，按照 HTML 的方式传递一个属性 name 和值 '浩睿'，即可在组件内部的任何位置使用 ",
        [
          "code",
          "this.props.name"
        ],
        " 拿到这个值进行处理。"
      ],
      [
        "p",
        "props 是只读的，用来获取上层组件传递下来的数据。详情请参见：",
        [
          "a",
          {
            "title": null,
            "href": "http://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react"
          },
          "http://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react"
        ]
      ],
      [
        "h3",
        "React 组件的变化是基于状态的"
      ],
      [
        "p",
        "如果设计一个灯开关组件，那么对于这个开关组件它有两种状态，一种是开关开启状态（此时需要连通电线），一种是开关关闭状态（此时需要断开电线），而摁下开关是则是一种触发行为。为此 React 创建了 state 这个概念用来描述组件内部的状态，并支持获取事件进行触发。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "class Switch extends React.Component {\n  state = {\n    // 开关状态默认关闭\n    switchStatus: false\n  }\n\n  switch = () => {\n    // 切换开关的值\n    this.setState({\n      switchStatus: !this.state.switchStatus\n    });\n  };\n\n  render() {\n\n    if (this.state.switchStatus) {\n      return (\n        <div>\n          <h1>灯已经打开，电线接通</h1>\n          <button onClick={this.switch}>关灯</button>\n        </div>\n      );\n    } else {\n      return (\n        <div>\n          <h1>灯已经关闭，电线断开</h1>\n          <button onClick={this.switch}>开灯</button>\n        </div>\n      );\n    }\n  }\n}"
        ]
      ],
      [
        "p",
        "组件内用到的数据都算作一种状态，存储在 state 里面，当可以拦截某些行为来去改变 state 的值（比如 点击 按钮），需要注意的是改变当前组件的 state 不能直接用 ",
        [
          "code",
          "this.state.switchStatus = true"
        ],
        " 来改，必须使用 ",
        [
          "code",
          "this.setState"
        ],
        " 方法进行修改。原因是因为状态改变了之后，React 需要重新执行 render 方法进行渲染，此时 render 方法读取 ",
        [
          "code",
          "this.state.switchStatus"
        ],
        " 的值就是最新的数据，渲染结果也是最新的。所以必须有一种机制通知 React state 已经变换了，直接改变 ",
        [
          "code",
          "this.state.switchStatus = true"
        ],
        " 的值，React 无法检测到状态有変更，因此必须使用 ",
        [
          "code",
          "this.setState({xxx})"
        ],
        " 来修改 state 值。"
      ],
      [
        "p",
        "React 组件在渲染的时候需要遵循一定的执行顺序，比如 state 改变之后必须重新执行 render 方法等。为了方便控制 React 的执行顺序和流程，React 创建了生命周期的概念用来处理此类功能。"
      ],
      [
        "p",
        "关于 props 和 state 的详解，请参见：",
        [
          "a",
          {
            "title": null,
            "href": "http://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react"
          },
          "http://stackoverflow.com/questions/27991366/what-is-the-difference-between-state-and-props-in-react"
        ]
      ],
      [
        "h3",
        "React 组件的生命周期"
      ],
      [
        "p",
        "就像一个人一样，出生、赋予属性（props）、成长（state 変更）、衰老死亡（组件销毁），React 组件同样存在这些状态，便于做相关功能处理。"
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "class Person extends React.Component {\n\n  // 即将出生（刚开始调用）\n  componentWillMount() {\n    console.log('我要出生了，我的名字叫 ', this.props.name);\n  }\n\n  // 出生（开始渲染，准备初始数据，调用 render 方法）\n  constructor(props) {\n    super(props);\n\n    console.log('name', this.props.name);\n\n    this.state = {\n      name: this.props.name,\n      age: 0\n    };\n\n    // 时间开始转动，5 秒等于 1 岁\n    this.timer = setInterval(() => {\n      this.setState({\n        age: this.state.age + 1\n      });\n    }, 5000);\n\n    console.log('我正在出生');\n  }\n\n\n  // 出生完毕（调用 render 完成并渲染到页面上）\n  componentDidMount() {\n    console.log('我已经出生');\n  }\n\n  // 接收了新的属性\n  componentWillReceiveProps(nextProps) {\n    // 换了个新名字，固定的属性\n    if (nextProps.name !== this.state.name) {\n      console.log('我换了个名字：', nextProps.name);\n      this.setState({\n        name: nextProps.name\n      });\n    }\n  }\n\n  // 要重新渲染了（准备过生日）\n  componentWillUpdate() {\n    console.log('我要改变了！');\n  }\n  // 更新渲染完成了（过完生日）\n  componentDidUpdate() {\n    console.log('我改变完了！');\n  }\n\n  // 要火化了（组件销毁）\n  componentWillUnmount() {\n    // 停止时间\n    console.log('再见啦！');\n    clearInterval(this.timer);\n  }\n\n  render() {\n    console.log('我正在改变！');\n    return (\n      <div>\n        <h1>姓名：{this.state.name}，年龄：{this.state.age}</h1>\n      </div>\n    );\n  }\n}"
        ]
      ],
      [
        "p",
        "每一次 props 或者 state 改变，都会重新渲染组件，为了阻止渲染，React 还提供了 ",
        [
          "code",
          "shouldComponentUpdate"
        ],
        " 方法，在 render 前判断是否有必要执行 render 提升性能。关于 React 声明周期，详情请参见官方文档：",
        [
          "a",
          {
            "title": null,
            "href": "https://facebook.github.io/react/docs/react-component.html"
          },
          "https://facebook.github.io/react/docs/react-component.html"
        ],
        " 。"
      ],
      [
        "p",
        "附生命周期图："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tps/TB1Ng7_MpXXXXamXFXXXXXXXXXX-2850-2945.jpg",
            "alt": "lifecycle"
          }
        ]
      ],
      [
        "h2",
        "总结"
      ],
      [
        "p",
        "至此，几大 React 特性你大概了解了，再来回顾一下："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "props 用来传递数据，state 用来存储组件内部的状态和数据。props 是只读的，state 当前组件 state 的值可以作为 props 传递给下层组件。"
          ]
        ],
        [
          "li",
          [
            "p",
            "React 组件按照生命周期运行，改变 state 就会重新执行 render 方法。render 方法返回的是一段 JSX 语法的结构用来渲染到页面上。"
          ]
        ]
      ]
    ]
  },
  {
    "filename": "basis/use-component.md",
    "path": "basis/use-component",
    "title": "如何使用 ICE 组件",
    "category": "入门指引",
    "order": 6,
    "participle": {
      "title": "ICE 组件 使用",
      "content": "组件 ICE 安装 packageName import npm 文档 更新 命令 ComponentName title bash IceTitle DOM install latest React 使用 业务 版本 查看 对应 升级 版本号 示例 源码 @icedesign DEMO NPM version docs rules render 当装 com ponent order 包都 dom category react jsx mountNode 说明 载入 初始化 方法 省略 项目 语句 查找 检索 物料 入门 详见 默认 渲染 点击 讲解 全局 指引 实时 搜索 进行 定义 代码 输入 脚本 想要 部署 规则 名称 编辑 最新 效果 当前 具体 统一 目的 基础 管理 达到 需要 表示 主要"
    },
    "jsonml": [
      "article",
      [
        "p",
        "ICE 的组件统一使用 NPM 进行管理，所有的组件包都可以通过 npm 命令来安装。"
      ],
      [
        "h2",
        "检索组件"
      ],
      [
        "p",
        "ICE 所有组件文档说明都部署在",
        [
          "a",
          {
            "title": null,
            "href": "#/component"
          },
          "物料 - 组件"
        ],
        "上，同时你也可以在全局搜索框输入你想要的的组件名称进行查找。"
      ],
      [
        "h2",
        "安装与更新"
      ],
      [
        "p",
        "ICE 基础组件在初始化项目时，已默认安装。这里主要讲解业务组件的安装与更新方法。"
      ],
      [
        "h3",
        "安装业务组件"
      ],
      [
        "p",
        "在对应的业务组件文档上都有具体的安装和升级方法："
      ],
      [
        "h4",
        "安装命令："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "npm install <packageName> --save"
        ]
      ],
      [
        "h4",
        "更新命令："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "npm install <packageName>@latest --save"
        ]
      ],
      [
        "p",
        "当需要更新项目内的组件的时，使用此命令 ",
        [
          "code",
          "@latest"
        ],
        " 表示当装当前最新版本。也就达到升级组件的目的。"
      ],
      [
        "p",
        "关于组件版本说明详见",
        [
          "a",
          {
            "title": null,
            "href": "#/docs/others/version-rules"
          },
          "组件版本号规则"
        ],
        "。"
      ],
      [
        "h2",
        "使用组件"
      ],
      [
        "p",
        "使用 ",
        [
          "code",
          "import <ComponentName> from '<packageName>';"
        ],
        " 语句载入脚本，并定义为 ",
        [
          "code",
          "ComponentName"
        ],
        " 。"
      ],
      [
        "blockquote",
        [
          "p",
          "对应组件文档下都有 DEMO 示例，可点击 查看源码 / 实时编辑 查看效果。"
        ]
      ],
      [
        "p",
        "如："
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "import ReactDOM from 'react-dom';\nimport IceTitle from '@icedesign/title';\n\n// .... 省略其他代码\n\n// 渲染\nReactDOM.render(<IceTitle />, mountNode)"
        ]
      ]
    ]
  },
  {
    "filename": "ice-design.md",
    "path": "ice-design",
    "title": "ICE 设计语言",
    "order": 2,
    "cover": "https://gw.alicdn.com/tfs/TB1fcX1bkyWBuNjy0FpXXassXXa-1600-422.png",
    "participle": {
      "title": "ICE 语言 设计",
      "content": "tfs alicdn com https 设计 页面 gw png jpg img ICE 1680 风格 信息 区块 语言 后台 字体 模板 用户 图像 组队 认知 对齐 色彩 组件 顺畅 点击 预览 Design 接近原则 tYBeNjy1XdXXXXyVXa 1953. IDS 尝试 复用 脚手架 内容 深色 平台 物料 主题 表格 透出 界面 需要 样式 视觉 传统 趋势 惊喜 氛围 简化 流程 采用 分割 尺寸 版本 层次 项目 调研 方式 代码 单一 手法 经典 轻松 增强版 界面设计 好感度 当下 元素 使用 准确 内聚 一套 布局 针对实际 愉悦感 项目选择 阅读 14 2328 Introduction 2526 title 1600 2179. scaffold 16 Dashboard 824. 454. 1532. cover 1683. 1900. 项是 block 422. 2762 感有 2732 18 2502. 2724 1490 Iceworks order 12 iceworks 任然 Style 24 太多的 1970. 1040. 原则 不足 应用 舒适度 圆角 感觉 任务 联系 进行 排版 开发 效果图 详情请 处理 凸显出 视觉效果 有效 乏味 实际效果 减少 侧重点 定则 直白 关联性 片段 归类 完成 大量 首页 模块化 被忽视 浅色 渐变 雷同 基础 越少 提供 前台 并不需要 大同小异 明显 质感 投影 节点 增加 存在 毁掉 产品设计 迎合 之间 汲取 字号 沉闷 单调 列表 构思 直观 沉浸 淘宝 一个 一定 沉淀 误解 冰冷 初始 启发 内涵 场景 查询 前端 展现 间隔 添加 线条 激进 产出 节省 导航 束缚 目前 表述 路径 适于 越大 整齐 参见 次数 情感 靠近 体验 拉开 过多 看不见 轻易 场合 负担 逻辑 官方 缺少 长时间 密度 精选 用途 尽量 差距 获取 探索 打破 排列 提示 生成 即可 对应 合适 升级 注重 这时候 适合 大大 当中 某种 颜色 流行 像是 一批 适应 现有 呈现 有着 避免 平衡 最新 突出 效果 简称 加大 背景 体系 成本 概念 快速 结合 良好 里面 内部 突破 相比 提升 也许 介绍 功能 大部分 丰富 比例 更加 取得 一条 空间 重点 希望 选择 其实 几乎 告诉 方法 相对 能够 一下 直接 结构 建立 得到 要求 产品 表现 作用 两个 时间 重要 可能 主要"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在淘宝内部，经过长时间调研和沉淀，我们产出了 ICE Design 这一套适合于中后台前端应用使用的设计语言。\n我们基于 ICE Design 开发了大量的可复用代码片段(区块)，根据区块进行代码复用，大大节省开发时间，详情请见 ",
        [
          "a",
          {
            "title": null,
            "href": "#/block"
          },
          "物料 - 区块"
        ],
        "。\n脚手架初始模板简称为模板，我们针对实际场景的调研，提供了一批官方精选模板，实际效果请参见 ",
        [
          "a",
          {
            "title": null,
            "href": "#/scaffold"
          },
          "物料 - 模板"
        ],
        "。在 ",
        [
          "a",
          {
            "title": null,
            "href": "#/iceworks"
          },
          "Iceworks"
        ],
        " 中生成项目选择对应脚手架即可。"
      ],
      [
        "h2",
        "升级背景"
      ],
      [
        "p",
        "目前传统平台界面的设计语言存在着一些不足，比如色彩单一，大量线条的使用，分割化明显。其实，将这些不足归类一下就是界面单调，雷同性明显，缺少惊喜。也许新的平台类视觉风格可以打破这些束缚，尝试一些新的探索，启发传统的设计认知。因此，结合当下设计趋势，构思了一套新的平台产品设计语言。"
      ],
      [
        "h3",
        "IDS 设计语言"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://gw.alicdn.com/tfs/TB1hT1ja1uSBuNjy1XcXXcYjFXa-2762-1040.png",
            "alt": "IDS 设计语言"
          }
        ]
      ],
      [
        "h3",
        "设计手法"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://gw.alicdn.com/tfs/TB1TDWja1uSBuNjy1XcXXcYjFXa-2526-454.png",
            "alt": "设计手法"
          }
        ]
      ],
      [
        "h2",
        "介绍 Introduction"
      ],
      [
        "p",
        "目前大部分的组件体系设计风格任然大同小异，ICE 为了突破现有的设计，尝试采用更激进的设计风格，比如沉浸式的导航设计，无分割的表格设计。新的设计语言除了遵循经典的设计定则，还汲取的最新的设计趋势，比如模块化投影化的处理方式，圆角的处理，更加突出内容的表现方式。"
      ],
      [
        "h2",
        "风格 Style"
      ],
      [
        "h3",
        "色彩"
      ],
      [
        "p",
        "色彩上相对于其他的组件风格，会将色彩更多的采用到组件和页面当中，避免传统的乏味、沉闷、冰冷的感觉。在合适的节点透出惊喜的感觉。此外增加了渐变的颜色，添加了质感，同时迎合当下流行的趋势。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://gw.alicdn.com/tfs/TB12IH9a_tYBeNjy1XdXXXXyVXa-2732-1900.png",
            "alt": "色彩"
          }
        ]
      ],
      [
        "p",
        "同时提供了浅色版本和深色版本两个风格主题，在对氛围感有很强的要求的产品中可以尝试深色的主题。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://gw.alicdn.com/tfs/TB1wUylaY9YBuNjy0FgXXcxcXXa-2328-824.png",
            "alt": "风格主题"
          }
        ]
      ],
      [
        "h3",
        "字体排版"
      ],
      [
        "p",
        "同时使用过多的字体尺寸和样式可以很轻易的毁掉布局。在字体的选择上，采用的是基础的并且适于阅读的字体字号，12、14、16、18、24 号字，并且他们能够良好的适应布局结构。这些尺寸和样式在经典应用场合中让内容密度和阅读舒适度取得平衡。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://gw.alicdn.com/tfs/TB1hIH9a_tYBeNjy1XdXXXXyVXa-1490-1532.png",
            "alt": "字体"
          }
        ]
      ],
      [
        "h3",
        "图像"
      ],
      [
        "p",
        "在后台界面设计中，图像的用途几乎被忽视，然而图像有着建立情感联系，给人轻松愉悦感的作用。这些是 ICE 新的视觉风格里面需要的，因此，新的设计里加大了图像的透出比例。希望可以给用户更轻松的体验。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://gw.alicdn.com/tfs/TB1NO09a3mTBuNjy1XbXXaMrVXa-2724-1970.jpg",
            "alt": "图像"
          }
        ]
      ],
      [
        "h2",
        "基础设计原则"
      ],
      [
        "p",
        [
          "strong",
          "接近原则"
        ]
      ],
      [
        "p",
        "这样可以给用户一个直观的提示，越靠近的信息区块，关联性越大。接近原则是把信息按一定逻辑进行的“组队”。"
      ],
      [
        "p",
        [
          "strong",
          "层次对比"
        ]
      ],
      [
        "p",
        "页面上的信息通过组队后，一定会需要有侧重点，这时候对比的方法可以拉开内容之间的差距，从而凸显出页面的重点信息。层次对比是增加视觉效果的最直接的方式。"
      ],
      [
        "p",
        [
          "strong",
          "对齐原则"
        ]
      ],
      [
        "p",
        "如果页面上一些项是对齐的，就可以得到一个更内聚的单一，像是有一条看不见的线把信息排列的更整齐，即使元素可能在空间上间隔的很远，或不在一个“组队”里，对齐可以告诉用户他们之间还是存在某种联系。"
      ],
      [
        "p",
        [
          "strong",
          "流程顺畅"
        ]
      ],
      [
        "p",
        "中后台项目用户主要是进行信息查询或完成任务，所以相比前台项目注重页面的点击，在后台项目中路径顺畅要比点击次数更重要，甚至需要用越少的有效点击完成页面任务。流程顺畅可以快速提升用户对页面的好感度。"
      ],
      [
        "p",
        [
          "strong",
          "简化认知"
        ]
      ],
      [
        "p",
        "为了让用户准确有效的获取到页面的信息，就需要减少对信息元素的误解，简化认知成本，尽量让页面信息直白展现。中后台并不需要太多的“内涵丰富”的概念来呈现内容，准确表述功能减少认知负担。"
      ],
      [
        "h2",
        "预览效果图"
      ],
      [
        "h3",
        "首页预览效果"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1bPH0eiqAXuNjy1XdXXaYcVXa-1680-2502.jpg",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "表格"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1X6H0eiqAXuNjy1XdXXaYcVXa-1680-1953.jpg",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "列表页"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB136D0eiqAXuNjy1XdXXaYcVXa-1680-1683.jpg",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "Dashboard 页"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1U6D0eiqAXuNjy1XdXXaYcVXa-1680-2179.jpg",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "氛围增强版"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1b0yKgLDH8KJjy1XcXXcpdXXa-1680-1953.jpg",
            "alt": null
          }
        ]
      ]
    ]
  },
  {
    "filename": "iceworks.md",
    "path": "iceworks",
    "title": "Iceworks 快速开始",
    "order": 3,
    "participle": {
      "title": "Iceworks 快速",
      "content": "com https 页面 index alicdn png 项目 img html tfs undefined center js 点击 创建 模板 block build 1424. 1964 Iceworks react css script json 调试 路由 启动 文件 配置 预览 新建 development code ICE src meta title 搭建 服务 文件夹 选择 地址 构建 目录 面板 使用 即可 安装 列表 完成 入口 type content cdn ref layout ice eslint generator package body rel div Visual Design link HTML 16.2.0 Code http CMS Studio visualstudio dom width umd head 编辑器 版本 当前 访问 项目管理 生成 对应 一个 布局 按钮 服务器 选中 打开 界面 打包 列出 开发 上线 资源 环境 发布 软件 后续 公共 进入 通用 组合 二次开发 示例 跳转 源码 一步 复制到 目前 editorconfig edge viewport 944. utf utils container www ua tps dev 4444 text 为空 tests sublimetext stylesheet React 新页面 config 文件名称 routes 1590. README chrome project production 1368. ponents 1968 patible pages public equiv page16 order npm mock 127.0.0.1 blocks macOS lock GUI layouts Windows jsx 1908 1250. WebStorm scss javascript 勾选 DOCTYPE Text image id md icon global 160. iceworks Page16 Atom 160 eslintignore 中未 eslintrc 2562 Sublime charset 1402 缩略图 yarn xxxx 快速 应用 易用 开发者 右下角 上图 鼠标 说明 业务 选区 强烈推荐 支持 版面 方式 组件 管理 站点 任一 所示 过程 存在 线上 默认 后台 上会 静态 样式 全局 右侧 前端 添加 在线 表示 忽略 识别 传到 模拟 标题 体积 三种 电脑 下方 辅助 定义 代码 下载 测试 输入 逻辑 依赖 自行 指定 优化 上方 覆盖 提示 修改 学会 部署 原有 可用 取消 移动 熟悉 两大 自动 名称 设置 性能 区别 编辑 平台 等待 避免 效果 风格 已有 之外 立即 推出 里面 简单 执行 推荐 操作 标准 最终 需求 方法 相对 看到 结构 数据 提供 得到 增加 之间 需要 包括 时间 出现 进行 已经 市场"
    },
    "jsonml": [
      "article",
      [
        "p",
        [
          "strong",
          "零环境搭建"
        ],
        " ",
        [
          "strong",
          "零配置"
        ],
        " ",
        [
          "strong",
          "简单易用"
        ]
      ],
      [
        "p",
        "Iceworks 是 ICE 推出的辅助开发者快速开发中后台前端应用的 GUI 软件，目前支持 macOS 和 Windows 两大平台。通过 ",
        [
          "a",
          {
            "title": null,
            "href": "#/iceworks"
          },
          "Iceworks"
        ],
        " 点击下载按钮即可。"
      ],
      [
        "h2",
        "创建项目"
      ],
      [
        "p",
        "软件启动后，项目列表为空，可通过的【创建项目】新建一个项目。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1SKFucbGYBuNjy0FoXXciBFXa-1964-1424.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "p",
        "界面会跳转到模板市场，目前提供三种模板进行选择，鼠标移动到指定的模板上，点击【以该模板创建项目】进入项目配置页面。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1MKBqcbGYBuNjy0FoXXciBFXa-1964-1424.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "新建一个文件夹或者选择已有的空文件夹（避免覆盖原有文件）。"
          ]
        ],
        [
          "li",
          [
            "p",
            "给项目起一个项目名，以便后续识别。"
          ]
        ]
      ],
      [
        "p",
        "点击【开始创建项目】即可开始创建"
      ],
      [
        "blockquote",
        [
          "p",
          "默认会在创建的时候同时安装项目依赖，时间上会相对久一些，也可取消勾选，后续自行安装"
        ]
      ],
      [
        "h2",
        "管理项目"
      ],
      [
        "p",
        "项目创建完成后，会自动添加到项目列表中，并打开当前项目管理面板。"
      ],
      [
        "p",
        "通过项目管理面板，可执行 ",
        [
          "strong",
          "启动调试服务"
        ],
        " ",
        [
          "strong",
          "新建页面"
        ],
        " ",
        [
          "strong",
          "构建项目"
        ],
        " 等操作。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1VlrAcntYBeNjy1XdXXXXyVXa-1964-1424.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "h2",
        "启动调试服务"
      ],
      [
        "p",
        "点击 ",
        [
          "code",
          "启动调试服务"
        ],
        " 等待完成后出现服务地址，点击可以预览当前项目。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1p6lCceSSBuNjy0FlXXbBpVXa-2562-1590.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "上图是一个 ICE Design CMS 模板启动后的预览效果。"
        ]
      ],
      [
        "h2",
        "新建页面"
      ],
      [
        "p",
        "启动调试服务后，可使用新建页面来搭建页面，通过 ",
        [
          "a",
          {
            "title": null,
            "href": "#/block"
          },
          "block"
        ],
        " 的组合完成页面的创建。"
      ],
      [
        "p",
        "进入 block 搭建界面"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB14dBQch9YBuNjy0FfXXXIsVXa-1908-1368.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "p",
        "上方列出了当前项目可用的 layout 布局方式，选中任一一个作为新页面的布局。"
      ],
      [
        "p",
        "下方列出了当前可选择的 blocks, 点击即可选择该 block 到已选区块列表中。"
      ],
      [
        "p",
        "右侧为选中 block 组合的缩略图预览。"
      ],
      [
        "p",
        "选择 layout 以及 block 后，点击右下角生成页面，会提示输入页面名，路由名，可以定义需要的名称，"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "页面名：表示生成的文件名称。"
          ]
        ],
        [
          "li",
          [
            "p",
            "路由名：表示页面的访问地址，可通过 ",
            [
              "code",
              "http://127.0.0.1:4444/#/xxxx"
            ],
            " 访问到对应的路由页面。"
          ]
        ]
      ],
      [
        "p",
        "示例中，创建了 ",
        [
          "code",
          "page16"
        ],
        " 访问后即可看到刚搭建的页面了。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1jfVncbSYBuNjSspiXXXNzpXa-1964-1424.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "h2",
        "进入开发调试"
      ],
      [
        "p",
        "点击项目版面上的 ",
        [
          "code",
          "编辑中打开"
        ],
        " 会立即使用设置中选择的编辑器打开项目，目前支持 ",
        [
          "a",
          {
            "title": null,
            "href": "https://code.visualstudio.com/"
          },
          "Visual Studio Code"
        ],
        "，",
        [
          "a",
          {
            "title": null,
            "href": "https://www.sublimetext.com/"
          },
          "Sublime Text 3"
        ],
        "，",
        [
          "code",
          "WebStorm"
        ],
        " 和 ",
        [
          "code",
          "Atom"
        ],
        " 等编辑器，推荐使用 ",
        [
          "a",
          {
            "title": null,
            "href": "https://code.visualstudio.com/"
          },
          "Visual Studio Code"
        ],
        "，如果你的电脑中未安装请先安装。"
      ],
      [
        "p",
        "项目目录结构说明："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "project-name\n├── build                                    // 打包资源\n├── mock                                    // 模拟数据\n├── public                                  // 静态资源\n├── src\n│   ├── components                          // 公共组件\n│   ├── config                              // 公共配置\n│   ├── layouts                             // 通用布局\n│   ├── pages                               // 页面\n│   ├── utils                               // 通用方法\n│   ├── global.scss                         // 全局样式\n│   ├── index.html                          // 入口模板\n│   ├── index.js                            // 应用入口\n│   └── routes.jsx                          // 路由入口\n├── tests                                   // 测试\n├── .editorconfig                           // 代码风格配置\n├── .eslintignore                           // eslint 忽略目录配置\n├── .eslintrc                               // eslint 配置\n├── generator.json                          // generator.json\n├── package.json                            // package.json\n├── README.md                               // 项目说明\n└── yarn.lock                               // 模板版本管理"
        ]
      ],
      [
        "p",
        "例如上一步已创建的 ",
        [
          "code",
          "Page16"
        ],
        " 页面："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1q6FtcbGYBuNjy0FoXXciBFXa-1968-1250.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "p",
        "通过二次开发增加业务逻辑，完成业务需求。"
      ],
      [
        "h2",
        "打包发布"
      ],
      [
        "p",
        "点击项目面板上的构建项目按钮，将开发的构建出最终的 js css 等资源。"
      ],
      [
        "p",
        "构建完成后，会在项目目录下生成 ",
        [
          "code",
          "build"
        ],
        " 文件夹，里面存在了 ",
        [
          "code",
          "index.html"
        ],
        " ",
        [
          "code",
          "index.js"
        ],
        " ",
        [
          "code",
          "index.css"
        ],
        " 文件。使用你熟悉的方式，上传到对应的 cdn 服务器。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1TYpHckyWBuNjy0FpXXassXXa-1402-944.png",
            "alt": "undefined | center"
          }
        ]
      ],
      [
        "h2",
        "部署上线"
      ],
      [
        "p",
        "上线过程即发布 HTML 文件的过程，",
        [
          "code",
          "index.html"
        ],
        " 文件存在在 ",
        [
          "code",
          "build"
        ],
        " 目录中，将 ",
        [
          "code",
          "index.html"
        ],
        " 文件复制到对应的服务服务器，并修改 html 源码中的 ",
        [
          "code",
          "/build/index.css"
        ],
        " 和 ",
        [
          "code",
          "/build/index.js"
        ],
        " 地址，是上一步中得到的 cdn 地址以及站点标题。"
      ],
      [
        "p",
        "一个标准的 HTML 文件如下所示："
      ],
      [
        "pre",
        {
          "lang": "html"
        },
        [
          "code",
          "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge,chrome=1\">\n  <link rel=\"icon\" type=\"image/png\" href=\"https://img.alicdn.com/tps/TB1kBU7NpXXXXXLXXXXXXXXXXXX-160-160.png\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>ICE Design CMS</title>\n<link href=\"./index.css\" rel=\"stylesheet\"></head>\n\n<body>\n  <div id=\"ice-container\"></div>\n  <script src=\"https://g.alicdn.com/code/npm/??react/16.2.0/umd/react.development.js,react-dom/16.2.0/umd/react-dom.development.js\"></script>\n<script type=\"text/javascript\" src=\"./index.js\"></script></body>\n\n</html>"
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "在线上环境我们强烈推荐使用 production 版本的 React，而不是 development 版本。它们之间的区别除了体积之外，还包括一些针对线上环境的性能优化。"
        ]
      ],
      [
        "p",
        "到这里你已经学会使用 Iceworks 创建一个项目并发布：）"
      ]
    ]
  },
  {
    "filename": "iceworks/custom-project-template.md",
    "path": "iceworks/custom-project-template",
    "title": "自定义项目模板",
    "category": "Iceworks",
    "order": 4,
    "participle": {
      "title": "自定义 模板 项目",
      "content": "配置 自定义 布局 alicdn img com tfs https 导航 模板 png 1368. 侧边 1909 页脚 默认 启用 项目 部分 Iceworks 包含 初始化 通栏 创建 生成 折叠 基础 固宽 全屏 不勾选 tYBeNjy1XdXXXXyVXa 属性 定位 主要 选择 对应 主题 点击 列表 容器 定制 选项 添加 是否 可能 新建 前提 皮肤 启动 px 572. order Redux iceworks 辅色 2.2.0 Mbox gif category Layout 主色 弹窗 Eslint Router 1908 title 1200 862 100 功能 从零开始 效果图 脚踏实地 页面 浅色 深色 组件 面板 不会 界面 需要 一个 样式 两个 实时 第一步 情况 宽度 右边 替换 左边 流程 版本 全新 接下来 有没有 答案 保存 已有 刚刚 之前 以下 了解 完成 看到 完全 提供 之后 一种 目前 进行 已经"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在 Iceworks 2.2.0 之前的版本，可以通过 ",
        [
          "code",
          "新建页面"
        ],
        " 时选择默认提供的 4 套布局去替换已有项目的布局，也可以通过布局列表的",
        [
          "code",
          "自定义布局"
        ],
        "功能进行自定义，然后添加到项目。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1ecZexQyWBuNjy0FpXXassXXa-1909-1368.png",
            "alt": "iceworks"
          }
        ]
      ],
      [
        "p",
        "然而，这些都是基于已经生成好的项目添加新的布局。那有没有一种可能，完全从零开始去自定义一个模板，答案是有的，你可以先从自定义布局开始初始化一个项目，甚至是自定义布局之后，在自定义选择 Router，Eslint，Redux，Mbox 等等，这都是有可能的。我们还是脚踏实地，先从第一步开始，来了解下 Iceworks 全新的自定义布局功能，如何从自定义布局开始初始化一个模板。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB17Virx_tYBeNjy1XdXXXXyVXa-862-572.gif",
            "alt": null
          }
        ]
      ],
      [
        "h2",
        "自定义创建流程"
      ],
      [
        "p",
        "在 ",
        [
          "code",
          "模板"
        ],
        " 界面选择 ",
        [
          "code",
          "自定义模板"
        ],
        "，点击新建弹窗如下，左边是属性配置面板，右边是配置的实时效果图，目前自定义主要包含以下四部分配置："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "基础配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "导航配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "侧边栏配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "页脚配置"
          ]
        ]
      ],
      [
        "h3",
        "基础配置"
      ],
      [
        "p",
        "基础配置主要包含",
        [
          "code",
          "布局容器配置"
        ],
        "、",
        [
          "code",
          "主题配置"
        ],
        "、",
        [
          "code",
          "定制皮肤"
        ],
        "三部分，其中："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "布局容器配置有全屏和固宽两个选项，全屏即 100% 宽度的布局，固宽默认是 1200px"
          ]
        ],
        [
          "li",
          [
            "p",
            "主题配置有深色和浅色两个选项，对应的是 Layout 部分的主题配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "定制皮肤主要是指配置基础组件的样式，可以选择主色和辅色"
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB10iEqxKuSBuNjy1XcXXcYjFXa-1909-1368.png",
            "alt": "基础配置"
          }
        ]
      ],
      [
        "h3",
        "导航配置"
      ],
      [
        "p",
        "导航配置主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        "、",
        [
          "code",
          "是否通栏"
        ],
        " 三部分。只有在启动的前提下才能配置对应的导航属性。在某些情况下，可能不需要导航，只要不勾选启用，则默认不会生成导航部分。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1YhXXx9BYBeNjy0FeXXbnmFXa-1909-1368.png",
            "alt": "导航配置"
          }
        ]
      ],
      [
        "h3",
        "侧边栏配置"
      ],
      [
        "p",
        "侧边栏配置主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "折叠"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        " 三部分。只有在启动的前提下才能配置对应的侧边栏属性。在某些情况下，可能不需要导航，只要不勾选启用，则默认不会生成导航部分。折叠则是指默认生成的布局侧边栏是否折叠。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1DOSnx_tYBeNjy1XdXXXXyVXa-1908-1368.png",
            "alt": "侧边栏配置"
          }
        ]
      ],
      [
        "h3",
        "页脚配置"
      ],
      [
        "p",
        "页脚配置与导航配置一样，主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        "、",
        [
          "code",
          "是否通栏"
        ],
        " 三部分。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1lHVnx21TBuNjy0FjXXajyXXa-1909-1368.png",
            "alt": "页脚配置"
          }
        ]
      ],
      [
        "h3",
        "创建项目"
      ],
      [
        "p",
        "配置完成后点击保存，可以看到刚刚配置的模板列表，接下来，你可以基于该模板初始化创建项目。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1yVfrxMmTBuNjy1XbXXaMrVXa-1909-1368.png",
            "alt": "创建项目"
          }
        ]
      ]
    ]
  },
  {
    "filename": "iceworks/import-exists-projet.md",
    "path": "iceworks/import-exists-projet",
    "title": "已有项目接入 Iceworks",
    "category": "Iceworks",
    "order": 3,
    "participle": {
      "title": "Iceworks 接入 已有 项目",
      "content": "ice 项目 json scaffoldConfig start build js Iceworks package 字段 描述 keywords custom scaffold type cli title react 调试 增加 使用 命令 接入 构建 框架 适配 示例 启动 文件 已有 project ICE pro 1920 png Design order bulmpOWBuNjy0FiXXXFxVXa 源相 alicdn img Pro 3. https 1080. design vue angular 1. tfs 2. com scripts screenshot Icewokrs 此字段 category 用于 模板 映射 物料 命令行 识别 定义 对应 规范 语言 工具 对象 当前 功能 服务 信息 需要 这是 两个 表示 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "将已有项目接入到 Icewokrs 中，需要增加对应信息的项目描述"
      ],
      [
        "h2",
        "1. 描述项目可被 Iceworks 识别"
      ],
      [
        "p",
        [
          "code",
          "package.json"
        ],
        " 文件 ",
        [
          "code",
          "keywords"
        ],
        " 字段增加 ",
        [
          "code",
          "ice-scaffold"
        ],
        " 表示这是一个适配 ice 规范的模板项目。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "{\n  \"name\": \"my-project\",\n  \"keywords\": [\"ice-scaffold\"],\n  // ...\n}"
        ]
      ],
      [
        "h2",
        "2. 描述项目使用的框架语言"
      ],
      [
        "p",
        [
          "code",
          "package.json"
        ],
        " 文件增加 ",
        [
          "code",
          "scaffoldConfig"
        ],
        " 字段对象，示例如下："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "{\n  // ...\n  \"scaffoldConfig\": {\n    \"type\": \"react\",\n    \"name\": \"ice-design-pro\",\n    \"title\": \"ICE Design Pro\",\n    \"screenshot\": \"https://img.alicdn.com/tfs/TB1_bulmpOWBuNjy0FiXXXFxVXa-1920-1080.png\"\n  }\n}"
        ]
      ],
      [
        "p",
        "其中 scaffoldConfig.type 字段描述当前项目所使用的框架名 ",
        [
          "code",
          "react"
        ],
        " ",
        [
          "code",
          "vue"
        ],
        " ",
        [
          "code",
          "angular"
        ],
        " 等，此字段用于与物料源相映射。"
      ],
      [
        "h2",
        "3. 描述启动调试和构建的命令"
      ],
      [
        "p",
        [
          "code",
          "package.json"
        ],
        " 里增加 start 和 build 命令, 这两个命令用于 ",
        [
          "strong",
          "启动调试服务"
        ],
        " ",
        [
          "strong",
          "构建项目"
        ],
        " 功能使用，你可以使用自己定义的命令行工具。"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "{\n  \"scripts\": {\n    \"start\": \"custom-cli start\",\n    \"build\": \"custom-cli build\"\n  }\n}"
        ]
      ]
    ]
  },
  {
    "filename": "iceworks/plubins-alioss.md",
    "path": "iceworks/plubins-alioss",
    "title": "插件-阿里云 OSS",
    "category": "Iceworks",
    "order": 1,
    "participle": {
      "title": "插件 OSS 阿里",
      "content": "AccessKey 插件 Bucket com img OSS tfs https alicdn png 阿里 上传 填写 2. 1. Iceworks 3. static bucket ID 用户 面板 点击 列表 存储 刷新 选择 传到 构建 提交 目录 输入 获取 对应 根目录 CDN order 1964 category 1908 4. 982 712. 1780 Secret 1424. 1052. 输入框 title 1368. URL 字段 缓存 右上角 看下 一键 资源 清空 下拉 小结 文件夹 以下 粘贴 完成 加密 按钮 数据 罗列 界面 接入 反馈 步骤 右边 删除 优先 引用 创建 重复 效率 提示 即可 账户 保存 陆续 平台 避免 将会 对象 相应 快速 应用 开发 成功 需求 发布 组成 看到 基础 提高 使用 之后 表示 主要"
    },
    "jsonml": [
      "article",
      [
        "p",
        "阿里云 OSS 插件可以一键将构建结果上传到您的 OSS bucket 中。"
      ],
      [
        "p",
        "首先看下基础界面:"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1bg8qx1SSBuNjy0FlXXbBpVXa-982-712.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "主要有以下字段组成："
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "阿里云用户 AccessKey"
          ]
        ],
        [
          "li",
          [
            "p",
            "Bucket 选择框"
          ]
        ],
        [
          "li",
          [
            "p",
            "存储目录"
          ]
        ]
      ],
      [
        "p",
        "阿里云用户 AccessKey 可以在您的账户下创建 AccessKey"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1MXFmxVOWBuNjy0FiXXXFxVXa-1780-1052.png",
            "alt": null
          }
        ]
      ],
      [
        "h2",
        "使用步骤："
      ],
      [
        "h3",
        "1. 填写 AccessKey ID / AccessKey"
      ],
      [
        "p",
        "将 AccessKey ID 和 AccessKey Secret 粘贴到插件面板相应输入框。"
      ],
      [
        "h3",
        "2. 获取 Bucket 列表"
      ],
      [
        "p",
        "点击 【Bucket 选择框】右边的刷新按钮，获取 Bucket 列表。"
      ],
      [
        "p",
        "刷新完成了可以下拉选择 Bucket ："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1bVhdxYSYBuNjSspiXXXNzpXa-1908-1368.png",
            "alt": null
          }
        ]
      ],
      [
        "h3",
        "3. 填写存储目录"
      ],
      [
        "p",
        "例如填写 ",
        [
          "code",
          "static"
        ],
        " 则表示将构建资源结果上传到对应 bucket 根目录下的 static 文件夹。"
      ],
      [
        "h3",
        "4. 提交上传"
      ],
      [
        "p",
        "上传成功后将会看到以下提示："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1BBVixYGYBuNjy0FoXXciBFXa-1964-1424.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "会罗列出所有上传完成的对象以及 URL。"
      ],
      [
        "h2",
        "小结"
      ],
      [
        "p",
        "通过",
        [
          "strong",
          "阿里云 OSS"
        ],
        " 面板可快速将资源提交到 CDN 上，之后在应用中引用即可，提高发布效率。同时插件会将用户的输入加密并保存到本地，避免重复输入，您也可以随时点击右上角的【清空数据】删除缓存的数据。"
      ],
      [
        "blockquote",
        [
          "p",
          "其他平台的插件会陆续接入到 Iceworks 中，如果您有需求可以反馈给我们，将会优先开发对应的上传插件。"
        ]
      ]
    ]
  },
  {
    "filename": "iceworks/plugins-proxy.md",
    "path": "iceworks/plugins-proxy",
    "title": "插件-代理配置",
    "category": "Iceworks",
    "order": 2,
    "participle": {
      "title": "插件 代理 配置",
      "content": "api 代理 http 127.0.0.1 请求 相对路径 json 接口 调试 配置 proxyConfig Iceworks 4444 path 6001 cookie getFoo 鉴权 js proxy 匹配 页面 后端 登录 绕过 维护性 规则 联调 示例 插件 com target package order category nose method catch 跨域 true 2. axios 1. fragment authority foo ferret response url 服务端 example title 8042 时写 err scheme 404 enable query API 字段 发出 功能 帐号 浏览器 服务 上文 文档 相关 方式 按钮 同源 注意事项 使用 点击 之后 前端 开头 问题 路径 访问 代码 提到 常见 编辑 失败 没有 理解 是从 策略 变成 两种 介绍 正常 操作 无法 解决 结束 最终 信息 考虑 以下 需求 程度 自然 方法 事情 提供 一定 进行"
    },
    "jsonml": [
      "article",
      [
        "p",
        "代理功能是前后端联调时很常见的需求，为了代码维护性考虑前端请求后端接口时写的都是相对路径如 ",
        [
          "code",
          "/api/getFoo.json"
        ],
        "，此时如果我们在本地通过访问",
        [
          "code",
          "http://127.0.0.1:4444"
        ],
        " 来调试页面，所有相对路径的 API 最终都会变成 ",
        [
          "code",
          "http://127.0.0.1:4444/api/getFoo.json"
        ],
        "，因为我们调试服务并没有提供这些接口，这些请求自然都会以 404 而结束。本文档介绍代理功能的使用方法。"
      ],
      [
        "h2",
        "操作方式"
      ],
      [
        "p",
        "以下两种方式都可以使用："
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "在 Iceworks 上点击代理配置的编辑按钮，进行代理配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "在 ",
            [
              "code",
              "package.json"
            ],
            " 中配置 ",
            [
              "code",
              "proxyConfig"
            ],
            " 字段："
          ],
          [
            "pre",
            {
              "lang": "js"
            },
            [
              "code",
              "{\n  ...\n  \"proxyConfig\": {\n    \"/**\": {\n      \"enable\": true,\n      \"target\": \"http://127.0.0.1:6001\"\n    }\n  }\n}"
            ]
          ]
        ]
      ],
      [
        "h3",
        "匹配规则"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "         foo://example.com:8042/over/there?name=ferret#nose\n         \\_/   \\______________/\\_________/ \\_________/ \\__/\n          |           |            |            |        |\n       scheme     authority       path        query   fragment"
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "code",
              "/"
            ],
            " 匹配所有规则"
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "code",
              "/api"
            ],
            " 匹配 path 以 ",
            [
              "code",
              "/api"
            ],
            " 开头的路径"
          ]
        ]
      ],
      [
        "h3",
        "代理示例"
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "axios({\n  url: '/api/proxy',\n  method: 'get',\n})\n  .then((response) => {})\n  .catch((err) => {});"
        ]
      ],
      [
        "p",
        "请求发出后将会被代理到 ",
        [
          "code",
          "http://127.0.0.1:6001/api/proxy"
        ]
      ],
      [
        "h3",
        "注意事项"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "代理之后我们可以通过相对路径的接口正常请求到后端服务，但是如果后端接口做了帐号登录鉴权之类的事情请求一样回失败，因为此时调试页面里并没有登录相关的 cookie 信息"
          ]
        ],
        [
          "li",
          [
            "p",
            "代理之后可以理解为请求是从服务端发出，因此绕过了浏览器的同源策略，一定程度可以解决跨域问题，但一样无法绕过上文提到的 cookie 鉴权等相关问题"
          ]
        ]
      ]
    ]
  },
  {
    "filename": "materials/add-block.md",
    "path": "materials/add-block",
    "title": "开发区块",
    "order": 3,
    "category": "物料",
    "participle": {
      "title": "开发区",
      "content": "区块 npm styles title Container style Login description com import src h3 https png Iceworks js index 物料 添加 const package container block json 目录 代码 生成 初始化 文档 开发 发布 输入 github javascript ice blocks jsx react cd categories bash 字段 截图 对应 必须 更新 说明 规范 模板 进行 配置 项目 数据 下载 简单 使用 描述 信息 名称 根目录 Edit React @icedesign version default start 2018 README ICE Block prop run md 1.0.0 export nlark materials url lark 20 author PropTypes blockConfig 71071 return reload types add deploy git CSS registry cdn devtools ExampleBlock 流程 进入 浏览器 用于 了解 片段 一个 分类 演示 站点 简介 需要 托管 可选 标题 形式 完成 窗口 看到 展示 相关 接下来 基础 参考 数据源 管理器 即可 皮肤 自动 详细 自定义 初步 信息结构 示例 打开 新增 一峰 预览 45 a00e6fa6 1543760395586 Use www files webpackr Style dd96 type css themeConfig a436a7bc screenshot http ruanyifeng repository repo My category publishConfig publish c8ac67876 public MicheleBertoli c3b plain MIT pkg 官网 c# order nse build nodejs dependencies 454 1543760347827 87 makedown JavaScript keywords JS keys arrow install a9a airbnb advanced html access Guide c1 e106c79a3d1 a77b 16.3.0 diff 表单 快速 运行 中文名 设计 正常 开发者 服务 实际 重新 主要 其本质 已经 驼峰 页面 发过 结构 按钮 写法 组件 应该 管理 保持一致 简练 表格 入门 图表 后会 模块 编码 点击 界面 开发区 沉淀 刷新 入口 步骤 编写 验证 再来 带上 版本 分享 含义 假设 定义 查看 这份 借助 印象 创建 提示 表达 以此 修改 规则 完整 包含 知识 方便 没有 主题 维护 启动 文件 补充 最新 机制 命令 第一个 上面 面对 之外 作者 刚刚 原则 类型 执行 推荐 介绍 功能 实际上 回到 希望 以下 选择 业务 利用 原因 一下 完全 方式 基本 提供 过程 存在 工作 不能 知道 可能"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "基础规范"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "区块名称: 大驼峰写法, 如 ",
            [
              "code",
              "ExampleBlock"
            ],
            ", 遵循简练能表达组件含义的原则"
          ]
        ],
        [
          "li",
          [
            "p",
            "基础编码码规范: ",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/airbnb/javascript"
              },
              "JavaScript Style Guide"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "CSS 规范: ",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/MicheleBertoli/css-in-js"
              },
              "CSS-in-JS"
            ]
          ]
        ]
      ],
      [
        "h2",
        "添加区块"
      ],
      [
        "p",
        "在快速入门中，大家应该有了初步的印象，接下来我们来了解如何开发一个自定义区块，进入初始化的项目，使用 ",
        [
          "code",
          "ice-devtools add"
        ],
        " 添加区块，添加流程的规则如下："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "➜ cd my-materials\n➜ ice-devtools add\n? 选择添加类型 (Use arrow keys)\n❯ 区块\n  模板\n\n// 必须输入\n? 名称(name)：\n\n// 必须输入\n? 中文名(title)：\n\n// 可选\n? version(1.0.0)\n\n// 必须输入\n? 描述(description)：\n\n// 必须输入\n？分类(categories):\n❯◯ 表格\n ◯ 表单\n ◯ 图表\n ◯ 其他\n\n// 可选\n？作者(author):"
        ]
      ],
      [
        "p",
        "根据提示输入对应的区块信息，添加完成后会在  ",
        [
          "code",
          "my-materials/blocks/"
        ],
        "  目录下新增一个区块，进入到该目录下，运行以下命令进行开发，假设初始化的区块为 ",
        [
          "code",
          "Login"
        ],
        " :"
      ],
      [
        "pre",
        {
          "lang": "plain"
        },
        [
          "code",
          "// 区块目录\n$ cd blocks/Login\n\n// 启动区块服务\n$ npm start"
        ]
      ],
      [
        "p",
        "运行 npm start 自动打开一个浏览器窗口如下："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/71071/1543760347827-a436a7bc-dd96-45c1-a77b-454c8ac67876.png",
            "alt": "block"
          }
        ]
      ],
      [
        "h2",
        "目录结构"
      ],
      [
        "p",
        "进入到我们刚刚初始化的区块，可以看到如下目录结构："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n├── README.md                  // 说明文档\n├── package.json               // pkg\n├── screenshot.png             // 区块截图\n└── src\n    └── index.jsx              // 区块代码片段入口"
        ]
      ],
      [
        "h4",
        "目文件说明"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "code",
              "src/index.jsx"
            ],
            ": 提供了基础的区块模板代码规范，方便快速开发一个区块"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "import React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@icedesign/Container'\n\nconst Login = () => {\n    return (\n      <Container style={styles.container}>\n        <h3 style={styles.title}>ICE Block</h3>\n        <p style={styles.description}>Edit src/index.js and save to reload.</p>\n      </Container>\n    )\n}\n\nconst styles = {\n  container: { ... },\n  title: { ...  },\n  description: { ...  }\n}\n\nexport default Login;"
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "package.json: 主要描述区块的信息"
          ]
        ]
      ],
      [
        "p",
        "在物料设计中区块以 npm 包的形式存在，但区块并不是一个完整的 npm 包，因为它不能通过 ",
        [
          "code",
          "npm install"
        ],
        " 的方式下载使用，其本质上只是代码片段，需要借助 Iceworks 下载生成到对应的项目中进行使用。 一个区块的 package.json 信息结构和正常 npm 包的形式是完全保持一致的，但除了遵循 npm 包的字段之外，还需要补充 blockConfig 字段，用于描述区块的名称，截图，标题，分类等信息，主要用于 Iceworks 和站点展示使用，在创建区块时这些字段会自动生成。"
      ],
      [
        "p",
        "设计成 npm 包的形式原因主要是利用 npm 的托管服务和版本管理功能对区块进行维护管理，同时会根据这些元数据生成对应的数据源，详细可以查看物料数据规范。"
      ],
      [
        "pre",
        {
          "lang": "javascript"
        },
        [
          "code",
          "{\n  \"name\": \"<%= name %>\",                   // 区块名\n  \"version\": \"1.0.0\",\n  \"description\": \"<%= description %>\",     // 区块描述\n  \"author\": \"\",\n  \"files\": [\n    \"src/\",\n    \"build\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/<%= repo %>/<%= name %>\" // git url\n  },\n  \"license\": \"MIT\",\n  \"keywords\": [\"block\"],\n  \"dependencies\": {\n    \"react\": \"^16.3.0\",\n  },\n  \"blockConfig\": {                     // 区块的相关配置，用于 Iceworks 和站点的展示\n    \"name\": \"<% name %>\",              // 名称 (必须)\n    \"title\": \"<% title %>\",            // 标题 (必须)\n    \"categories\": \"<% categories %>\"   // 分类 (必须）\n  },\n  \"publishConfig\": {\n    \"access\": \"public\",\n    \"registry\": \"<% registry %>\"       // npm 源\n  },\n}"
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "code",
              "README.md"
            ],
            ": 说明文档"
          ]
        ]
      ],
      [
        "p",
        "包含区块名、区块简介等基本字段，除此之外，你也可以按需添加其他说明，仅用于开发时作为参考文档使用。"
      ],
      [
        "pre",
        {
          "lang": "makedown"
        },
        [
          "code",
          "# ExampleBlock\n\n简介：示例区块"
        ]
      ],
      [
        "h2",
        "编写区块"
      ],
      [
        "p",
        "经过上面的步骤，对区块的定义应该有了初步的了解，接下来你可以按照实际的业务进行区块开发和区块沉淀。"
      ],
      [
        "p",
        "这里简单演示下，进入 ",
        [
          "code",
          "src/index.js"
        ],
        " ，将将初始化的区块模板代码进行简单的修改："
      ],
      [
        "pre",
        {
          "lang": "diff"
        },
        [
          "code",
          "import React from 'react';\nimport PropTypes from 'prop-types';\nimport Container from '@icedesign/Container'\n\nconst Login = () => {\n    return (\n      <Container style={styles.container}>\n-        <h3 style={styles.title}>ICE Block</h3>\n+        <h3 style={styles.title}>My first block</h3>\n        <p style={styles.description}>Edit src/index.js and save to reload.</p>\n      </Container>\n    )\n}\n\nconst styles = {\n  container: { ... },\n  title: { ...  },\n  description: { ...  }\n}\n\nexport default Login;"
        ]
      ],
      [
        "p",
        "回到浏览器窗口看到页面如下，说明你的第一个区块已经正常工作了，当然实际的区块开发可能并没有这么简单。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/71071/1543760395586-a00e6fa6-6a9a-4c3b-87cd-7e106c79a3d1.png",
            "alt": "block"
          }
        ]
      ],
      [
        "h2",
        "发布区块"
      ],
      [
        "p",
        "这里我们再来简单演示一下区块开发完成后，如何将新增的区块发布到 Iceworks 中，分享给其他的开发者进行使用。在上面对区块的 package.json 的详细介绍中我们知道，区块都是托管在 npm 上的，通过 npm 的机制进行发布和下载到项目中，因此发布区块的流程实际上也就是发布一个 npm 包的过程。"
      ],
      [
        "blockquote",
        [
          "p",
          "注：如果你还没有发过 npm 包或者对 npm 包的发布流程不了解，需要先简单了解下 npm 的相关知识，这里推荐 ",
          [
            "a",
            {
              "title": null,
              "href": "https://www.npmjs.com/"
            },
            "npm 官网"
          ],
          "  和阮一峰写的 ",
          [
            "a",
            {
              "title": null,
              "href": "http://javascript.ruanyifeng.com/nodejs/npm.html"
            },
            "npm 模块管理器"
          ],
          "。"
        ]
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "# 在 blocks/Login 目录下\n$ npm publish"
        ]
      ],
      [
        "h2",
        "生成数据"
      ],
      [
        "p",
        "区块发布完成后，我们需要重新生成物料源数据，以此更新对应的区块信息。在项目根目录下执行 ",
        [
          "code",
          "npm run deploy"
        ],
        " 即可重新生成并更新物料源数据。"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "# 在项目根目录下\n$ npm run deploy"
        ]
      ],
      [
        "h2",
        "验证数据"
      ],
      [
        "p",
        "当物料源更新后，我们打开 Iceworks 进入到区块界面，点击刷新按钮，如果看到对应的区块截图已经更新，即可说明区块的相关信息也已经更新。此时，下载到项目的代码也即是最新的区块代码。"
      ],
      [
        "h2",
        "皮肤配置"
      ],
      [
        "p",
        "如果希望在预览区块时，也带上皮肤配置，可以参考这份",
        [
          "a",
          {
            "title": null,
            "href": "#/advanced/webpackrc#主题配置%20-%20themeConfig"
          },
          "文档"
        ],
        "进行配置。"
      ]
    ]
  },
  {
    "filename": "materials/add-component.md",
    "path": "materials/add-component",
    "title": "开发业务组件",
    "order": 4,
    "category": "物料",
    "participle": {
      "title": "组件 开发 业务",
      "content": "组件 npm com js DEMO 目录 Login E7 https import md 添加 ice demo title ponents ExampleComponent github bash index React 输入 物料 根目录 发布 Component DOM add div CSS render E5 src cd order react Style devtools App deploy BB materials run javascript 流程 区块 可选 开发 初始化 文档 规范 演示 编写 项目 代码 必须 管理器 创建 进入 生成 修改 文件 一峰 AB Simple true README http MicheleBertoli start html B6 extends BC JavaScript dom 为例 81 JS description Guide yaml wiki 80 useage usage class css www 91 A8 scss author category ruanyifeng categories return 源中 publish version example E4 ponent plain arrow package alibaba Demo nodejs airbnb mountNode markdown main Use 官网 lib keys Usage B5 jsx 84 json E6 1.0.0 AC 表单 链路 中文名 信息 模板 了解 驼峰 发过 结构 数据 写法 基础 简练 表格 图表 使用 后会 模块 编码 默认 语法 用法 初始 样式 入口 构建 含义 假设 查看 一行 表达 提示 即可 对应 描述 更新 分类 规则 知识 名称 文字 启动 多个 新增 命令 上面 作者 每个 原则 类型 运行 一个 简单 执行 推荐 实际上 独立 说明 服务 重新 以下 选择 业务 形式 完成 位于 相关 调整 基本 过程 增加 需要 进行 没有"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "基础规范"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "组件名称: 大驼峰写法, 如 ",
            [
              "code",
              "ExampleComponent"
            ],
            ", 遵循简练能表达组件含义的原则"
          ]
        ],
        [
          "li",
          [
            "p",
            "基础编码码规范: ",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/airbnb/javascript"
              },
              "JavaScript Style Guide"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "CSS 规范: ",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/MicheleBertoli/css-in-js"
              },
              "CSS-in-JS"
            ]
          ]
        ]
      ],
      [
        "h2",
        "添加组件"
      ],
      [
        "p",
        "进入初始化的项目，使用 ",
        [
          "code",
          "ice-devtools add"
        ],
        " 添加组件，添加流程的规则如下："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "➜ cd my-materials\n➜ ice-devtools add\n? 选择添加类型 (Use arrow keys)\n  区块\n❯ 组件\n  模板\n\n// 必须输入\n? 组件名(name)：\n\n// 必须输入\n? 中文名(title)：\n\n// 可选\n? version(1.0.0)\n\n// 必须输入\n? 描述(description)：\n\n// 可选\n？分类(categories):\n❯◯ 表格\n ◯ 表单\n ◯ 图表\n ◯ 其他\n\n// 可选\n？作者(author):"
        ]
      ],
      [
        "p",
        "根据提示输入对应的组件信息，添加完成后会在  ",
        [
          "code",
          "my-materials/components/"
        ],
        "  目录下新增一个组件，进入到该目录下，运行以下命令进行开发，假设初始化的组件为 ",
        [
          "code",
          "Login"
        ],
        " :"
      ],
      [
        "pre",
        {
          "lang": "plain"
        },
        [
          "code",
          "// 区块目录\n$ cd components/Login\n\n// 启动组件服务\n$ npm start"
        ]
      ],
      [
        "h2",
        "目录结构"
      ],
      [
        "p",
        "组件的基本目录结构如下："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n├── README.md                  // 说明文档\n├── package.json   \n└── lib                        // 组件构建后的结果    \n│   └── index.js         \n└── src\n│   ├── index.js               // 组件入口\n│   ├── main.scss              // 组件自身的样式代码\n└── demo                        \n    └── useage.md              // 组件 demo"
        ]
      ],
      [
        "h2",
        "编写组件"
      ],
      [
        "p",
        "以上面创建的 ",
        [
          "code",
          "Login"
        ],
        " 组件为例，进入 ",
        [
          "code",
          "src/index.js"
        ],
        " , 修改初始代码，就可以开始组件的开发了。"
      ],
      [
        "h2",
        "编写 DEMO"
      ],
      [
        "p",
        "组件的 DEMO 演示文件，位于 ",
        [
          "code",
          "demo"
        ],
        " 目录下，使用 ",
        [
          "code",
          "yaml-markdown"
        ],
        " 语法。"
      ],
      [
        "p",
        "可以修改默认的 ",
        [
          "code",
          "usage.md"
        ],
        " ，来调整组件 DEMO，或通过增加 *.md 文件，来创建多个 DEMO。"
      ],
      [
        "p",
        "每个 DEMO 的形式如下："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "---\ntitle: Simple Usage\norder: 1\nimportStyle: true\n---\n\n本 Demo 演示一行文字的用法。\n\n````jsx\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\nimport ExampleComponent from 'example-component';\n\n\nclass App extends Component {\n\n  render() {\n\n    return (\n      <div>\n        <ExampleComponent />\n      </div>\n    );\n  }\n}\n\nReactDOM.render((\n  <App />\n), mountNode);"
        ]
      ],
      [
        "h2",
        "发布组件"
      ],
      [
        "p",
        "发布组件的流程实际上也就是发布一个 npm 包的过程。"
      ],
      [
        "blockquote",
        [
          "p",
          "注：如果你还没有发过 npm 包或者对 npm 包的发布流程不了解，需要先简单了解下 npm 的相关知识，这里推荐 ",
          [
            "a",
            {
              "title": null,
              "href": "https://www.npmjs.com/"
            },
            "npm 官网"
          ],
          "  和阮一峰写的 ",
          [
            "a",
            {
              "title": null,
              "href": "http://javascript.ruanyifeng.com/nodejs/npm.html"
            },
            "npm 模块管理器"
          ],
          "。"
        ]
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "# 在 components/Login 目录下\n$ npm publish"
        ]
      ],
      [
        "h2",
        "生成数据"
      ],
      [
        "p",
        "更新物料源中的组件信息，可以在项目根目录下执行 ",
        [
          "code",
          "npm run deploy"
        ],
        " 即可重新生成并发布物料源数据。"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "# 在项目根目录下\n$ npm run deploy"
        ]
      ],
      [
        "p",
        "附：独立的组件开发链路，可以查看",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/wiki/%E7%8B%AC%E7%AB%8B%E7%BB%84%E4%BB%B6%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B"
          },
          "文档"
        ]
      ]
    ]
  },
  {
    "filename": "materials/add-templates.md",
    "path": "materials/add-templates",
    "title": "开发模板",
    "order": 5,
    "category": "物料",
    "participle": {
      "title": "模板 开发",
      "content": "模板 页面 png build 配置 scripts com ice start Iceworks https src js 开发 脚手架 menuConfig cli vue 路由 约定 71071 npm nlark 2018 template routerConfig lark cdn json 构建 目录 导航 项目 必须 调试 run angular github package pages 脚本 文件 写入 应用 使用者 自定义 启动 asideMenuConfig dev index Dashboard 字段 工程 服务 输入 创建 对应 初始化 映射 规则 基础 物料 使用 用于 社区 提供 本质 路由表 需要 一套 目录名 工具 背后 上面 b243 1543818100357 AngularJs b1b6efe089d javascript 4793 8226 icon 飞冰中 d963b20c966c html home2 名会 af522d5d8c71 fb9c44 favicon 4019 f85b6d export Vue UI default a885fa26 1543817452170 dashboard 飞冰 7228 README vuejs d63bc07 tree alibaba tools title test templates 63 GUI const category public 1543818162318 c26a ponents Container path 4928 bbbf order bb8 最简 CLI 68 b9c 1543805991182 md master 481 b5565292e9b0 b4c4 makedown BasicLayout layouts 区块 进行 功能 效果图 最上层 开源 信息 组合成 结构 实现 面板 讲到 简介 用到 格式 调用 添加 路径 顶部 识别 定义 印象 接下来 新建 用户 声明 确保 原理 完整 布局 初步 大多数 命令 经常 简单 推荐 介绍 以下 处于 了解 形式 直接 完全 应该 存在 一个"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "简介"
      ],
      [
        "p",
        "在飞冰中，模板处于物料的最上层，通过区块、布局、页面可组合成模板，使用者可以直接基于模板进行项目开发；因此，模板开发的背后本质上是指开发一套基础的脚手架模板，提供给使用者作为基础工程进行项目初始化。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/71071/1543805991182-68f85b6d-c26a-4793-b4c4-b5565292e9b0.png",
            "alt": "templates"
          }
        ]
      ],
      [
        "h2",
        "模板开发规则"
      ],
      [
        "p",
        "模板开发遵循模开发规则，上面讲到这里的模板本质上是指开发一套基础的脚手架模板，提供给使用者作为基础工程进行项目初始化，因此，模板开发还需要遵循以下规则："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "脚本配置：通过 ",
            [
              "code",
              "start"
            ],
            " 和 ",
            [
              "code",
              "build"
            ],
            " 脚本启动调试服务、构建应用"
          ]
        ],
        [
          "li",
          [
            "p",
            "导航配置：通过 ",
            [
              "code",
              "src/menuConfig.js"
            ],
            " 配置导航"
          ]
        ],
        [
          "li",
          [
            "p",
            "路由配置：通过 ",
            [
              "code",
              "src/routerConfig.js"
            ],
            " 配置路由"
          ]
        ],
        [
          "li",
          [
            "p",
            "页面配置：通过 ",
            [
              "code",
              "src/pages"
            ],
            " 配置页面"
          ]
        ]
      ],
      [
        "h3",
        "配置",
        [
          "strong",
          "脚本"
        ]
      ],
      [
        "p",
        "脚手架模板约定 ",
        [
          "code",
          "package.json"
        ],
        "  里需要声明  ",
        [
          "code",
          "scripts"
        ],
        "  字段，且必须存在  ",
        [
          "code",
          "start:npm start"
        ],
        "  和 ",
        [
          "code",
          "build:npm run build"
        ],
        " 脚本，通过  ",
        [
          "code",
          "npm run start"
        ],
        "  与  ",
        [
          "code",
          "npm run build"
        ],
        "  可启动项目调试服务与应用构建功能。大家在使用 Iceworks 时，会经常用到 Iceworks 项目面板顶部的   启动调试服务、构建项目",
        "_",
        "_",
        " ",
        "_",
        "_",
        "等功能，其背后的原理则是通过 GUI 的形式去调用了 CLI 的命令。比如我们为飞冰项目提供的  ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/tree/master/tools/ice-scripts"
          },
          "ice-scripts"
        ],
        "。"
      ],
      [
        "p",
        "Iceworks 会识别模板中定义的  ",
        [
          "code",
          "scripts"
        ],
        "  字段中的 ",
        [
          "code",
          "start"
        ],
        " 和 ",
        [
          "code",
          "build"
        ],
        " 脚本启动调试服务、构建应用。在自定义模板中，我们推荐你使用 ice-scripts，  当然，你也可以自己去实现一个完整的项目构建工具，或者使用社区开源的构建工具，比如 Vue 社区大多数用户使用的 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/vuejs/vue-cli"
          },
          "vue-cli"
        ],
        " ，AngularJs 也有对应的  ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/angular/angular-cli"
          },
          "angular-cli"
        ],
        " 等。"
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "// 比如基于 ice-scripts 工程的配置\n\"scripts\": {\n  \"start\": \"ice dev\",\n  \"build\": \"ice build\"\n},\n\n// 比如基于 vue-cli 工程的配置\n\"scripts\": {\n  \"start\": \"vue dev\",\n  \"build\": \"vue build\"\n},"
        ]
      ],
      [
        "h3",
        "配置导航"
      ],
      [
        "p",
        "脚手架模板约定必须要有 ",
        [
          "code",
          "src/menuConfig.js"
        ],
        "  文件，用于配置应用的导航信息，在 Iceworks 创建页面时，输入的页面导航名会写入该文件："
      ],
      [
        "p",
        [
          "strong",
          "menuConfig 格式："
        ]
      ],
      [
        "pre",
        {
          "lang": "javascript"
        },
        [
          "code",
          "const asideMenuConfig = [\n    name: 'Dashboard',\n    path: '/dashboard',\n    icon: 'home2',\n]\n\nexport default asideMenuConfig;"
        ]
      ],
      [
        "p",
        [
          "strong",
          "Iceworks 配置效果图："
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/71071/1543817452170-0d63bc07-4bb8-481b-8226-3b1b6efe089d.png",
            "alt": "template"
          }
        ]
      ],
      [
        "h3",
        "路由配置"
      ],
      [
        "p",
        "脚手架模板约定必须要有 ",
        [
          "code",
          "src/routerConfig.js"
        ],
        "  文件，用于配置应用的路由信息，在 Iceworks 创建页面时，输入的路由路径会写入该文件："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/71071/1543818100357-a885fa26-4b9c-4019-b243-af522d5d8c71.png",
            "alt": "template"
          }
        ]
      ],
      [
        "h3",
        "页面配置"
      ],
      [
        "p",
        "脚手架模板约定必须要有 ",
        [
          "code",
          "src/pages"
        ],
        "  目录，用于在新建页面时添加页面到该目录下，在 Iceworks 创建页面时，输入的页面目录名会写入该目录下："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/71071/1543818162318-63fb9c44-7228-4928-bbbf-d963b20c966c.png",
            "alt": "template"
          }
        ]
      ],
      [
        "h2",
        "目录结构"
      ],
      [
        "p",
        "在上面的介绍中，大家对模板开发应该有了初步的印象，接下来我们简单了解下模板开发的目录约定。"
      ],
      [
        "pre",
        {
          "lang": "makedown"
        },
        [
          "code",
          "template\n├── src\n│   ├── components\n│   |   └── Container\n│   ├── layouts\n│   |   └── BasicLayout\n│   ├── pages (必须)\n│   |   └── Dashboard\n│   ├── routerConfig.js (必须)\n│   ├── menuConfig.js (必须)\n│   └── index.js\n├── package.json\n├── public\n|   ├── favicon.png\n|   └── index.html\n├── test\n├── package.json\n└── README.md"
        ]
      ],
      [
        "p",
        "如上只约定了模板开发的最简目录结构，只需要确保有必须的文件既可以，其他完全可以自定义约定和按需实现，比如如何根据 menuConfig 映射到对应的 UI，如果将 routerConfig 映射到对应的路由表等等。"
      ]
    ]
  },
  {
    "filename": "materials/devtools.md",
    "path": "materials/devtools",
    "title": "使用 ice-devtools",
    "order": 2,
    "category": "物料",
    "participle": {
      "title": "devtools ice 使用",
      "content": "物料 materials ice 模板 Iceworks 初始化 区块 https 自定义 目录 devtools com bash 项目 生成 git npm json react unpkg 工具 脚手架 示例 run add fusion init blocks cd scaffolds 开发者 快速 数据 开发 默认 进行 二次开发 根目录 接入 文件 结构 添加 alicdn template design Greeting github assets alibaba lite sync URL UI png mit io docs materilas 流程 一个 复用 约定 本质 安装 页面 包含 规范 组件 后台 初始 场景 选择 地址 支持 版本 统称 完成 代码 接下来 团队 官方 使用 即可 对应 一套 完整 布局 中心化 理解 命令 风格 满足 飞冰中 飞冰 generate lark ICE 935 install 2018 462 angular JSON http arrow gitignore block 8. 上能 feat af08 eslintrc eslintignore editorconfig Windows vue version Use title 71071 templates Eslint description macOS da0f9131a 2.0.0 push @icedesign d5e730c2 prettierignore package cdn org React order nodejs keys LTS 如飞冰 README nlark 复制粘贴 9743 category mkdir prettierrc build NSE md 1543576468368 子目录 项目名称 设计 名词解释 库内 之前 环境 业务 发布 片段 后记 发到 分析 直接 提供 面板 操作系统 私有 简介 编码 发现 界面 需要 搭建 对接 一定 沉淀 存放 注释 步骤 托管 抽象 自此 可能 展示 框架 访问 下载 日常 层面 新建 主要 重复 这类 描述 组合 保存 详细 设置 一段 一份 最低 维护 有利于 新增 检查 上面 配置 已有 方案 每个 刚刚 结合 原则 应用 运行 位置 简单 执行 介绍 操作 标准 看看 说明 同样 成功 实际 是否 建议 减少 以下 需求 程度 很大 系统 准备 大量 能力 看到 很多 基本 基础 提高 一次 要求 进入 之后 不同 形成 工作 两个 出现 已经"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "物料简介"
      ],
      [
        "p",
        "在飞冰中，组件、区块、布局、页面、模板统称为物料，由飞冰团队维护，基于这些物料结合 Iceworks 可以快速搭建中后台应用。"
      ],
      [
        "p",
        "在实际项目中，官方提供的物料源和设计风格可能不满足某些业务场景， 也可能你想基于已有的业务进行沉淀，形成一套自己团队风格的物料源，基于此我们提供了一套完整的开发规范和开发者工具 ice-devtools 来支持自定义物料源的能力，工具在设计层面是去中心化的方案，可以支持自定义接入 react 、vue 、angular 等不同框架物料，只需满足一定的约定和规范即可。"
      ],
      [
        "h2",
        "名词解释"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "物料：指组件、区块、布局、页面、模板的统称"
          ]
        ],
        [
          "li",
          [
            "p",
            "物料源：物料接入 Iceworks 的 URL 地址 ，本质上是一份 JSON 数据，如飞冰官方物料源 ",
            [
              "a",
              {
                "title": null,
                "href": "https://ice.alicdn.com/assets/react-materials.json"
              },
              "https://ice.alicdn.com/assets/react-materials.json"
            ]
          ]
        ]
      ],
      [
        "h2",
        "开发者工具"
      ],
      [
        "h4",
        "环境准备"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "操作系统：支持 macOS，Windows"
          ]
        ],
        [
          "li",
          [
            "p",
            "运行环境：建议选择  ",
            [
              "a",
              {
                "title": null,
                "href": "http://nodejs.org/"
              },
              "LTS 版本"
            ],
            "，最低要求 8.x。"
          ]
        ]
      ],
      [
        "h4",
        "安装工具"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "// 安装\n$ npm install ice-devtools -g\n\n// 检查是否安装成功\n$ ice-devtools -V\n=> 2.0.0"
        ]
      ],
      [
        "h2",
        "快速开始"
      ],
      [
        "h3",
        "初始化项目"
      ],
      [
        "p",
        "开始自定义物料之前，需要先使用 ice-devtools 初始化一个约定的物料项目，可以把它理解为在日常开始做项目之前，需要先约定好项目目录结构和开发规范，这里开发物料也是同样的原则。"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "// 新建物料项目\n$ mkdir my-materilas & cd my-materilas\n\n// 初始化物料项目\n$ ice-devtools init\n\n// 项目名称\n? materials name：\n\n// 选择初始的物料模板\n? materials template： (Use arrow keys)\n❯ @icedesign/ice-react-materials-template (React 标准模板)\n\n// 版本\n? materials version：\n\n// 描述\n? materials description："
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "注释：初始化的物料库内置了一个区块和模板，默认是已经发到 npm 上的，生成项目后可直接生成数据，这样有利于快速将物料添加到 Iceworks，完成一个基础的流程。"
        ]
      ],
      [
        "h3",
        "生成物料源"
      ],
      [
        "p",
        "完成初始化后，进入到项目根目录执行以下命令，可生成物料源数据："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ cd my-materials\n\n// 生成的物料源数据在 build 目录下\n$ npm run generate"
        ]
      ],
      [
        "p",
        "对于生成好的物料源数据，我们可以选择将这个文件 \b 托管到 ",
        [
          "a",
          {
            "title": null,
            "href": "https://fusion.design/"
          },
          "fusion"
        ],
        " 或 ",
        [
          "a",
          {
            "title": null,
            "href": "https://unpkg.com/#/"
          },
          "unpkg"
        ],
        " 上，来生成一个可访问的 URL。分别对应如下命令："
      ],
      [
        "p",
        "发布到 fusion"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ npm run sync"
        ]
      ],
      [
        "p",
        "发布到 unpkg"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ npm run sync-unpkg"
        ]
      ],
      [
        "p",
        "将对应的地址，复制粘贴到 Iceworks 设置面板的新增物料源位置，保存之后即可看到 Iceworks 的模板和区块界面出现了我们刚刚添加的自定义物料。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.nlark.com/lark/0/2018/png/71071/1543576468368-d5e730c2-af08-462e-9743-935da0f9131a.png",
            "alt": "Iceworks"
          }
        ]
      ],
      [
        "p",
        "自此，自定义物料到对接 Iceworks 的示例流程就基本完成，接下来我们来分析初始的目录结构。"
      ],
      [
        "h2",
        "目录结构"
      ],
      [
        "p",
        "接着上面的步骤，我们发现初始化的目录结构主要包含 blocks、scaffolds 这两个子目录， 这里针对每个目录做详细的说明："
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "my-materials/\n    │\n    ├── blocks                      // 区块\n    │      └── Greeting\n    │\n    ├── scaffolds                   // 脚手架模板\n    │      └── lite\n    │\n    ├── .editorconfig\n    ├── .eslintignore\n    ├── .eslintrc\n    ├── .gitignore\n    ├── .prettierignore\n    ├── .prettierrc\n    ├── LICENSE\n    ├── README.md\n    └── package.json"
        ]
      ],
      [
        "h4",
        "blocks"
      ],
      [
        "p",
        "通过对大量的中后台系统进行对比发现，在很多场景下 UI 的展示在很大程度上能进行一定的复用，我们对这类的需求抽象为区块，本质上可以理解为一段代码片段，可以通过工具 Iceworks 进行快速组合，直接下载到项目进行二次开发， 减少重复的 UI 编码工作，提高复用率，默认包含一个 Greeting 示例区块。"
      ],
      [
        "h4",
        "scaffolds"
      ],
      [
        "p",
        "该目录用来存放脚手架模板代码，初始化项目里默认包含示例 ice-design-lite 脚手架，一个模板脚手架本质上是一个完整的项目，你可以基于该模板进行二次开发，也可以通过工具自定义生成。"
      ],
      [
        "h4",
        "其他文件"
      ],
      [
        "p",
        "除了以上目录，其他根目录下的文件主要为配置型的文件，如 Eslint 等。"
      ],
      [
        "p",
        "生成项目目录结构后，我们可以先初始化 git 操作，进行一次 commit："
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "$ cd my-materials\n$ git init\n$ git add .\n$ git commit -m \"feat: init materials\"\n$ git push"
        ]
      ],
      [
        "h2",
        "后记"
      ],
      [
        "p",
        "这里我们只简单介绍了如何使用开发者工具快速初始化一个私有的物料项目，然后生成数据接入 Iceworks 的流程，以及对初始化目录的分析，接下来我们看看如何添加物料："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "a",
              {
                "title": null,
                "href": "https://alibaba.github.io/ice/docs/materials/add-block"
              },
              "区块开发"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "a",
              {
                "title": null,
                "href": "https://alibaba.github.io/ice/docs/materials/add-templates"
              },
              "模板开发"
            ]
          ]
        ]
      ]
    ]
  },
  {
    "filename": "materials/how-to-contribute.md",
    "path": "materials/how-to-contribute",
    "title": "如何贡献",
    "order": 7,
    "category": "物料",
    "participle": {
      "title": "贡献",
      "content": "ice com git 提交 物料 代码 devtools 飞冰 github add 修改 md mit https 文档 lint subject Pull Request materials React angular react alibaba CONTRIBUTING npm 添加 目录 开发 message master branch body blob docs run Vue type BLANK footer fix Closes scope js LINE clone json 区块 开发者 模板 分支 创建 规范 文件 主干 工具 贡献 类型 相关 团队 提供 对应 描述 合并 代码生成 源码 用户群 风格 changelog ExampleBlock cd category update format keys issue README history QrDFcIiPjSLDn3EL15IJygNPiHORgU1 Use index google bash Breaking 为例 arrow PR 测试用例 feat Commit tmp title edit test deps document block style src blocks source actor review ref OOAqWjiDU5Y 当有 chore xml push pulls checkout eslint pkg perf 官网 package origin xxx Change order 运行 清楚 功能 开源 选择 发布 重构 完成 准备 兼容 远远不够 必须 增加 后会 模块 语法 开发区 包括 格式 热爱 反馈 入口 影响 每周 仓库 删除 限于 修复 可不 含义 同步 关联 几种 查看 看起来 测试 输入 逻辑 官方 依赖 清晰 欢迎 提示 定期 生成 升级 安装 收到 更新 自动 性能 现有 适当 下面 维护 补充 避免 新增 检查 命令 体系 提升 共同 具体 目的 一句 说明 更加 理论 信息 希望 范围 以下 环境 支持 原因 因素 建设 项目 一起 很多 结构 基础 技术 应该 进入 使用 需要 问题 目前 进行 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "目前飞冰提供了基于 React 技术栈的物料，React 物料由飞冰团队维护，每周会定期更新。但在飞冰的用户群里，我们收到很多反馈，希望能提供对 Vue 的支持，为此，我们提供了开发者工具 ice-devtools，以及基础的 Vue 物料。当然，这对于物料体系来说，所做的远远不够，如果你热爱开源，欢迎与我们一起共同建设。"
      ],
      [
        "h2",
        "环境准备"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "// 安装开发者工具 ice-devtools\n$ npm i ice-devtools -g\n\n// clone 官方仓库\n$ git clone git@github.com:alibaba/ice.git"
        ]
      ],
      [
        "h2",
        "开发区块"
      ],
      [
        "p",
        "以开发 React 物料为例添加一个区块，首先进入 ice/react-materials 项目目录，通过 ",
        [
          "code",
          "ice-devtools add"
        ],
        " 命令选择需要添加的物料类型，根据提示输入对应的信息，添加完成后会在 ",
        [
          "code",
          "ice/react-materials/blocks"
        ],
        " 目录下新增对应的模板文件。"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "$ cd ice/react-materials\n$ ice-devtools add\n  ? 选择添加类型 (Use arrow keys)\n  ❯ 区块\n    模板"
        ]
      ],
      [
        "p",
        "目录结构如下："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n└── ExampleBlock\n    ├── README.md               // 说明文档\n    ├── package.json            // pkg.json\n    └── src                     // source 源码目录\n        └── index.js            // 模块入口"
        ]
      ],
      [
        "h2",
        "提交代码"
      ],
      [
        "h3",
        "提交 Pull Request"
      ],
      [
        "p",
        "如果你准备贡献代码，那么你可以创建分支修改代码提交 PR，飞冰开发团队会 review 代码合并到主干。"
      ],
      [
        "pre",
        {
          "lang": "bash"
        },
        [
          "code",
          "# 先创建开发分支开发，分支名应该有含义，避免使用 update、tmp 之类的\n$ git checkout -b branch-name\n\n# 开发完成后可以运行 lint 检查语法\n$ npm run lint\n\n# 提交代码，message 见下面的规范\n$ git add . # git add -u 删除文件\n$ git commit -m \"fix: add xxx block\"\n$ git push origin branch-name"
        ]
      ],
      [
        "p",
        "提交后就可以在 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/pulls"
          },
          "ice"
        ],
        " 创建 Pull Request 了。"
      ],
      [
        "h3",
        "代码风格"
      ],
      [
        "p",
        "你的代码风格必须通过 eslint，你可以运行 ",
        [
          "code",
          "$ npm run lint"
        ],
        " 本地测试。"
      ],
      [
        "h3",
        "Commit 提交规范"
      ],
      [
        "p",
        "根据 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/angular/angular.js/blob/master/CONTRIBUTING.md#commit-message-format"
          },
          "angular 规范"
        ],
        "提交 commit，这样 history 看起来更加清晰，还可以自动生成 changelog。"
      ],
      [
        "pre",
        {
          "lang": "xml"
        },
        [
          "code",
          "<type>(<scope>): <subject>\n<BLANK LINE>\n<body>\n<BLANK LINE>\n<footer>"
        ]
      ],
      [
        "p",
        "（1）type"
      ],
      [
        "p",
        "提交 commit 的类型，包括以下几种"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "feat: 新功能"
          ]
        ],
        [
          "li",
          [
            "p",
            "fix: 修复问题"
          ]
        ],
        [
          "li",
          [
            "p",
            "docs: 修改文档"
          ]
        ],
        [
          "li",
          [
            "p",
            "style: 修改代码格式，不影响代码逻辑"
          ]
        ],
        [
          "li",
          [
            "p",
            "refactor: 重构代码，理论上不影响现有功能"
          ]
        ],
        [
          "li",
          [
            "p",
            "perf: 提升性能"
          ]
        ],
        [
          "li",
          [
            "p",
            "test: 增加修改测试用例"
          ]
        ],
        [
          "li",
          [
            "p",
            "chore: 修改工具相关（包括但不限于文档、代码生成等）"
          ]
        ],
        [
          "li",
          [
            "p",
            "deps: 升级依赖"
          ]
        ]
      ],
      [
        "p",
        "（2）scope"
      ],
      [
        "p",
        "修改文件的范围"
      ],
      [
        "p",
        "（3）subject"
      ],
      [
        "p",
        "用一句话清楚的描述这次提交做了什么"
      ],
      [
        "p",
        "（4）body"
      ],
      [
        "p",
        "补充 subject，适当增加原因、目的等相关因素，也可不写。"
      ],
      [
        "p",
        "（5）footer"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "strong",
              "当有非兼容修改(Breaking Change)时必须在这里描述清楚"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "关联相关 issue，如 ",
            [
              "code",
              "Closes #1, Closes #2, #3"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "查看具体",
            [
              "a",
              {
                "title": null,
                "href": "https://docs.google.com/document/d/1QrDFcIiPjSLDn3EL15IJygNPiHORgU1_OOAqWjiDU5Y/edit"
              },
              "文档"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/alibaba/ice/blob/master/.github/CONTRIBUTING.md"
              },
              "CONTRIBUTING.md"
            ]
          ]
        ]
      ],
      [
        "h2",
        "发布"
      ],
      [
        "p",
        "当你提交的 Pull Request 被合并到主干后，我们会进行发布并将你贡献的物料同步在",
        [
          "a",
          {
            "title": null,
            "href": "#/"
          },
          "飞冰官网"
        ],
        "。"
      ]
    ]
  },
  {
    "filename": "materials/intro-material.md",
    "path": "materials/intro-material",
    "title": "物料简介",
    "order": 1,
    "category": "物料",
    "participle": {
      "title": "物料 简介",
      "content": "物料 飞冰 区块 模板 组件 搭建 布局 后台 应用 基础 提供 通栏 特定 已有 目前 jpg com 2048 light iceworks img Iceworks intro 飞冰中 1400. title alicdn tfs materials 55 order category dark 110 https 快速 开发 从零开始 开发者 复用 侧边 系统 组合而成 自建 共建 私有 达到 简介 两套 场景 抽象 顶部 统称 进行 团队 重复 效率 分类 组合 一套 完整 常用 规范 而成 常见 主题 维护 工具 模式 高度 满足 之外 体系 较为 结合 类型 提升 统一 通常 领域 参与 减少 需求 选择 业务 支持 为主 大量 使用 具有 不能"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在飞冰中，组件、区块、布局、模板等统称为物料，由飞冰团队维护，基于这些物料结合 Iceworks 可以快速搭建中后台应用。在此之外，如果已有的物料不能满足你的业务需求，我们提供了一套完整的开发规范和开发者工具，你可以参与共建飞冰物料，也可以自建私有的物料体系。"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "组件：最基础的物料，目前飞冰的基础组件达到 55+，具有高度可复用性。"
          ]
        ],
        [
          "li",
          [
            "p",
            "区块：通过对大量的中后台系统常用的场景进行分类、对比和抽象，基于基础组件组合而成，目前飞冰的区块达到 110+，可以通过 iceworks 进行快速组合搭建应用，减少重复的开发，提升效率。"
          ]
        ],
        [
          "li",
          [
            "p",
            "布局：在中后台系统中布局通常较为统一，以 顶部-侧边布局-通栏 模式为主，为此我们提供了 4+ 常见的布局，支持 light 和 dark 两套主题。"
          ]
        ],
        [
          "li",
          [
            "p",
            "模板：基于已有的区块搭建而成，目前提供了 4+ 的特定领域的模板，可以从零开始搭建应用，也可以选择特定类型的模板开始使用。"
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1uMkVnTtYBeNjy1XdXXXXyVXa-2048-1400.jpg",
            "alt": "intro materials"
          }
        ]
      ]
    ]
  },
  {
    "filename": "materials/material-specification.md",
    "path": "materials/material-specification",
    "title": "物料开发规范",
    "order": 6,
    "category": "物料",
    "participle": {
      "title": "物料 规范 开发",
      "content": "物料 飞冰 区块 模板 规范 数据 数据源 开发 ice com Iceworks materials https react design features json npm 组件 初始化 13 2018 pro 19 22 alicdn 03 source 字段 接入 生成 一套 预览 http title @icedesign type 源地址 开发工具 类型 描述 需要 提供 下载方式 通用 进行 React github sourceCodeDirectory description img screenshot version publishTime foo vue v1 devtools updateTime className categories tfs block basePackage assets registry api 947 ponents png 929. fusion alibaba homepage alifd Vue sites 0.1.0 英文名 地址 截图 版本 说明 脚手架 本质 详细 设计 选定 时间 中文 用于 了解 计划 参考 思路 最后 依赖 有没有 即可 修改 对应 分类 名称 布局 自定义 示例 文件 大概 Angular 5. PageDesc LayoutDesc html 2. JSON HTML 群里 dependencies container Grid GUI useComponents category tree tools Fusion bootstrap src Container blocks 4. scaffolds scaffold ComponetDesc repository JavaScript angular CSS preview 3. participle Bootstrap pages 官网 order 1. BlockDesc master layouts js AngularJS ScaffoldDesc io 分词 链路 闭环 开发者 主要 业务 发布 支持 加载 文档 完成 教程 页面 预设 专属 关系 面板 讲到 使用 编码 先来 格式 沉淀 存储 场景 步骤 添加 端的 抽象 目前 流程 搜索 来讲 框架 代码 约定 配套 下载 动手 至此 运作 指定 移动 完整 设置 常见 方便 下面 一份 大多数 前面 工具 模式 规划 相应 结合 位置 联系 思想 实际上 标准 服务 实际 信息 之前 相对 能力 一下 项目 基础 实现 过程 生产 不同 包括 一定 两个 知道 问题"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "飞冰设计思路"
      ],
      [
        "p",
        "在了解飞冰物料数据规范之前，我们先来大概了解一下飞冰的设计思路；在飞冰使用过程中，大多数开发者只需要下载 GUI 工具 Iceworks，然后按照文档教程进行项目开发即可。目前飞冰提供的物料数据源有 React 和 Vue 版本，然而，在飞冰开发群里常见的问题是有没有计划支持 AngularJS 版本，有没有移动端的支持计划等等。实际上，对飞冰来说，本质上一套通用的模式，只需要按照相应的数据规范生产物料、生成数据源，最后通过 Iceworks 接入即可。如果你计划接入一套新的框架物料，可以参考下面的步骤进行："
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "选定物料类型和开发规范"
          ]
        ],
        [
          "li",
          [
            "p",
            "物料初始化模板"
          ]
        ],
        [
          "li",
          [
            "p",
            "物料开发"
          ]
        ],
        [
          "li",
          [
            "p",
            "生成物料数据"
          ]
        ],
        [
          "li",
          [
            "p",
            "接入 Iceworks"
          ]
        ]
      ],
      [
        "h2",
        "物料类型和开发规范"
      ],
      [
        "p",
        "前面讲到，对飞冰来讲本质上是通过一套通用的数据规范结合 Iceworks 运作的，因此，选定物料类型你可以基于 React、Vue、Angular 甚至是 Bootstrap 等进行开发。"
      ],
      [
        "p",
        "开发规范主要是指开发物料时的编码规范，比如  ",
        [
          "code",
          "HTML"
        ],
        "、",
        [
          "code",
          "CSS"
        ],
        "、 ",
        [
          "code",
          "JavaScript"
        ],
        "  等基础规范。"
      ],
      [
        "h2",
        "物料初始化模板"
      ],
      [
        "p",
        "物料主要包括组件、区块、布局、模板等，在开发物料时，我们需要按照一定的初始化模板进行开发，因此需要先规划好物料类型以及通用的初始化模板。"
      ],
      [
        "h2",
        "物料开发"
      ],
      [
        "p",
        "物料开发即根据实际的业务场景进行组件、区块、模板的抽象进行沉淀，开发一套基于业务的专属物料。"
      ],
      [
        "p",
        "同时我们为开发物料提供了配套的物料开发工具，物料开发工具提供的能力主要是根据预设好的物料脚手架模板进行初始化，生成模板文件方便开发，同时提供预览，热加载等服务。详细可参考  ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/tree/master/tools/ice-devtools"
          },
          "飞冰物料开发工具 ice-devtools"
        ]
      ],
      [
        "h2",
        "生成物料数据源"
      ],
      [
        "p",
        "在物料开发完成时，需要生成对应的物料元数据，为 Iceworks 提供数据源。数据源本质上是一份 JSON 文件。如:"
      ],
      [
        "blockquote",
        [
          "p",
          "飞冰官网物料源地址： ",
          [
            "a",
            {
              "title": null,
              "href": "http://ice.alicdn.com/assets/react-materials.json"
            },
            "http://ice.alicdn.com/assets/react-materials.json"
          ],
          "\nFusion.design 物料源地址：",
          [
            "a",
            {
              "title": null,
              "href": "https://fusion.design/api/v1/sites/1/materials"
            },
            "https://fusion.design/api/v1/sites/1/materials"
          ]
        ]
      ],
      [
        "h2",
        "接入 Iceworks"
      ],
      [
        "p",
        "生成好物料数据源，只需要对应的数据源地址提供给 Iceworks, 在设置面板中添加即完成了完整链路的闭环。"
      ],
      [
        "h2",
        "物料数据规范"
      ],
      [
        "p",
        "飞冰",
        [
          "code",
          "物料数据规范"
        ],
        "是一套通用的描述物料的元数据的标准格式，规范约定了物料的类型、名称、物料数据、存储位置等信息。目前基于飞冰物料数据规范实现了 react-materials 和 vue-materials 两个版本的物料数据源。"
      ],
      [
        "h4",
        "数据规范"
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "{\n  \"name\": \"react-materials\",        // 名称\n  \"type\": \"react\",                  // 类型(vue、react、angular、bootstrap、etc）\n  \"components\": [<ComponetDesc>],   // 组件数据\n  \"blocks\": [<BlockDesc>],          // 区块数据\n  \"layouts\": [<LayoutDesc>],        // 布局数据\n  \"pages\": [<PageDesc>],            // 页面数据\n  \"scaffolds\": [<ScaffoldDesc>]     // 模板脚手架数据\n}"
        ]
      ],
      [
        "h4",
        "区块数据规范"
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "{\n  // (必)英文名\n  \"name\": \"foo-block\",\n\n  // (必)中文描述\n  \"title\": \"示例区块\",\n\n  // (可)区块详细说明\n  \"description\": \"\",\n\n  // (必) 区块的预览地址\n  \"homepage\": \"\"\n\n  // (必) 区块代码地址\n  repository: \"\"\n\n  // (必) source 字段描述区块下载方式\n  \"source\": {\n    \"type\": \"npm\",\n    \"npm\": \"@icedesign/foo-block\",\n    \"registry\": \"http://registry.npmjs.com\"\n    \"version\": \"0.1.0\",\n    \"sourceCodeDirectory\": \"src\",\n  },\n\n  // (必) 分类\n  \"categories\": [\"\"],\n\n  // (必) 截图\n  \"screenshot\": \"https://img.alicdn.com/tfs/TB1I67ih3vD8KJjy0FlXXagBFXa-947-929.png\",\n\n  // (必) 发布时间\n  \"publishTime\": \"2018-03-13 22:19\",\n\n  // (必) 最后修改时间\n  \"updateTime\": \"2018-03-13 22:19\",\n\n  // (必) 用于说明组件依赖关系\n  \"components\": {\n    \"@alifd/next\": \"^x.x.x\",\n  },\n\n  // (必) features\n  \"features\": {\n    // 分词, 用于搜索\n    \"participle\": { /* ... */ },\n\n    // 区块使用的组件\n    \"useComponents\": [{\n        \"basePackage\": \"@alifd/next\",\n        \"className\": \"Grid\"\n    },{\n        \"basePackage\": \"@icedesign/container\",\n        \"className\": \"Container\"\n    }]\n  }\n}"
        ]
      ],
      [
        "h4",
        "模板数据规范"
      ],
      [
        "p",
        "模板数据规范相对区块数据规范不同的是不需要指定 ",
        [
          "code",
          "sourceCodeDirectory"
        ],
        " 字段："
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "{\n  // (必)英文名\n  \"name\": \"ice-design-pro\",\n\n  // (必)中文描述\n  \"title\": \"pro 模板\",\n\n  // (可)区块详细说明\n  \"description\": \"\",\n\n  // (可)模板预览地址\n  \"homepage\": \"https://alibaba.github.io/ice/scaffold-preview/ice-design-pro.html\"\n\n  // (必) source 字段描述下载方式\n  \"source\": {\n    \"type\": \"npm\",\n    \"npm\": \"@icedesign/pro\",\n    \"version\": \"0.1.0\"\n  },\n\n  // (必) 分类\n  \"categories\": [],\n\n  // (必) 截图\n  \"screenshot\": \"https://img.alicdn.com/tfs/TB1I67ih3vD8KJjy0FlXXagBFXa-947-929.png\",\n\n  // (必) 发布时间\n  \"publishTime\": \"2018-03-13 22:19\",\n\n  // (必) 最后修改时间\n  \"updateTime\": \"2018-03-13 22:19\",\n\n  // (必) 用于说明组件依赖关系 (dependencies 字段)\n  \"features\": {},\n\n  // (可) features\n  \"features\": {}\n}"
        ]
      ],
      [
        "p",
        "至此，我们对飞冰的设计思想和物料数据规范有了大概的了解，如何自定义一套物料接入 Iceworks 的流程。如果你看完还是不知道如何开始动手，可以通过飞冰钉钉群联系我们。"
      ]
    ]
  },
  {
    "filename": "materials/sync-material.md",
    "path": "materials/sync-material",
    "title": "物料托管",
    "order": 8,
    "category": "物料",
    "participle": {
      "title": "物料 托管",
      "content": "物料 https design fusion Design Fusion npm run 根目录 自定义 v1 generate Iceworks xxxx api sites sync 源地址 materials 运行 使用 添加 托管 完成 静态数据 操作步骤 dev create site png idev order com html clear JSON img category 1200. http 1740 help 公网 alicdn title 缓存数据 tfs 开发工具 缓存 建站 文档 数据 提供 面板 站点 账号 之后 集成 清理 难题 同步 注册 访问 官方 本质 想要 用户 生成 描述 返回 设置 一份 命令 此后 放在 第一次 合作 具体 服务 实际 信息 内容 下来 能力 项目 建立 地方 发现 以后 需要 一个"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "物料托管"
      ],
      [
        "p",
        "在项目根目录，运行",
        [
          "code",
          "npm run generate"
        ],
        "之后。可以完成物料源静态数据的生成。\n关于物料的元数据描述，本质上是一份JSON数据， 可以放在任何可以提供http服务的地方。"
      ],
      [
        "p",
        "实际中，我们发现，提供公网可访问的物料源对于许多用户都是一个难题，为此我们和",
        [
          "a",
          {
            "title": null,
            "href": "https://fusion.design"
          },
          "Fusion Design"
        ],
        "合作. 集成",
        [
          "a",
          {
            "title": null,
            "href": "https://fusion.design"
          },
          "Fusion Design"
        ],
        "的能力到官方开发工具。"
      ],
      [
        "p",
        "运行",
        [
          "code",
          "npm run generate"
        ],
        "之后，可以在根目录运行 ",
        [
          "code",
          "npm run sync"
        ],
        "， 第一次使用需要到",
        [
          "a",
          {
            "title": null,
            "href": "https://fusion.design"
          },
          "Fusion Design"
        ],
        "注册账号并建立站点。具体操作步骤见\n",
        [
          "a",
          {
            "title": null,
            "href": "https://fusion.design/help.html#dev-create-site"
          },
          "Fusion Design 建站文档"
        ]
      ],
      [
        "p",
        "此后这些信息会缓存下来，想要清理这些缓存数据，可以使用",
        [
          "code",
          "idev clear"
        ],
        "。"
      ],
      [
        "h2",
        "使用物料"
      ],
      [
        "p",
        " ",
        [
          "code",
          "npm run sync"
        ],
        " 命令运行完成以后，会返回如下内容:"
      ],
      [
        "blockquote",
        [
          "p",
          "物料同步完成\n物料源地址: ",
          [
            "a",
            {
              "title": null,
              "href": "https://fusion.design/api/v1/sites/xxxx/materials"
            },
            "https://fusion.design/api/v1/sites/xxxx/materials"
          ],
          "\n请在 Iceworks 设置面板中添加自定义物料源 "
        ]
      ],
      [
        "p",
        "把物料源地址",
        [
          "code",
          "https://fusion.design/api/v1/sites/xxxx/materials"
        ],
        "， 添加到 Iceworks 自定义物料源就可以使用。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1o4AyxXzqK1RjSZFCXXbbxVXa-1740-1200.png",
            "alt": null
          }
        ]
      ]
    ]
  },
  {
    "filename": "materials/theme-config.md",
    "path": "materials/theme-config",
    "title": "支持主题能力",
    "order": 9,
    "category": "物料",
    "participle": {
      "title": "主题 支持 能力",
      "content": "变量 主题 color 主色 brand1 使用 换肤 能力 品牌 配置 fusion design import scss Tokens theme Design title sass 区块 一键 模板 常用 组件 视觉 支持 项目 参考 引入 对应 自定义 文件 buildConfig alifd hover 就会用 docs variables 飞冰 use tokens com advanced https ponent category order ICE 圆角 介绍 开发者 边框 重点 需求 业务 文档 非常 提供 实现 物料 包里 用到 默认 列表 场景 多样化 步骤 本文 限于 构建 更换 代码 覆盖 即可 无论是 颜色 正确 有限 效果 完善 满足 背景 说明 实际 大量 持续 一点 几个 方式 之后 包括"
    },
    "jsonml": [
      "article",
      [
        "p",
        "飞冰（ICE）提供了主题配置能力、，以满足业务和品牌多样化的视觉需求，包括但不限于主色、圆角、边框等的视觉自定义配置。无论是组件、区块、模板还是业务项目里，只要在代码里正确的使用主题变量，就可以通过主题包的配置实现一键换肤。"
      ],
      [
        "p",
        "如果项目里有更换主题的需求，请参考文档 ",
        [
          "a",
          {
            "title": null,
            "href": "#/docs/advanced/use-theme"
          },
          "使用主题能力"
        ],
        "。本文重点介绍区块、组件、模板如何才能支持主题能力。"
      ],
      [
        "h2",
        "使用主题中的变量"
      ],
      [
        "p",
        "在对应 sass 文件中，先通过 ",
        [
          "code",
          "@import"
        ],
        " 方式引入变量文件，然后使用其中的 sass 变量即可："
      ],
      [
        "pre",
        {
          "lang": "scss"
        },
        [
          "code",
          "// 引入主题变量\n@import \"~@alifd/next/variables.scss\";\n\n// 使用主题变量\n.title {\n  color: $color-brand1-6;\n}"
        ]
      ],
      [
        "p",
        "可以使用的变量列表请参考 ",
        [
          "a",
          {
            "title": null,
            "href": "https://fusion.design/component/tokens"
          },
          "fusion.design Design Tokens"
        ],
        "。"
      ],
      [
        "p",
        "按照这个步骤之后，在项目构建时，就会用开发者配置的 ",
        [
          "code",
          "buildConfig.theme"
        ],
        " 包里对应变量覆盖掉默认变量，实现一键换肤的能力。"
      ],
      [
        "h2",
        "常用变量说明"
      ],
      [
        "p",
        "虽然 Design Tokens 提供了大量变量，但实际场景里用到的非常有限，这里介绍几个重点的变量："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "code",
              "$color-brand1-6"
            ],
            ": 品牌主色"
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "code",
              "$color-brand1-9"
            ],
            ": 深一点的品牌主色，常用来 hover 效果"
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "code",
              "$color-brand1-1"
            ],
            ": 非常浅的品牌主色，常用来支持背景颜色"
          ]
        ],
        [
          "li",
          [
            "p",
            "持续完善……"
          ]
        ]
      ]
    ]
  },
  {
    "filename": "others/qa.md",
    "path": "others/qa",
    "title": "常见问题 QA",
    "category": "其它",
    "order": 1,
    "participle": {
      "title": "常见问题 QA",
      "content": "span 页面 浏览器 com html content world Icon hello React https div png IE 添加 代码 自定义 跳转 node reactjs Demo extends alibaba return HTML org tfs 11 alicdn class jsx render WebStorm Set github const icon innerHTML modules Component url ICE ice Tab ref issues dangerouslySetInnerHTML img script 卡顿 编辑器 文件夹 输出 升级 文件 标签 使用 类似 上面 配置 需要 以下 内容 版本 参考 文件格式 碎小 自动 报错 常见问题 2. polyfill markets 64 QA head 484 2017 低版本 favicon exclude www environment x64px 官网 233 x32px docs IDEA title tbhome dangerouslysetinner shortcut 3. running taobao dom 1. requirements Hosts rel 4444. endif 1834 IE11 09 16 port category Dangerously blog 32 page 0. Map order new elements ali CDN lt v16 location react localhost link 26 javascript 82. updater 774. Something ico 帮助 可能 端口 转义 兼容 上传 网页 正方形 服务器 检索 提供 站点 索引 分辨率 节点 默认 字符串 细心 解析 占用 静态 反馈 步骤 如有 出现 当成 修复 参见 尤为 属性 优先 进行 尽可能 体积 目录 访问 同学 拿到 引入 缺少 依赖 想要 提示 特性 引导 安装 更新 原始 详细 设置 含有 最低 失败 启动 策略 里面 一个 安全 加上 操作 统一 处理 说明 资源 服务 现象 成功 考虑 支持 引起 方法 准备 持续 项目 看到 相关 应该 明显 要求 产生 显示 不会 方面 问题"
    },
    "jsonml": [
      "article",
      [
        "blockquote",
        [
          "p",
          "持续更新中...\n如有问题可以到 ",
          [
            "a",
            {
              "title": null,
              "href": "https://github.com/alibaba/ice/issues/new"
            },
            "https://github.com/alibaba/ice/issues/new"
          ],
          " 反馈"
        ]
      ],
      [
        "h2",
        "ICE 的浏览器兼容策略是什么"
      ],
      [
        "p",
        "由于 ICE 优先使用 React 16+，其需要的最低 IE 版本为 11，如果您需要在以下的版本使用，您可能需要引入一些 polyfill 来支持 ",
        [
          "code",
          "Map"
        ],
        ", ",
        [
          "code",
          "Set"
        ],
        " 等特性。参考",
        [
          "a",
          {
            "title": null,
            "href": "https://reactjs.org/blog/2017/09/26/react-v16.0.html#javascript-environment-requirements"
          },
          "React 官网说明"
        ],
        "。"
      ],
      [
        "p",
        "以下代码可以帮助你在低版本 IE 下自动跳转到我们提供的提示浏览器升级页面。当然您也可以使用自定义的浏览器升级页面。"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "<!--[if lt IE 11]>\n<script>location.href = \"//www.taobao.com/markets/tbhome/ali-page-updater\"; </script>\n<![endif]-->"
        ]
      ],
      [
        "p",
        "添加如上代码后，如果使用 IE11 及以下浏览器访问页面，则会自动跳转到统一引导升级浏览器的页面。"
      ],
      [
        "h2",
        "WebStorm/IDEA 编辑器卡顿现象"
      ],
      [
        "p",
        "由于项目在安装依赖后，产生文件夹 ",
        [
          "code",
          "node_modules"
        ],
        " 含有较多的碎小文件，编辑器在索引文件引起的卡顿。\nWebStorm 中尤为明显，可通过 exclude ",
        [
          "code",
          "node_modules"
        ],
        " 目录，不需要检索该文件夹下的内容。"
      ],
      [
        "h2",
        "如何设置网页在浏览器 Tab 上面的 Icon (favicon)"
      ],
      [
        "p",
        "细心的同学可能会看到页面在浏览器 Tab 上面会有自定义的 Icon："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "//img.alicdn.com/tfs/TB1ct6bPpXXXXXYXFXXXXXXXXXX-484-82.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "如果你想要在自己站点上面加上这个 Icon 可以按照如下步骤添加："
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "准备一个 Icon，文件格式可以为 ",
            [
              "code",
              ".png"
            ],
            " 或者 ",
            [
              "code",
              ".ico"
            ],
            "，正方形，分辨率可以是 32x32px 或者 64x64px 文件体积要求尽可能小。"
          ]
        ],
        [
          "li",
          [
            "p",
            "上传 CDN 拿到一个 url 或者在自己服务器配置静态资源服务"
          ]
        ],
        [
          "li",
          [
            "p",
            "在 HTML 页面 ",
            [
              "code",
              "<head>"
            ],
            " 标签里面添加如下代码：",
            [
              "code",
              "<link rel=\"shortcut icon\" href=\"your-icon-url\">"
            ],
            "\n",
            [
              "img",
              {
                "title": null,
                "src": "//img.alicdn.com/tfs/TB1IC53PpXXXXbmXVXXXXXXXXXX-1834-774.png",
                "alt": null
              }
            ]
          ]
        ]
      ],
      [
        "p",
        "这样就添加成功啦！"
      ],
      [
        "h2",
        "如何在页面显示原始的 HTML 内容"
      ],
      [
        "p",
        "出于安全方面的考虑，React 默认会将节点中 html 代码进行转义，比如："
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "class Demo extends Component {\n  render() {\n    const content = 'hello <span>world</span>';\n    return <div>{content}</div>;\n  }\n}\n\n// 输出 hello <span>world</span>"
        ]
      ],
      [
        "p",
        "如上，",
        [
          "code",
          "<span>"
        ],
        " 标签并不会在页面上被解析，而是被当成字符串输出了。React 提供了 ",
        [
          "code",
          "dangerouslySetInnerHTML"
        ],
        " 属性帮助我们进行类似 ",
        [
          "code",
          "innerHTML"
        ],
        " 的操作："
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "class Demo extends Component {\n  render() {\n    const content = 'hello <span>world</span>';\n    return <div dangerouslySetInnerHTML={{ __html: content }} />;\n  }\n}\n\n// 输出 hello world"
        ]
      ],
      [
        "p",
        "更多内容请参考 ",
        [
          "a",
          {
            "title": null,
            "href": "https://reactjs.org/docs/dom-elements.html#dangerouslysetinnerhtml"
          },
          "Dangerously Set innerHTML"
        ]
      ],
      [
        "h2",
        "出现端口已占用启动失败应该如何处理？"
      ],
      [
        "p",
        "当你出现类似 ",
        [
          "code",
          "Something is already running on port 4444."
        ],
        " 或类似的报错时，可能是由于 Hosts 配置缺少 ",
        [
          "code",
          "localhost"
        ],
        " 等相关配置。"
      ],
      [
        "p",
        "详细修复方法请参见：",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/issues/233"
          },
          "https://github.com/alibaba/ice/issues/233"
        ]
      ]
    ]
  },
  {
    "filename": "others/version-rules.md",
    "path": "others/version-rules",
    "title": "组件版本号规则",
    "order": 2,
    "category": "其它",
    "participle": {
      "title": "版本号 组件 规则",
      "content": "版本 版本号 foo 组件 patch 标识符 升级 依赖 2.0.30 向下兼容 2.0.0 开发者 安装 dependencies 0.1.0 BUG 2.1.0 minor js 规则 项目 自动更新 自动 表示 时则 API fix 构建 修正 优点 发布 固定 开发 问题 修订 存在 版本控制 包含 1. category Semver title semver ICE 如当 org npm order 3. https 0.3.1 2.0 2. 兼容 语义 功能性 一致性 用到 默认 不会 温馨 递增 手动 遵守 修复 代码 提示 特性 修改 更新 规范 含有 现有 维护 新增 相应 两种 保证 功能 以下 形式 完全 需要 目前 主要"
    },
    "jsonml": [
      "article",
      [
        "p",
        "ICE 的 npm 包默认遵守 ",
        [
          "a",
          {
            "title": null,
            "href": "https://semver.org/"
          },
          "Semver"
        ],
        " 语义化版本 2.0 的规则。"
      ],
      [
        "h2",
        "版本号规则"
      ],
      [
        "p",
        "组件的版本以 ",
        [
          "code",
          "major.minor.patch"
        ],
        " 形式表示 ",
        [
          "code",
          "主版本号.次版本号.修订号"
        ],
        " 比如： ",
        [
          "code",
          "0.1.0"
        ],
        " ",
        [
          "code",
          "0.3.1"
        ],
        "。"
      ],
      [
        "p",
        "版本号递增规则如下："
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "主版本号：不兼容的 API 修改，"
          ]
        ],
        [
          "li",
          [
            "p",
            "次版本号：向下兼容的功能性新增，"
          ]
        ],
        [
          "li",
          [
            "p",
            "修订号：向下兼容的问题修正。"
          ]
        ]
      ],
      [
        "h2",
        "版本控制规范"
      ],
      [
        "p",
        "目前项目内用到的主要有以下两种规则："
      ],
      [
        "h3",
        "patch 位自动升级"
      ],
      [
        "p",
        "标识符：",
        [
          "code",
          "~"
        ]
      ],
      [
        "p",
        "依赖版本表示为 ",
        [
          "code",
          "~0.1.0"
        ]
      ],
      [
        "p",
        "如："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "{\n  \"dependencies\": {\n    \"foo\": \"~2.0.0\"\n  }\n}"
        ]
      ],
      [
        "p",
        "当 ",
        [
          "code",
          "foo"
        ],
        " 发布了 ",
        [
          "code",
          "2.0.30"
        ],
        " 版本，表示做了向下兼容的问题修正（BUG fix 等）， 在开发与构建时则会安装 ",
        [
          "code",
          "2.0.30"
        ],
        "。"
      ],
      [
        "p",
        "如果 ",
        [
          "code",
          "foo"
        ],
        " 存在 ",
        [
          "code",
          "2.1.0"
        ],
        " 版本，根据标识符 ",
        [
          "code",
          "~"
        ],
        " 也不会安装此版本。"
      ],
      [
        "h4",
        "优点："
      ],
      [
        "p",
        "自动更新升级项目内组件依赖版本（patch），当组件开发者发布了新版本修复存在的现有问题，可自动升级。"
      ],
      [
        "h3",
        "minor 位自动升级"
      ],
      [
        "p",
        "标识符：",
        [
          "code",
          "^"
        ]
      ],
      [
        "p",
        "依赖版本表示为 ",
        [
          "code",
          "^0.1.0"
        ]
      ],
      [
        "blockquote",
        [
          "p",
          "温馨提示：包含 patch 自动升级"
        ]
      ],
      [
        "p",
        "如："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "{\n  \"dependencies\": {\n    \"foo\": \"^2.0.0\"\n  }\n}"
        ]
      ],
      [
        "p",
        "当 ",
        [
          "code",
          "foo"
        ],
        " 发布了 ",
        [
          "code",
          "2.0.30"
        ],
        " 版本，表示做了向下兼容的问题修正（BUG fix 等）， 在开发与构建时则会安装 ",
        [
          "code",
          "2.0.30"
        ]
      ],
      [
        "p",
        "如果 ",
        [
          "code",
          "foo"
        ],
        " 存在 ",
        [
          "code",
          "2.1.0"
        ],
        " 版本，根据标识符 ",
        [
          "code",
          "^"
        ],
        " 则会安装 ",
        [
          "code",
          "2.1.0"
        ],
        "。"
      ],
      [
        "h4",
        "优点："
      ],
      [
        "p",
        "自动更新升级项目内组件依赖版本（minor），当组件开发者发布了新的特性、API 等，可升级到相应的版本。同时也包含升级 （patch）的功能。"
      ],
      [
        "h3",
        "固定版本号"
      ],
      [
        "p",
        "固定版本号则需要项目开发者维护版本依赖，无标识符。"
      ],
      [
        "p",
        "如："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "{\n  \"dependencies\": {\n    \"foo\": \"2.0.0\"\n  }\n}"
        ]
      ],
      [
        "p",
        "表示只安装 ",
        [
          "code",
          "foo"
        ],
        " ",
        [
          "code",
          "2.0.0"
        ],
        " 版本，不会在开发与构建时安装其他版本。"
      ],
      [
        "h4",
        "优点："
      ],
      [
        "p",
        "项目内的组件依赖都是固定的版本，完全保证项目代码一致性。如当组件含有 BUG 时，需开发者手动刚更新组件依赖的版本。"
      ]
    ]
  },
  {
    "filename": "pro/authority.md",
    "path": "pro/authority",
    "title": "权限管理",
    "order": 8,
    "category": "ICE Design Pro",
    "participle": {
      "title": "权限 管理",
      "content": "权限 菜单 table 路由 authority 页面 模板 path 登录 用户 配置 访问 资源 控制 跳转 服务端 BasicLayout admin com routerConfig Authorized 数据 授权 表格 系统资源 basic const user AuthorizedRoute 403 menuConfig js layout ponent 管理 系统 按钮 组件 没有 进行 标识 默认 渲染 接口 准入 当前 设计 即可 对应 分离 需要 配置文件 获取数据 理解 竖向 ant order Dashboard 父级 ponents BasicTable icon https display check design URL dashboard cn Pro API 只须 默认首页 title ICE children Design pro category 菜单项 应用 优先级 一个 处理 结合实际 之前 提供 实现 中会 如需 先来 该项 过滤 后台 梳理 调用 拦截 前端 为准 细分 隐藏 属性 集合 同步 几种 传入 逻辑 角色 思路 本质 获取 得出 话题 生成 大于 返回 做法 合并 继承 通用 自动 包含 常用 图片 设置 常见 中有 文件 涉及 方案 经常 判断 概念 区域 内部 计算 状态 开发 操作 通常 拥有 确定 实际 只能 信息 明白 处于 业务 代表 一下 分析 方式 基本 基础 使用 不同 两个 主要"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在前后端分离设计中，权限管理是中后台应用中经常会涉及的一个话题，在分析模板中的权限管理之前，我们先来梳理下常见的权限管理指的是什么。"
      ],
      [
        "p",
        "在理解权限控制之前，需要明白两个概念：资源和权限。什么是资源，对于一个系统来说，系统内部的所有信息都可以理解为这个系统的资源。页面是资源、数据是资源、按钮是资源、图片是资源。而权限就是访问某个资源所需要的标识。无论系统的权限如何设计，在用户登录时，都可以计算得出用户所拥有的权限标识集合，也就确定了该用户能访问哪些系统资源，权限控制的本质是控制登录用户对于系统资源的访问，可以细分为一下几种方式："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "登录授权，用户没有登录只能访问登录页面，如果处于登录状态则跳转到当前用户的默认首页；"
          ]
        ],
        [
          "li",
          [
            "p",
            "路由授权，当前登录用户的角色，如果对一个 URL 没有权限访问，则跳转到 403 页面；"
          ]
        ],
        [
          "li",
          [
            "p",
            "数据授权，当访问一个没有权限的 API，则跳转到 403 页面；"
          ]
        ],
        [
          "li",
          [
            "p",
            "操作授权，当页面中某个按钮或者区域没有权限访问则在页面中隐藏"
          ]
        ]
      ],
      [
        "h2",
        "实际应用"
      ],
      [
        "p",
        "在前后端分离设计中，通常的做法是由服务端提供权限数据接口，前端根据接口数据做对应的路由拦截控制和页面数据的渲染。在模板中，我们使用 ",
        [
          "a",
          {
            "title": null,
            "href": "https://pro.ant.design/components/Authorized-cn/"
          },
          "Authorized"
        ],
        " 权限组件实现了基本的权限管理方案，你可以基于模板结合实际的业务进行开发，模板中主要包含菜单权限控制和路由权限控制。"
      ],
      [
        "h3",
        "菜单权限"
      ],
      [
        "p",
        "如需对某些菜单进行权限控制，只须对菜单配置文件 menuConfig  中的菜单项设置 authority 属性即可，代表该项菜单的准入权限，菜单生成文件中会默认调用 Authorized.check 进行判断处理。"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "const menuConfig = [\n ...\n {\n    name: '表格页',\n    path: '/table',\n    icon: 'table',\n    // authority: 'admin',  // 权限配置，如果子菜单没有配置，则子菜单继承这里的权限\n    children: [\n      {\n        name: '基础表格',\n        path: '/table/basic-table',\n        authority: 'admin',  // 优先级大于父级菜单\n      },\n      {\n        name: '常用竖向表格',\n        path: '/table/table-display',\n        authority: 'user',\n      }\n }\n ...\n]"
        ]
      ],
      [
        "h3",
        "路由权限（AuthorizedRoute）"
      ],
      [
        "p",
        "在模板中提供了 AuthorizedRoute 权限组件，实现思路是通过传入准入权限和当前用户的权限进行对比过滤掉没有权限的路由。可以在路由配置中配置权限，但菜单中配置的权限会自动同步到对应路由中，如果 routerConfig.js 中有不同的配置，路由控制以 routerConfig.js 的配置为准。"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "const routerConfig = [\n  ...\n  {\n    path: '/dashboard',\n    component: Dashboard,\n    layout: BasicLayout,\n    authority: 'admin',\n  },\n  {\n    path: '/table/basic-table',\n    component: BasicTable,\n    layout: BasicLayout,\n    authority: 'user',\n  }\n  ...\n]"
        ]
      ],
      [
        "p",
        "模板权限默认是配置在菜单中的，如果是需要从服务端获取权限数据，则可以在 BasicLayout 中获取数据，将服务端返回的数据和配置项进行合并处理即可，渲染逻辑是通用的。"
      ]
    ]
  },
  {
    "filename": "pro/build-deploy.md",
    "path": "pro/build-deploy",
    "title": "打包发布",
    "order": 9,
    "category": "ICE Design Pro",
    "participle": {
      "title": "打包 发布",
      "content": "index html png build meta css cdn title HTML js 文件 ice head body width ICE Design Pro com div content 构建 项目 服务器 上线 地址 发布 目录 对应 源码 复制到 category fc favicon 40 equiv yuque viewport e60c5f7d ua type rel bbab ref patible dev e5e589fc420 utf edge link lark images 8531 chrome DOCTYPE Iceworks container 2018 image id 71071 icon charset order https 1530782919320 http 文件夹 按钮 面板 站点 所示 过程 存在 使用 点击 打包 传到 标题 创建 生成 修改 学会 部署 熟悉 一步 里面 一个 开发 资源 服务 最终 完成 结构 方式 基本 得到 已经"
    },
    "jsonml": [
      "article",
      [
        "p",
        "点击项目面板上的构建项目按钮，将开发的构建出最终的  ",
        [
          "code",
          "js"
        ],
        " 、 ",
        [
          "code",
          "css"
        ],
        " 、 ",
        [
          "code",
          "images"
        ],
        "  等资源。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.yuque.com/lark/0/2018/png/71071/1530782919320-e60c5f7d-bbab-40fc-8531-3e5e589fc420.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "构建完成后，会在项目目录下生成  build  文件夹，里面存在了  ",
        [
          "code",
          "index.html"
        ],
        "、",
        [
          "code",
          "index.js"
        ],
        "、 ",
        [
          "code",
          "index.css"
        ],
        "  文件。使用您熟悉的方式，上传到对应的 cdn 服务器。"
      ],
      [
        "h2",
        "部署上线"
      ],
      [
        "p",
        "上线过程即发布 HTML 文件的过程，",
        [
          "code",
          "index.html"
        ],
        "  文件存在在  ",
        [
          "code",
          "build"
        ],
        "  目录中，将  index.html  文件复制到对应的服务服务器，并修改 html 源码中的  /build/index.css  和  /build/index.js 地址，是上一步中得到的 cdn 地址以及站点标题。"
      ],
      [
        "p",
        "一个基本的的 HTML 结构如下所示："
      ],
      [
        "pre",
        {
          "lang": "HTML"
        },
        [
          "code",
          "<!DOCTYPE html>\n<html>\n\n<head>\n  <meta charset=\"utf-8\" />\n  <meta http-equiv=\"x-ua-compatible\" content=\"ie=edge,chrome=1\">\n  <link rel=\"icon\" type=\"image/png\" href=\"favicon.png\">\n  <meta name=\"viewport\" content=\"width=device-width\">\n  <title>ICE Design Pro</title>\n</head>\n\n<body>\n  <div id=\"ice-container\"></div>\n</body>\n\n</html>"
        ]
      ],
      [
        "p",
        "到这里你已经学会使用 Iceworks 创建一个项目并发布：）"
      ]
    ]
  },
  {
    "filename": "pro/custom-template.md",
    "path": "pro/custom-template",
    "title": "自定义模板",
    "order": 10,
    "category": "ICE Design Pro",
    "participle": {
      "title": "自定义 模板",
      "content": "配置 自定义 https 布局 alicdn img com tfs 导航 模板 png 1368. 侧边 1909 页脚 默认 启用 部分 项目 包含 初始化 通栏 创建 生成 折叠 主题 基础 Iceworks 不勾选 全屏 固宽 tYBeNjy1XdXXXXyVXa 属性 定位 主要 选择 对应 点击 列表 容器 定制 选项 添加 是否 可能 新建 前提 皮肤 启动 custom 辅色 Mbox 1200 Pro Layout alibaba category 主色 2.2.0 advanced ICE 100 弹窗 theme 1908 Eslint px 572. order 862 io Design iceworks docs 10 Router ice title Redux github gif 功能 从零开始 效果图 配色 脚踏实地 页面 浅色 深色 组件 面板 不会 界面 需要 一个 样式 两个 实时 第一步 情况 宽度 右边 替换 左边 流程 版本 全新 查看 接下来 有没有 修改 答案 保存 详细 已有 刚刚 之前 以下 了解 完成 看到 完全 提供 之后 一种 目前 进行 已经"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在 Iceworks 2.2.0 之前的版本，可以通过 ",
        [
          "code",
          "新建页面"
        ],
        " 时选择默认提供的 4 套布局去替换已有项目的布局，也可以通过布局列表的",
        [
          "code",
          "自定义布局"
        ],
        "功能进行自定义，然后添加到项目。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1ecZexQyWBuNjy0FpXXassXXa-1909-1368.png",
            "alt": "iceworks"
          }
        ]
      ],
      [
        "p",
        "然而，这些都是基于已经生成好的项目添加新的布局。那有没有一种可能，完全从零开始去自定义一个模板，答案是有的，你可以先从自定义布局开始初始化一个项目，甚至是自定义布局之后，在自定义选择 Router，Eslint，Redux，Mbox 等等，这都是有可能的。我们还是脚踏实地，先从第一步开始，来了解下 Iceworks 全新的自定义布局功能，如何从自定义布局开始初始化一个模板。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB17Virx_tYBeNjy1XdXXXXyVXa-862-572.gif",
            "alt": null
          }
        ]
      ],
      [
        "h2",
        "自定义创建流程"
      ],
      [
        "p",
        "在 ",
        [
          "code",
          "模板"
        ],
        " 界面选择 ",
        [
          "code",
          "自定义模板"
        ],
        "，点击新建弹窗如下，左边是属性配置面板，右边是配置的实时效果图，目前自定义主要包含以下四部分配置"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "基础配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "导航配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "侧边栏配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "页脚配置"
          ]
        ]
      ],
      [
        "h4",
        "基础配置"
      ],
      [
        "p",
        "基础配置主要包含",
        [
          "code",
          "布局容器配置"
        ],
        "、",
        [
          "code",
          "主题配置"
        ],
        "、",
        [
          "code",
          "定制皮肤"
        ],
        "三部分，其中："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "布局容器配置有全屏和固宽两个选项，全屏即 100% 宽度的布局，固宽默认是 1200px"
          ]
        ],
        [
          "li",
          [
            "p",
            "主题配置有深色和浅色两个选项，对应的是 Layout 部分的主题配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "定制皮肤主要是指配置基础组件的样式，可以选择主色和辅色，详细可以查看",
            [
              "a",
              {
                "title": null,
                "href": "https://alibaba.github.io/ice/docs/advanced/custom-theme"
              },
              "修改主题配色\n"
            ]
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB10iEqxKuSBuNjy1XcXXcYjFXa-1909-1368.png",
            "alt": "基础配置"
          }
        ]
      ],
      [
        "h4",
        "导航配置"
      ],
      [
        "p",
        "导航配置主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        "、",
        [
          "code",
          "是否通栏"
        ],
        " 三部分。只有在启动的前提下才能配置对应的导航属性。在某些情况下，可能不需要导航，只要不勾选启用，则默认不会生成导航部分。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1YhXXx9BYBeNjy0FeXXbnmFXa-1909-1368.png",
            "alt": "导航配置"
          }
        ]
      ],
      [
        "h4",
        "侧边栏配置"
      ],
      [
        "p",
        "侧边栏配置主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "折叠"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        " 三部分。只有在启动的前提下才能配置对应的侧边栏属性。在某些情况下，可能不需要导航，只要不勾选启用，则默认不会生成导航部分。折叠则是指默认生成的布局侧边栏是否折叠。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1DOSnx_tYBeNjy1XdXXXXyVXa-1908-1368.png",
            "alt": "侧边栏配置"
          }
        ]
      ],
      [
        "h4",
        "页脚配置"
      ],
      [
        "p",
        "页脚配置与导航配置一样，主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        "、",
        [
          "code",
          "是否通栏"
        ],
        " 三部分。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1lHVnx21TBuNjy0FjXXajyXXa-1909-1368.png",
            "alt": "页脚配置"
          }
        ]
      ],
      [
        "h4",
        "创建项目"
      ],
      [
        "p",
        "配置完成后点击保存，可以看到刚刚配置的模板列表，接下来，你可以基于该模板初始化创建项目。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1yVfrxMmTBuNjy1XbXXaMrVXa-1909-1368.png",
            "alt": "创建项目"
          }
        ]
      ]
    ]
  },
  {
    "filename": "pro/data.md",
    "path": "pro/data",
    "title": "数据方案",
    "order": 7,
    "category": "ICE Design Pro",
    "participle": {
      "title": "方案 数据",
      "content": "USER LOGIN const return action isLoading state export FAILURE REQUEST type SUCCESS reducer payload actions constants login dispatch js UserLogin 模板 示例 Object redux case default static assign PRO 状态 mapDispatchToProps false yourproject withConnect userLoginFailure userLogin The response CONSTANT props YOUR Redux avoid userLoginRequest import object error withReducer params userLoginSuccess input initialState field loginReducer ACTION mapStateToProps 管理 功能模块 下面 登录 删除 目录 代码 使用 完整 文件 避免 USERNAME new Changes extends Actions Follow displayName weird defaultProps typos try data title switch Each super Reducer shouldn connect ref Design com reducers class render propTypes Pro category pose Action picks Creators picking corresponding text true param catch Container LoginReducer Component CHANGE async loginResult To knows key LoginConstants jsx Login ix accidentally YourContainer Constants injectReducer await YourComponent initial order index function ICE We An format form 例来 应用 主页 集中化 分型 组织 结构 百个 查找 提供 繁琐 模块 几十 不必要 权限 容器 一个 集成 注册 获取 用户 修改 过于 熟悉 方便 预测 唯一 方案 判断 简单 推荐 信息 选择 了解 完成 原因 大量 项目 数据 基础 过程 不同 需要 这是 起来 出现 发展"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在模板中，我们集成了 Redux 作为应用的状态管理，但这不是唯一的，你可以选择你熟悉的其他状态管理类的库。"
      ],
      [
        "h2",
        "使用"
      ],
      [
        "p",
        "在模板中，我们提供了基础的 redux 示例，避免使用起来过于繁琐和要删除大量不必要的代码。模板中完成了从 ",
        [
          "code",
          "注册 => 登录 => 获取用户信息 =》权限判断 =》 主页"
        ],
        " 的完整示例。下面以登录模块为例来了解我们是如何使用 redux 的。"
      ],
      [
        "h3",
        "分型结构"
      ],
      [
        "p",
        "我们推荐按照功能模块来组织我们的 redux 代码，如下结构，而不是把所有的 action 或者 reducer 集中化管理，避免项目在发展过程中一个 actions 目录下面出现几十甚至是上百个 action 文件，修改或者是删除一个文件需要在不同的目录下查找。这是我们按照功能模块来组织的最简单的原因之一。"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          ".\n├── UserLogin.jsx\n├── actions.js\n├── constants.js\n├── index.js\n└── reducer.js"
        ]
      ],
      [
        "h3",
        "状态容器"
      ],
      [
        "p",
        "Redux 可以方便的管理你的应用状态，提供可预测的状态管理，下面是模板中的一个完整示例："
      ],
      [
        "p",
        "Constants"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "/*\n * LoginConstants\n *\n * Each action has a corresponding type, which the reducer knows and picks up on.\n * To avoid weird typos between the reducer and the actions, we save them as\n * constants here. We prefix them with 'yourproject/YourComponent' so we avoid\n * reducers accidentally picking up actions they shouldn't.\n *\n * Follow this format:\n * export const YOUR_ACTION_CONSTANT = 'yourproject/YourContainer/YOUR_ACTION_CONSTANT';\n */\nexport const USER_LOGIN_REQUEST = 'PRO/USER_LOGIN_REQUEST';\nexport const USER_LOGIN_FAILURE = 'PRO/USER_LOGIN_FAILURE';\nexport const USER_LOGIN_SUCCESS = 'PRO/USER_LOGIN_SUCCESS';\n\n**Action Creators**\n\n/*\n * Login Actions\n */\n\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAILURE,\n} from './constants';\n\n\n/**\n * Changes the input field of the form\n *\n * @param  {name} name The new text of the input field\n *\n * @return {object}    An action object with a type of CHANGE_USERNAME\n */\nconst userLoginRequest = () => {\n  return {\n    type: USER_LOGIN_REQUEST,\n    isLoading: true,\n  };\n};\n\nconst userLoginSuccess = (payload) => {\n  return {\n    type: USER_LOGIN_SUCCESS,\n    payload,\n    isLoading: false,\n  };\n};\n\nconst userLoginFailure = (payload) => {\n  return {\n    type: USER_LOGIN_FAILURE,\n    payload,\n    isLoading: false,\n  };\n};\n\nexport const userLogin = (params) => {\n  return async (dispatch) => {\n    dispatch(userLoginRequest());\n    try {\n      const response = await login(params);\n      dispatch(userLoginSuccess(response.data));\n    } catch (error) {\n      dispatch(userLoginFailure(error));\n    }\n  };\n};"
        ]
      ],
      [
        "p",
        [
          "strong",
          "Reducer"
        ]
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "/*\n * LoginReducer\n *\n */\nimport {\n  USER_LOGIN_REQUEST,\n  USER_LOGIN_SUCCESS,\n  USER_LOGIN_FAILURE,\n} from './constants';\n\n// The initial state of the login\nconst initialState = {};\n\nfunction loginReducer(state = initialState, action) {\n  switch (action.type) {\n    case USER_LOGIN_REQUEST:\n      return Object.assign({}, state, {\n        isLoading: action.isLoading,\n      });\n    case USER_LOGIN_SUCCESS:\n      return Object.assign({}, state, {\n        isLoading: action.isLoading,\n        ...action.payload,\n      });\n    case USER_LOGIN_FAILURE:\n      return Object.assign({}, state, {\n        isLoading: action.isLoading,\n      });\n    default:\n      return state;\n  }\n}\n\nexport default loginReducer;"
        ]
      ],
      [
        "p",
        [
          "strong",
          "Container"
        ]
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "class UserLogin extends Component {\n  static displayName = 'UserLogin';\n\n  static propTypes = {};\n\n  static defaultProps = {};\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      ...\n    );\n  }\n}\n\nconst mapDispatchToProps = {\n  userLogin,\n};\n\nconst mapStateToProps = (state) => {\n  return { loginResult: state.login };\n};\n\nconst withConnect = connect(\n  mapStateToProps,\n  mapDispatchToProps\n);\n\nconst withReducer = injectReducer({ key: 'login', reducer });\n\nexport default compose(\n  withReducer,\n  withConnect\n)(UserLogin);"
        ]
      ]
    ]
  },
  {
    "filename": "pro/getting-started.md",
    "path": "pro/getting-started",
    "title": "开始使用",
    "order": 1,
    "category": "ICE Design Pro",
    "participle": {
      "title": "使用",
      "content": "配置 列表 ICE 表格 redux js com 入口 png ice reducers Design store img tfs json Block Dashboard GUI package https Iceworks react router v4 eslint design alicdn npm build 目录 展示 路由 服务器 组件 工具 图表 使用 忽略 基础 预览 configureStore routerConfig 1920 category 接口定义 2. pro 954 public ponents mock tests 404 500 run pages Component md menuConfig order axios api eslintignore eslintrc CLI 1080. layouts start index 为空 README dom 1. Pro 详情页 gitignore jsx webpack git utils title 403 src thunk editorconfig 684. 开发工具 区块 复用 资源 模板 内容 图文 卡片 海量 页面 出错 高质量 模块 打包 权限 后台 搭建 静态 登录 全局 进度 导航 模拟 构建 条款 注册 代码 下载 测试 函数 公共 特性 文章 通用 分类 一套 布局 失败 专业 启动 成熟 命令 异常 完善 协议 风格 快速 应用 推荐 设计 功能 综合 丰富 说明 不到 成功 业务 支持 项目 结构 数据 技术 进行"
    },
    "jsonml": [
      "article",
      [
        "p",
        "基于海量高质量可复用区块，通过 GUI 工具快速搭建的一套中后台模板。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1mHIID29TBuNjy0FcXXbeiFXa-1920-1080.png",
            "alt": null
          }
        ]
      ],
      [
        "h2",
        "特性"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "专业的设计支持: ICE Design"
          ]
        ],
        [
          "li",
          [
            "p",
            "成熟的基础组件: ICE Component"
          ]
        ],
        [
          "li",
          [
            "p",
            "丰富的业务模块: ICE Block"
          ]
        ],
        [
          "li",
          [
            "p",
            "完善的开发工具: Iceworks"
          ]
        ]
      ],
      [
        "h2",
        "技术点"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "icedesign"
          ]
        ],
        [
          "li",
          [
            "p",
            "react"
          ]
        ],
        [
          "li",
          [
            "p",
            "redux"
          ]
        ],
        [
          "li",
          [
            "p",
            "redux-thunk"
          ]
        ],
        [
          "li",
          [
            "p",
            "react-router-dom v4"
          ]
        ],
        [
          "li",
          [
            "p",
            "axios"
          ]
        ],
        [
          "li",
          [
            "p",
            "webpack v4"
          ]
        ],
        [
          "li",
          [
            "p",
            "etc..."
          ]
        ]
      ],
      [
        "h2",
        "功能"
      ],
      [
        "p",
        "按照 Dashboard 综合页和 Block 分类进行展示"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "- 登录/注册\n- Dashboard\n- 图表页\n  - 图表列表\n- 表格页\n  - 基础表格\n  - 展示型表格\n  - 表格列表\n- 列表页\n  - 文章列表\n  - 卡片列表\n  - 图文列表\n- 内容页\n  - 基础详情页\n  - 条款协议页\n  - 进度展示页\n- 结果页\n  - 成功\n  - 失败\n- 异常\n  - 403 无权限\n  - 404 找不到\n  - 500 服务器出错\n  - 内容为空"
        ]
      ],
      [
        "h2",
        "目录结构"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "ice-design-pro\n├── build       // 打包资源\n├── mock        // 模拟数据\n├── public      // 静态资源\n├── src\n│   ├── api                // 接口定义\n│   ├── components         // 公共组件\n│   ├── layouts            // 通用布局\n│   ├── pages              // 页面\n│   ├── store              // 全局 store\n│   ├── utils              // 工具函数\n│   ├── configureStore.js  // redux 入口配置\n│   ├── reducers.js        // reducers 入口配置\n│   ├── index.js           // 应用入口\n│   ├── menuConfig         // 导航配置\n│   ├── routerConfig       // 路由配置\n│   └── router.jsx         // 路由配置\n├── tests                  // 测试\n├── .gitignore             // git 忽略目录配置\n├── .editorconfig          // 代码风格配置\n├── .eslintignore          // eslint 忽略目录配置\n├── .eslintrc              // eslint 配置\n├── package.json           // package.json\n└── README.md              // 项目说明"
        ]
      ],
      [
        "h2",
        "使用"
      ],
      [
        "ol",
        [
          "li",
          [
            "p",
            "(推荐) GUI 工具使用: 下载 Iceworks\n",
            [
              "img",
              {
                "title": null,
                "src": "https://img.alicdn.com/tfs/TB1v7FtEh9YBuNjy0FfXXXIsVXa-954-684.png",
                "alt": null
              }
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "CLI 命令使用:"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "$ npm start      // 启动预览服务器\n$ npm run build  // 构建"
        ]
      ]
    ]
  },
  {
    "filename": "pro/layout.md",
    "path": "pro/layout",
    "title": "布局",
    "order": 2,
    "category": "ICE Design Pro",
    "participle": {
      "title": "布局",
      "content": "配置 布局 png 导航 自定义 侧边 页脚 com https 默认 1368. alicdn tfs img 包含 部分 启用 模板 页面 Iceworks 1909 基础 通栏 折叠 登录 不勾选 57 cdn lark 固宽 2018 全屏 yuque 71071 属性 定位 主要 生成 对应 主题 使用 容器 定制 选项 替换 是否 项目 提供 创建 前提 皮肤 启动 满足 主色 913 辅色 a8d6 a3 100 UserLayout title tYBeNjy1XdXXXXyVXa routerConfig 1531278003722 px pro 47 45 Pro js Layout LOGO ice 1200 f2150afc 325171343 f19 1531277934401 ed ICE e9589565ef design Design BasicLayout cc1027 order 97 114 category b7 1908 表单 功能 效果图 需求 内置 浅色 自带 深色 组件 面板 不会 界面 需要 骨架 样式 两个 实时 添加 情况 不能 宽度 右边 左边 顶部 可能 进行 注册 用户 更新 关键 风格 应用 两种 当前 成功 以下 选择 完成 之后 不同 目前 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "布局是一个应用的关键骨架所在，在使用 Iceworks 创建项目之后，默认使用模板自带的布局，如果当前模板布局不能满足需求，还可以使用 Iceworks 提供的自定义布局功能，添加布局到已创建的项目进行替换。"
      ],
      [
        "h2",
        "基础布局"
      ],
      [
        "p",
        "在 ice-design-pro 模板中，默认内置了用户登录页面和主页面两种不同风格的布局："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "UserLayout：登录注册页面的布局，包含 LOGO ，表单和页脚三部分"
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.yuque.com/lark/0/2018/png/71071/1531278003722-f2150afc-57b7-47a3-913d-97e9589565ef.png",
            "alt": null
          }
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "BasicLayout：登录成功后的主页面布局，包含顶部导航，侧边栏和页脚三部分"
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.yuque.com/lark/0/2018/png/71071/1531277934401-57cc1027-114a-45ed-a8d6-325171343f19.png",
            "alt": null
          }
        ]
      ],
      [
        "h2",
        "自定义布局"
      ],
      [
        "p",
        "当模板默认提供的布局不能满足需求时，可以使用 Iceworks 提供的自定义布局功能进行自定义；如下界面，左边是属性配置面板，右边是配置的实时效果图，目前自定义主要包含以下四部分配置:"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "基础配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "导航配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "侧边栏配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "页脚配置"
          ]
        ]
      ],
      [
        "h4",
        "基础配置"
      ],
      [
        "p",
        "基础配置主要包含",
        [
          "code",
          "布局容器配置"
        ],
        "、",
        [
          "code",
          "主题配置"
        ],
        "、",
        [
          "code",
          "定制皮肤"
        ],
        "三部分，其中："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "布局容器配置有全屏和固宽两个选项，全屏即 100% 宽度的布局，固宽默认是 1200px"
          ]
        ],
        [
          "li",
          [
            "p",
            "主题配置有深色和浅色两个选项，对应的是 Layout 部分的主题配置"
          ]
        ],
        [
          "li",
          [
            "p",
            "定制皮肤主要是指配置基础组件的样式，可以选择主色和辅色"
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB10iEqxKuSBuNjy1XcXXcYjFXa-1909-1368.png",
            "alt": "基础配置"
          }
        ]
      ],
      [
        "h4",
        "导航配置"
      ],
      [
        "p",
        "导航配置主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        "、",
        [
          "code",
          "是否通栏"
        ],
        " 三部分。只有在启动的前提下才能配置对应的导航属性。在某些情况下，可能不需要导航，只要不勾选启用，则默认不会生成导航部分。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1YhXXx9BYBeNjy0FeXXbnmFXa-1909-1368.png",
            "alt": "导航配置"
          }
        ]
      ],
      [
        "h4",
        "侧边栏配置"
      ],
      [
        "p",
        "侧边栏配置主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "折叠"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        " 三部分。只有在启动的前提下才能配置对应的侧边栏属性。在某些情况下，可能不需要导航，只要不勾选启用，则默认不会生成导航部分。折叠则是指默认生成的布局侧边栏是否折叠。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1DOSnx_tYBeNjy1XdXXXXyVXa-1908-1368.png",
            "alt": "侧边栏配置"
          }
        ]
      ],
      [
        "h4",
        "页脚配置"
      ],
      [
        "p",
        "页脚配置与导航配置一样，主要包含 ",
        [
          "code",
          "启用"
        ],
        "、",
        [
          "code",
          "定位"
        ],
        "、",
        [
          "code",
          "是否通栏"
        ],
        " 三部分。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1lHVnx21TBuNjy0FjXXajyXXa-1909-1368.png",
            "alt": "页脚配置"
          }
        ]
      ],
      [
        "p",
        "在自定义布局完成后，可以在 ",
        [
          "code",
          "routerConfig.js"
        ],
        " 替换和更新项目的布局配置。"
      ]
    ]
  },
  {
    "filename": "pro/mock.md",
    "path": "pro/mock",
    "title": "Mock 方案",
    "order": 6,
    "category": "ICE Design Pro",
    "participle": {
      "title": "Mock 方案",
      "content": "api js users params Mock index res function async id foo export axios return 接口 mock method req const POST url post 路由表 支持 启动 入口 项目 png data localhost http GET User 4444 login require 开发 目录 服务 文件 需要 前端 同步 数据 新建 即可 对应 自定义 根目录 对接口 可维护性 register profile postUserRegister postUserLogout Iceworks category order module b7f4 b39 logout b2ef7f30ed08 ICE API Home lark json HTTP CRUD import 前端开发 71071 ab5 a29 com getUserProfile cdn https DELETE projectName 62862 express4 Pro yuque Design exports xxx title 飞冰中 src 2018 send end 1531298503243 OK create 方案 功能模块 统一 浏览器 文件夹 模板 端口 归类 组织 后端 切换 地址 模拟 先行 假设 约定 引用 参考 环节 函数 参数 依赖 创建 分离 完整 不必 维护 有利于 工具 打开 配置 应用 保证 操作 标准 实际 完成 提供 管理 地方 重要 进行 一个"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在前后端分离的开发中，Mock 数据是前端开发中很重要的一个环节，前端可以不必强依赖后端接口，只需要约定好对应的数据接口，前端可以通过 Mock 模拟数据先行开发，在后端接口开发完成后，只需要切换对应的接口地址即可，可以保证项目的同步开发。"
      ],
      [
        "p",
        "在飞冰中，我们提供了完整的 Mock 方案，支持 CRUD 等操作，只需要在项目目录下新建 mock 文件夹，并配置入口文件 index.js 作为路由表的入口，在启动项目服务时工具会同步的启动 Mock 服务。"
      ],
      [
        "p",
        "新建路由表"
      ],
      [
        "p",
        "在项目根目录下创建 ",
        [
          "code",
          "projectName/mock/index.js"
        ],
        " 文件"
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "// mock/index.js\nconst foo = require('./foo.json');\nconst bar = require('./bar');\n\nmodule.exports = {\n  // 同时支持 GET 和 POST\n  '/api/users/1': foo,\n  '/api/foo/bar': bar(),\n\n  // 支持标准 HTTP\n  'GET /api/users': { users: [1, 2] },\n  'DELETE /api/users': { users: [1, 2] },\n\n  // 支持自定义函数，API 参考 express4\n  'POST /api/users/create': (req, res) => {\n    res.end('OK');\n  },\n\n  // 支持参数\n  'POST /api/users/:id': (req, res) => {\n    const { id } = req.params;\n    res.send({ id: id });\n  },\n};"
        ]
      ],
      [
        "p",
        "通过 Iceworks 启动项目服务，假设启动的端口是 ",
        [
          "a",
          {
            "title": null,
            "href": "http://localhost:4444/"
          },
          "http://localhost:4444"
        ],
        "，打开浏览器如下："
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://cdn.yuque.com/lark/0/2018/png/71071/1531298503243-62862b39-3a29-4ab5-b7f4-b2ef7f30ed08.png",
            "alt": null
          }
        ]
      ],
      [
        "h2",
        "实际应用"
      ],
      [
        "p",
        "在模板中我们将服务接口统一维护在 ",
        [
          "code",
          "src/api/index.js"
        ],
        " 中作为入口文件，有利于统一管理和可维护性，然后在需要引用的地方 ",
        [
          "code",
          "import { xxx } from '@api'"
        ],
        " 即可；当然，也可以按照功能模块对接口进行归类："
      ],
      [
        "p",
        "目录组织："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "// 目录组织：\n\n- api\n  - User.js\n  - Home.js\n  - index.js"
        ]
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "// User.js\n\nexport async function login(params) {\n  return axios({\n    url: '/api/login',\n    method: 'post',\n    data: params,\n  });\n}\n\nexport async function postUserRegister(params) {\n  return axios({\n    url: '/api/register',\n    method: 'post',\n    data: params,\n  });\n}\n\nexport async function postUserLogout() {\n  return axios({\n    url: '/api/logout',\n    method: 'post',\n  });\n}\n\nexport async function getUserProfile() {\n  return axios('/api/profile');\n}"
        ]
      ]
    ]
  },
  {
    "filename": "pro/nav.md",
    "path": "pro/nav",
    "title": "菜单设计",
    "order": 3,
    "category": "ICE Design Pro",
    "participle": {
      "title": "菜单 设计",
      "content": "导航 菜单 authority asideMenuConfig headerMenuConfig path 权限 配置 post 一级 true icon admin const 图标 路径 约定 文章 名称 二级 渲染 信息 管理 开窗口 edit src title 外链 create newWindow message Design alibaba menuConfig export com list 菜单栏 Iceworks children https Pro order category ice js github ICE external 设计 数据结构 用于 模板 是否 侧边 页面 写入 以下几点 详见 列表 准入 格式 反馈 添加 顶部 属性 进行 本质 即可 对应 描述 包含 设置 方便 一份 固定 新增 协议 应用 两种 位置 统一 目的 形式 代表 控制 结构 数据 关系 需要 一定 主要"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在模板中，菜单按照一定的约定进行配置，用来描述菜单栏的结构关系。菜单信息配置在 src/menuConfig.js 中，这样设计的目的主要有以下几点："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "菜单配置包含 headerMenuConfig 和 asideMenuConfig 两种形式，headerMenuConfig 用于顶部导航的渲染，asideMenuConfig 用于侧边栏导航的渲染，这样方便在统一的位置管理应用的导航信息"
          ]
        ],
        [
          "li",
          [
            "p",
            "如果需要对某些菜单进行权限控制，只需在对应的菜单配置项设置 authority 属性即可，代表该菜单的准入权限，详见 权限管理"
          ]
        ],
        [
          "li",
          [
            "p",
            "约定后的菜单数据结构本质上是一份固定的数据协议，在 Iceworks 新增页面时，也会按照约定的格式写入菜单信息。"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "const headerMenuConfig = [\n  ...\n  {\n    name: '反馈',                            // 导航名称\n    path: 'https://github.com/alibaba/ice', // 导航路径\n    external: true,                         // 是否外链\n    newWindow: true,                        // 是否新开窗口\n    icon: 'message',                        // 导航图标\n  },\n];\n\nconst asideMenuConfig = [\n  {\n    name: '文章管理',    // 一级导航名称\n    path: '/post',     // 一级导航路径\n    icon: 'edit',      // 一级导航图标\n    authority: ''      // 一级导航权限配置\n    children: [\n      {\n        name: '文章列表',     // 二级导航名称\n        path: '/post/list'  // 二级导航路径\n        authority: 'admin'  // 二级导航权限配置\n      },\n      {\n        name: '添加文章',\n        path: '/post/create'\n        authority: 'admin'\n      },\n    ],\n  }\n];\n\nexport { headerMenuConfig, asideMenuConfig };"
        ]
      ]
    ]
  },
  {
    "filename": "pro/new-page.md",
    "path": "pro/new-page",
    "title": "新增页面",
    "order": 5,
    "category": "ICE Design Pro",
    "participle": {
      "title": "页面 新增",
      "content": "页面 com alicdn tfs img png https 路由 Iceworks home 点击 模板 菜单 初始化 代码 Home OverviewBoard DataStatistics import 进行 新增 界面 项目 预览 788. props routerConfig ponents path Component Pro div Design src 1066 const 浏览器 选择 生成 实际操作 组件 设计 导航 完成 对应 二次开发 目录名 Ice static ICE ponent category return 954 state 菜单栏 render asideMenuConfig react 1947. WqVCrGYBuNjy0FoXXciBFXa HeaderAsideFooterLayout pages page 1910 order layout js super 684. icon React extends export class 3813 976. displayName default title 为例 className 区块 应用 说明 成功 信息 首页 一切正常 看到 关键所在 面板 调试 默认 后台 搭建 步骤 路径 任意 访问 接下来 下载 输入 新建 至此 依赖 提示 安装 常见 下面 启动 前面 打开 结合 很快 一个 操作 看看 回到 服务 以下 了解 整个 支持 利用 分析 基本 最后 使用 之后 发现 出现"
    },
    "jsonml": [
      "article",
      [
        "p",
        "在常见的中后台应用中，菜单和路由是整个应用的关键所在，前面我们分析了模板中的菜单设计和路由设计，这里结合 Iceworks 来进行实际操作，如何在项目中新增页面。来进行实际操作，如何在项目中新增页面。"
      ],
      [
        "p",
        "打开 Iceworks，在模板界面任意选择一个模板进行初始化，这里我们选择 Ice Design Pro 为例，点击使用该模板进行初始化"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1mjm1CuSSBuNjy0FlXXbBpVXa-954-684.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "初始化完成后按照提示进行依赖安装，在 Iceworks 项目面板点击 启动调试服务 进行预览，成功后在浏览器访问看到如下界面说明项目初始化成功\n",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB16UYoCv5TBuNjSspmXXaDRVXa-3813-1947.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "接下来，我们点击 新建页面 来新增一个页面到我们的项目，先进行区块选择\n!p[(",
        [
          "a",
          {
            "title": null,
            "href": "https://img.alicdn.com/tfs/TB143ArCv1TBuNjy0FjXXajyXXa-1066-788.png"
          },
          "https://img.alicdn.com/tfs/TB143ArCv1TBuNjy0FjXXajyXXa-1066-788.png"
        ],
        ")"
      ],
      [
        "p",
        "选择完成后，可以点击 预览页面 和 生成页面，这里我们点击生成页面操作，可以看到如下界面，支持输入以下信息："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "页面目录名"
          ]
        ],
        [
          "li",
          [
            "p",
            "路由路径"
          ]
        ],
        [
          "li",
          [
            "p",
            "页面导航名"
          ]
        ]
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1_WqVCrGYBuNjy0FoXXciBFXa-1066-788.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "在完成以以上步骤后，回到我们的浏览器发现对应的菜单栏出现了新增的导航信息，说明一切正常。"
      ],
      [
        "p",
        [
          "img",
          {
            "title": null,
            "src": "https://img.alicdn.com/tfs/TB1QRo2CqmWBuNjy1XaXXXCbXXa-1910-976.png",
            "alt": null
          }
        ]
      ],
      [
        "p",
        "最后，我们在来看看生成的代码"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "路由代码"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "// src/routerConfig.js\nconst routerConfig = [\n ...\n  {\n    path: '/home',\n    layout: HeaderAsideFooterLayout,\n    component: Home,\n  },\n ...\n]"
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "菜单代码"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "const asideMenuConfig = [\n  ...\n  {\n    name: '首页',\n    path: '/home',\n    icon: 'home',\n  },\n  ...\n]"
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "组件代码"
          ]
        ]
      ],
      [
        "p",
        "对应的页面组件代码默认会下载在 ",
        [
          "code",
          "src/pages/"
        ],
        " 下面："
      ],
      [
        "pre",
        {
          "lang": null
        },
        [
          "code",
          "import React, { Component } from 'react';\nimport OverviewBoard from './components/OverviewBoard';\nimport DataStatistics from './components/DataStatistics';\n\nexport default class Home extends Component {\n  static displayName = 'Home';\n\n  constructor(props) {\n    super(props);\n    this.state = {};\n  }\n\n  render() {\n    return (\n      <div className=\"home-page\">\n        <OverviewBoard />\n        <DataStatistics />\n      </div>\n    );\n  }\n}"
        ]
      ],
      [
        "p",
        "至此，在了解基本的菜单和路由设计之后，我们就可以很快的利用 Iceworks 进行页面搭建，并进行二次开发。"
      ]
    ]
  },
  {
    "filename": "pro/router.md",
    "path": "pro/router",
    "title": "路由设计",
    "order": 4,
    "category": "ICE Design Pro",
    "participle": {
      "title": "路由 设计",
      "content": "路由 com ponent path Route 布局 js router const div 配置 Router react BasicLayout 组件 item React Switch 渲染 user v4 routerConfig App UserLayout layout https 修改 PrimaryLayout list 页面 生成 对应 v3 exact HomePage return main index UsersPage Page header 模板 每个 自定义 src import github Layout children routerData BrowserRouter props 用户 登录 进行 中心化 入口 render document users IndexRoute tricks css Our Training className root Main primary getElementById blob Home noraml authority md map Users master PostList key jsx 实现 版本 加载 首页 写法 避免 不同 权限 主要 一个 设计 添加 重新 路径 注册 代码 进入 分离 每次 部分 规则 包含 示例 配置文件 文件 相同 上面 CardList history TODO guides category dom 27433116 zhuanlan docs zhihu xitu v2 有个 List ICE Pro title routesConfig gold register 官网 card post create browserHistory packages 4. order null article miner migrating Redirect NormalLayout NoramlLayout Design login UserRegister admin API Migrating UserLogin dashboard CreatePost UI 字段 嵌套 位置 推荐 具体 实际上 通常 看看 实际 集中化 信息 建议 来源 考虑 分布式 需求 基础知识 导致 菜单 顶层 挂载 几篇 完成 设计方案 项目 方式 数据 分组 管理 每条 使用 相较 列表 界面 中路 问题 匹配 单元 缺点 只会 任意 可能 同一个 提倡 来讲 约定 接下来 至此 分成 本质 创建 单独 重复 指定 总结 描述 做法 划分 文章 自动 一生 下面 没有 前面 有利于 关键 多个 新增 意味着 两种 之中 简单 当前 操作 一部分 目的 不再 容易 处理 解决 改变 三个 之前 以下 处于 分为 了解 支持 几乎 较大 位于 控制 一下 看到 分析 相关 结构 完全 关注 基本 基础 关系 一次 作用 之后 发现 发生 需要 一定 情况 这种"
    },
    "jsonml": [
      "article",
      [
        "h2",
        "路由配置"
      ],
      [
        "p",
        "在模板中，路由与菜单一样也是按照一定的约定进行配置，用来描述路由的结构关系。路由主要分为 路由配置 和 路由生成 两部分："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "路由配置：在 ",
            [
              "code",
              "src/routerConfig.js"
            ],
            " 中配置路由"
          ]
        ],
        [
          "li",
          [
            "p",
            "路由生成：在 ",
            [
              "code",
              "src/router.js"
            ],
            " 中生成路由"
          ]
        ]
      ],
      [
        "p",
        "这样设计的目的主要是分离路由配置信息和路由生成部分，配置和生成进行解耦，有利于在新增路由时只需要关注路由配置，除了顶层路由，其余路由列表都是自动生成，其中关键的就是中心化配置文件 ",
        [
          "code",
          "src/routerConfig.js"
        ],
        "，它的主要作用是："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "配置路由相关信息，可以配置对应路由的路径，渲染组件，权限，布局等字段；"
          ]
        ],
        [
          "li",
          [
            "p",
            "根据路由配置生成路由数据，并将路由数据挂载到每条路由对应的组件上；"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "const routesConfig = [\n  {\n    path: '/post',\n    layout: BasicLayout,\n    component: PostList,\n    children: [\n      {\n        path: 'list', // 路径\n        layout: BasicLayout, // 布局\n        component: PostList, // 组件\n        authority: 'user', // 权限\n      },\n      {\n        path: 'create',\n        layout: BasicLayout,\n        component: CreatePost,\n        authority: 'admin',\n      },\n    ],\n  },\n];"
        ]
      ],
      [
        "h2",
        "路由生成"
      ],
      [
        "h3",
        "基础知识"
      ],
      [
        "p",
        "模板中使用的是 React Router v4 版本，相较于 React Router 前面三个版本发生了较大的改变，在写法以及 API 上也完全不同；我们来对比一下 v3 和 v4 的写法："
      ],
      [
        "p",
        "在 v3 之前的版本，通常的做法是将路由规则集中化在一个位置进行配置，使他们与布局以及组件进行分离。当然，你也可以将路由划分成多个文件进行管理，但本质上都是以路由单元进行文件配置化，看一个简单的示例，包含首页和用户页面的路由配置："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// 代码来源：https://css-tricks.com/react-router-4/\nimport { Router, Route, IndexRoute } from 'react-router';\n\nconst PrimaryLayout = (props) => (\n  <div className=\"primary-layout\">\n    <header>Our React Router 3 App</header>\n    <main>{props.children}</main>\n  </div>\n);\n\nconst HomePage = () => <div>Home Page</div>;\nconst UsersPage = () => <div>Users Page</div>;\n\nconst App = () => (\n  <Router history={browserHistory}>\n    <Route path=\"/\" component={PrimaryLayout}>\n      {' '}\n      // Layout 配置\n      <IndexRoute component={HomePage} /> // 首页\n      <Route path=\"/users\" component={UsersPage} /> // 用户页面\n    </Route>\n  </Router>\n);\n\nrender(<App />, document.getElementById('root'));"
        ]
      ],
      [
        "p",
        "而在 v4 中不再提倡中心化的路由管理，推荐路由规则位于布局和 UI 组件本身。对比上面 v3 的路由，以下是在 v4 中的实现："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// 代码来源：https://css-tricks.com/react-router-4/\nimport { BrowserRouter, Route } from 'react-router-dom';\n\nconst PrimaryLayout = () => (\n  <div className=\"primary-layout\">\n    <header>Our React Router 4 App</header>\n    <main>\n      <Route path=\"/\" exact component={HomePage} /> // 路由配置在这里\n      <Route path=\"/users\" component={UsersPage} />\n    </main>\n  </div>\n);\n\nconst HomePage = () => <div>Home Page</div>;\nconst UsersPage = () => <div>Users Page</div>;\n\nconst App = () => (\n  <BrowserRouter>\n    <PrimaryLayout />\n  </BrowserRouter>\n);\n\nrender(<App />, document.getElementById('root'));"
        ]
      ],
      [
        "p",
        "对比上面的两种实现，我们可以看到，在 v4 中路由处于 ",
        [
          "code",
          "PrimaryLayout"
        ],
        " 之中，并不是通过 ",
        [
          "code",
          "props.children"
        ],
        " 来嵌套组件渲染，而是 ",
        [
          "code",
          "<Route>"
        ],
        " 组件分布式的在各个组件自身，如果路由匹配，则子组件就在对应的位置渲染。"
      ],
      [
        "p",
        "如果你还不太了解，可以先看看下面几篇推荐的文章："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/ReactTraining/react-router"
              },
              "react-router 官网"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/ReactTraining/react-router/blob/master/packages/react-router/docs/guides/migrating.md"
              },
              "Migrating from v2/v3 to v4"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/xitu/gold-miner/blob/master/TODO/all-about-react-router-4.md"
              },
              "[译]关于 React Router 4 的一切"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            [
              "a",
              {
                "title": null,
                "href": "https://zhuanlan.zhihu.com/p/27433116"
              },
              "React Router v4 几乎误我一生"
            ]
          ]
        ]
      ],
      [
        "h3",
        "具体使用"
      ],
      [
        "p",
        "接下来具体看看在模板中我们是如何来实现的；基于路由配置，可以发现每个对应的路由都可以配置一个单独的布局，可以是相同的也可以是不相同的布局，在这种情况下，意味着每个路由入口都包含了一个新的布局，实现如下："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "主路由入口:"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "import { routerData } from './routerConfig';\n\nconst router = () => {\n  return (\n    <Switch>\n      {routerData.map((item, index) => {\n        return <Route key={index} path={item.path} component={item.layout} />;\n      })}\n      <Redirect exact from=\"/\" to=\"/dashboard\" />\n    </Switch>\n  );\n};"
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "对应的布局中的路由实现"
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "// BasicLayout.jsx\n...\n<Layout.Main>\n  <Switch>\n    {routerData.map((item, index) => {\n      return item.component ? (\n        <Route\n          key={index}\n          path={item.path}\n          component={item.component}\n          exact={item.exact}\n        />\n      ) : null;\n    })}\n  </Switch>\n<Layout.Main>\n..."
        ]
      ],
      [
        "p",
        "这样我们将路由分成了两部分，一部分在主路由入口，主要控制布局的渲染；其次在布局中，通过 ",
        [
          "code",
          "<Route>"
        ],
        " 组件渲染当前布局对应的组件。但这样设计有个缺点，因为考虑到每个路由都可以支持不同的布局，实际上会导致在每次进入页面都会重新加载，要解决这个问题，可以通过自定义修改路由来避免。"
      ],
      [
        "h3",
        "自定义修改路由"
      ],
      [
        "p",
        "在实际项目中，可能你并没有为每个路由创建不同布局的需求，通常来讲可能只会有用户登录布局 (UserLayout) 和完成登录后进入主界面的基础布局(BasicLayout)，如果是这样，我们建议你对路由做一次修改，避免每次进入页面都会重新加载布局的问题，修改方式如下："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "修改 ",
            [
              "code",
              "routerConfig.js"
            ],
            " 的配置如下："
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "const routerConfig = [\n  {\n    path: '/',\n    component: BasicLayout,  // 主页面布局\n  },\n  {\n    path: '/list/article-list',\n    component: List,\n  },\n  {\n    path: '/list/card-list',\n    component: CardList,\n  }\n  {\n    path: '/user',\n    component: UserLayout,  // 用户登录注册页布局\n  },\n  {\n    path: '/user/login',\n    component: UserLogin,\n  },\n  {\n    path: '/user/register',\n    component: UserRegister,\n  },\n];"
        ]
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "修改 ",
            [
              "code",
              "router.js"
            ],
            " 的配置如下："
          ]
        ]
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "const router = () => {\n  return (\n    <Switch>\n      <Route path=\"/user\" component={UserLayout} /> // 用户登录注册页布局\n      <Route path=\"/\" component={BasicLayout} /> // 主页面布局\n    </Switch>\n  );\n};"
        ]
      ],
      [
        "p",
        "修改之后的路由配置主要是对路由按照布局进行了分组，然后在布局中渲染对应的路由，而不是为每个路由指定一个布局。通过修改，你也可以很容易的添加其他的布局，如添加一个 NormalLayout 如下："
      ],
      [
        "pre",
        {
          "lang": "jsx"
        },
        [
          "code",
          "// in routerConfig.js\n\nconst routerConfig = [\n ...\n {\n    path: '/',\n    component: BasicLayout,\n },\n {\n    path: '/user',\n    component: UserLayout,\n  },\n  {\n    path: '/noraml',\n    component: NoramlLayout,\n  },\n  ...\n]\n\n// in router.js\n<Switch>\n  <Route path=\"/user\" component={UserLayout} />\n  <Route path=\"/noraml\" component={UserLayout} />\n  <Route path=\"/\" component={BasicLayout} />\n</Switch>"
        ]
      ],
      [
        "p",
        "至此，模板中的路由设计方案基本分析完成，这里可以总结如下："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "考虑到每个路由都能配置任意不同的布局，在渲染的时候实际上是每个路由都会渲染对应的布局，但即使是同一个布局也会导致重新渲染。"
          ]
        ],
        [
          "li",
          [
            "p",
            "如果您的实际项目没有多布局的需求，建议通过自定义修改路由的方式进行处理，避免重复的渲染操作。"
          ]
        ]
      ]
    ]
  },
  {
    "filename": "upgrade-version.md",
    "path": "upgrade-version",
    "title": "组件升级 1.x 指南",
    "order": 4,
    "participle": {
      "title": "1. 组件 指南 升级",
      "content": "组件 1. 0. 升级 版本 飞冰 ref ix Fusion json 项目 ConfigProvider @icedesign/base alifd com package API nextfd 基础 改掉 样式 开源 代码 即可 业务 指南 替换成 https alibaba ponents theme wiki ice App github @icedesign 区块 使用 迭代 模板 变更 文档 适用 提供 物料 需要 切换 社区 冲突 团队 官方 版本号 主题 配置 问题 js ICE base build import nextP Component return render extends React dev class version upgrade title Layout themeConfig code skin className select jsx 包名 源会 break bugfix order 全量 biz 字段 链路 工程 本篇 进行 选择 混用 支持 现如今 映射 页面 直接 变化 共存 站点 保持一致 不同 更改 可控 打通 下文 定制 反馈 入口 深知 迁移 精力 隐藏 面向 于此 包装 可能 协商 更换 全新 几种 参考 依赖 指定 底部 伴随 特性 对应 之处 原有 包含 详细 遇到 暂时 避免 上面 相应 方案 体系 成本 保证 功能 正常 统一 不再 注意 整体 阶段 重新 用于 近期 之前 处于 需求 整个 发布 带来 相对 原因 大量 完全 一次 产生 最大 部分 之后 情况 目前 已经 没有"
    },
    "jsonml": [
      "article",
      [
        "p",
        "近期飞冰的基础组件 ",
        [
          "code",
          "@icedesign/base"
        ],
        " 做了一次大版本的升级，伴随着这次升级，官方提供的业务组件、区块、模板都已经做了相应升级，如果业务项目需要升级请参考本篇文档。为了保证使用 0.x 版本组件的项目还能正常迭代，飞冰站点支持 0.x/1.x 版本的切换，通过页面底部的 select 进行切换即可。"
      ],
      [
        "h2",
        "升级原因"
      ],
      [
        "p",
        "飞冰的基础组件由 Fusion 提供，在飞冰开源之处 Fusion 还未开源且基础组件处于 0.x 的阶段，因此与 Fusion 团队协商基于 0.x 组件包装成 ",
        [
          "code",
          "@icedesign/base"
        ],
        " 提供给社区使用，而现如今 Fusion 的基础组件已面向社区开源，并且对应的是 1.x 版本，因此整个飞冰体系会整体迁移到 1.x 版本："
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "组件版本变化：0.x -> 1.x，其中包含组件的 API 变更等"
          ]
        ],
        [
          "li",
          [
            "p",
            "组件包名变化：",
            [
              "code",
              "@icedesign/base"
            ],
            "(0.x) -> ",
            [
              "code",
              "@alifd/next"
            ],
            "(1.x)"
          ]
        ]
      ],
      [
        "p",
        "基础组件升级 1.x 之后，一方面飞冰与 Fusion 的物料源会完全打通，另一方面 1.x 会带来大量的新特性，于此同时 0.x 版本的组件目前只做 bugfix 不再做功能的迭代。"
      ],
      [
        "h2",
        "升级选择"
      ],
      [
        "p",
        "我们深知所有 break 版本的升级对于项目都是有成本的，因此这里针对项目的不同情况提供几种不同的选择："
      ],
      [
        "h3",
        "新项目直接基于 1.x"
      ],
      [
        "p",
        "适用于全新的项目，飞冰的官方物料（组件/区块/模板）已发布基于 1.x 的版本，按照原有链路直接使用即可"
      ],
      [
        "h3",
        "老项目全量升级 1.x"
      ],
      [
        "p",
        "适用于代码量相对可控并且有升级需求的项目，下文会有详细的升级文档"
      ],
      [
        "h3",
        "老项目 1.x&0.x 共存"
      ],
      [
        "p",
        "适用于 0.x 的老项目，暂时没有精力升级，但是又需要使用 1.x 的部分组件。",
        [
          "strong",
          "注意这个方案可能会有一些隐藏问题，如果遇到了，请反馈给 ICE 团队。"
        ],
        "1.x 和 0.x 混用最大的问题是组件样式可能会产生冲突，因此我们在工程上支持将 1.x 即 ",
        [
          "code",
          "@alifd/next"
        ],
        " 组件的 className 改掉，避免样式冲突问题："
      ],
      [
        "p",
        "首先在项目的入口代码处通过 ",
        [
          "code",
          "ConfigProvider"
        ],
        " 将所有组件 jsx 里的 prefix 改掉，prefix 请统一使用 ",
        [
          "code",
          "nextfd-"
        ],
        "："
      ],
      [
        "pre",
        {
          "lang": "js"
        },
        [
          "code",
          "import { ConfigProvider } from '@alifd/next';\n\nclass App extends React.Component {\n  render() {\n    return (\n      <ConfigProvider prefix=\"nextfd-\"> // 指定 prefix\n          // App code\n      </ConfigProvider>\n    );\n  }\n}"
        ]
      ],
      [
        "p",
        "然后通过工程配置将样式里的代码改掉（需要跟上面的 prefix 保持一致）："
      ],
      [
        "pre",
        {
          "lang": "json"
        },
        [
          "code",
          "// package.json\n{\n  \"themeConfig\": {\n    \"nextPrefix\": \"nextfd-\"\n  }\n}"
        ]
      ],
      [
        "p",
        "然后重新 dev/build 即可。"
      ],
      [
        "h2",
        "升级指南"
      ],
      [
        "h3",
        "基础组件 0.x -> 1.x 升级"
      ],
      [
        "ul",
        [
          "li",
          [
            "p",
            "将 package.json 里以及代码里依赖的 ",
            [
              "code",
              "@icedesign/base"
            ],
            " 替换成 ",
            [
              "code",
              "@alifd/next"
            ]
          ]
        ],
        [
          "li",
          [
            "p",
            "按照",
            [
              "a",
              {
                "title": null,
                "href": "https://github.com/alibaba/ice/wiki/base-components-upgrade"
              },
              "基础组件 API 变更"
            ],
            "逐步进行升级"
          ]
        ]
      ],
      [
        "h3",
        "主题包升级"
      ],
      [
        "p",
        "主题包用于定制组件的样式，如果之前 package.json 里配置了 theme 字段，请将 ",
        [
          "code",
          "@icedesign/skin"
        ],
        " 替换成 ",
        [
          "code",
          "@icedesign/theme"
        ]
      ],
      [
        "h3",
        "业务组件升级指南"
      ],
      [
        "p",
        "按照 ",
        [
          "a",
          {
            "title": null,
            "href": "https://github.com/alibaba/ice/wiki/biz-components-version"
          },
          "业务组件版本映射表"
        ],
        " 对组件进行版本更换即可，除了 Layout 组件外其他业务组件均无 API 变更，只需要更改 package.json 里的版本号。"
      ]
    ]
  }
]